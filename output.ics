BEGIN:VCALENDAR
VERSION:2.0
PRODID:icalendar-ruby
CALSCALE:GREGORIAN
METHOD:PUBLISH
X-WR-CALDESC:Calendar events for the user\, Liza George
X-WR-CALNAME:Liza George Calendar (Canvas)
BEGIN:VEVENT
SUMMARY:10 Assembly and Functions [cs_233_120221_213565]
DTSTART:20220221T140000Z
DTEND:20220221T180000Z
DTSTAMP:20220112T151200Z
UID:event-calendar-event-45265
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=02&year=2022#calendar_event_45265
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220221T140000Z
DTEND:20220221T160000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50774
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=02&year=2022#calendar_event_50774
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220221T160000Z
DTEND:20220221T180000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50805
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=02&year=2022#calendar_event_50805
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:MODULE 5 VIDEO QUIZ - DUE 3PM CT MONDAY FEBUARY 21ST [fshn_120_120
 221_213078]
DTSTART:20220221T210000Z
DTEND:20220221T210000Z
DTSTAMP:20220222T150100Z
UID:event-assignment-366754
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=02&year=2022#assignment_366754
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 5 Part 2 [cs_233_120221_213565]
DTSTART:20220222T020000Z
DTEND:20220222T020000Z
DTSTAMP:20220112T031900Z
UID:event-assignment-367944
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:*******************\nLearning Objectives\n*******************\
 n\nIn Lab 4\, you created an arithmetic machine by building an instruction
  decoder and a datapath. You will expand on this arithmetic machine by add
 ing support for control instructions (i.e.\, branches and jumps) and data 
 movement instructions (i.e.\, loads and stores). You will be able to\n\n* 
 Build a full machine capable of running MIPS programs containing a variety
  of instructions. (part 2)\n\n************\nInstructions\n************\n\n
 With the Instruction Decoder finished from Part 1\, you should be able to 
 connect everything together to finish your MIPS datapath! As before\, we h
 ave provided the implementations of many modules within the rf.v and rom.v
  files distributed with the lab.\n\nIn addition to the datapath for the ar
 ithmetic machine connected by your previous arith_machine.v\, you will nee
 d to connect the modules representing your data memory\, also including th
 e muxes (with control bits) to choose between the outputs properly.\n\nA f
 ew things to note:\n\n* We have shorthanded the Zero Extension module as 1
 6'b0 in the following diagram. It's still there though!\n\n* Every label i
 n the diagram is important! As a suggestion\, look through each module ind
 ividually and ensure the correct control bits/inputs/outputs are being pas
 sed in.\n\n* If you're unsure of what wires need to be passed into a given
  module\, look through mux_lib.v\, rom.v\, or rf.v for their verilog heade
 rs.\n\nAnd finally\, don't panic! While there are many things to connect\,
  you already know how to instantiate modules and wire them together. So lo
 ng as you're careful\, everything should fall into place.\n\n[full_machine
 _SP20-1.png] (https://canvas.illinois.edu/courses/18018/files/3110383/prev
 iew)\n\nThe files that we provide for Lab 5 include many of those we provi
 ded from Lab 4\, with the following notable additions/extension. None of t
 hese will be graded.\n\n* rom.v: has a data memory access in addition to t
 he instruction memory from Lab 4.\n\n* all.s and lwbr.s: two example MIPS 
 assembly programs for testing your code\n\n* all.text.dat and lwbr.text.da
 t: the machine language that corresponds to the two provided assembly prog
 rams.\n\n* all.data.dat and lwbr.data.dat: the data memory images that cor
 respond to the two provided assembly programs.\n\n------------------------
 -----------------------------\nDatapath modification for ISA extension (ad
 ding ADDM)\n-----------------------------------------------------\n\nModif
 y the datapath and decoder to extend the current MIPS ISA with the new add
 m instruction.\n\naddm rd\, rs\, rt # load word using contents of register
  rs\n# add the loaded value to the contents of register rt\n# store the re
 sult of the sum in register rd\n# uses R-type encoding\n\nR[rd] = M[R[rs]]
  + R[rt]\n\nIn mips_defines.v\, the addm instruction is an R-Type instruct
 ion with function code 6'h2c. You will need to add this instruction to you
 r decoder and add the new parts of the datapath in full_machine.v.\n\nFor 
 this extension you can use the design that your group constructed during c
 lass.\n\n-------------------------\nFixing slt (Extra Credit)\n-----------
 --------------\n\nOur slt implementation\, as discussed in class\, won't a
 lways give correct results. Figure out why and put a corrected implementat
 ion in your full_machine.v to get 5 points of extra credit. Course staff w
 ill not provide office hours support in helping you figure this part out i
 f office hours are packed since it is extra credit. If you want to check y
 our intuitions or ideas\, ask early!\n\n*************************\nFiles T
 hat Will Be Graded\n*************************\n\n*\n\nfull_machine.v: This
  file contains the module full_machine\, which implements the data path fo
 r all instructions from Lab 4\, plus the following instructions.\n\nbeq\, 
 bne\, j\, jr\, lui\, slt\, lw\, lbu\, sw\, sb\, addm\n\nLike Lab 4\, we've
  provided all of the major components\, so there will be little logic outs
 ide of wiring up these provided components and your MIPS decoder from Part
  1 (which you will need to update slightly). There is significant overlap 
 between this assignment and Lab 4\, so you are free to reuse portions of y
 our Lab 4 Verilog in this Lab.\n\n* fm.s: Additional tests for your full m
 achine\; The Compiling\, Running\, and Testing section has more details. L
 ike decoder_tb.v\, this will not be autograded but we can use it for parti
 al credit for regrades\n\n.\n\n*******************************\nCompiling\
 , Running\, and Testing\n*******************************\n\nYou will need 
 to copy paste your decoder.v from part 1 in order to build the full machin
 e\; however\, we will replace the decoder with our copy when the autograde
 r runs. That means you won't get penalized for errors in the decoder twice
 .\n\nWe've provided a Makefile you can use for compiling and running your 
 code. The main rules of interest are make decoder and make full_machine\, 
 for compiling your decoder and full machine modules respectively.\n\nBefor
 e you can run the full machine\, you need to set up your own test case. We
 've provided two test cases in lwbr.s and all.s\, which you can use by run
 ning make lwbr_test and make all_test\, respectively. The assembly files c
 ontain comments specifying their expected behavior\, which you can use to 
 verify your implementation's correctness. lwbr.s is simpler\, so we recomm
 end getting that working first and then progressing to all.s.\n\nOur provi
 ded tests aren't comprehensive\, and in particular\, they don't test most 
 of the instructions carried over from last week\, so it's a good idea to w
 rite your own. To do so\, add your test cases to fm.s and then run make fm
 _test to assemble this file. The program needed for this compilation is al
 ready present in the workspace and EWS machines. Follow the instructions i
 n Canvas to download spim-vasm if you want to develop your code locally.\n
 \nThe full machine test bench will stop after 30 instructions by default. 
 If you need to run more instructions\, you should edit it accordingly.\n\n
 **************************************\nOptional details\, for those inter
 ested\n**************************************\n\nOur simulated memories (i
 nstruction and data) get their initial values from loading files. Specific
 ally\, the instruction memory loads a file called memory.text.dat and the 
 data memory gets its value from loading memory.data.dat.\n\nSince we've pr
 ovided two test cases\, and neither of them are named memory.text.dat and 
 memory.data.dat\, you'll need copy or symbolic link one of the set of file
 s. Specifically\, we'd recommend that you use symbolic links. Symbolic lin
 ks provide an alternate name for a given file. For example:\n\nln -s lwbr.
 text.dat memory.text.dat\nln -s lwbr.data.dat memory.data.dat\n\nBy typing
  ls -l memory*\, we can see that now the memory.* files refer to their lwb
 r counterparts.\n\nlinux_machine$ ls -l memory*\nlrwxrwxrwx 1 prairielearn
 er prairielearner 14 Sep 29 13:00 memory.data.dat -> lwbr.data.dat\nlrwxrw
 xrwx 1 prairielearner prairielearner 14 Sep 29 13:00 memory.text.dat -> lw
 br.text.dat\n\nWe can switch to the all.* equivalents by removing the memo
 ry.* files and making new symbolic links.\n\nrm memory.text.dat memory.dat
 a.dat\nln -s all.text.dat memory.text.dat\nln -s all.data.dat memory.data.
 dat
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=02&year=2022#assignment_367944
X-ALT-DESC;FMTTYPE=text/html:<h1>Learning Objectives</h1>\n<p>In Lab 4\, y
 ou created an arithmetic machine by building an instruction decoder and a 
 datapath. You will expand on this arithmetic machine by adding support for
  control instructions (i.e.\, branches and jumps) and data movement instru
 ctions (i.e.\, loads and stores). You will be able to</p>\n<ul>\n    <li>B
 uild a full machine capable of running MIPS programs containing a variety 
 of instructions. (part 2)</li>\n</ul>\n<h1>Instructions</h1>\n<p>With the 
 Instruction Decoder finished from Part 1\, you should be able to connect e
 verything together to finish your MIPS datapath! As before\, we have provi
 ded the implementations of many modules within the <code>rf.v</code> and <
 code>rom.v</code> files distributed with the lab.</p>\n<p>In addition to t
 he datapath for the arithmetic machine connected by your previous <code>ar
 ith_machine.v</code>\, you will need to connect the modules representing y
 our data memory\, also including the muxes (with control bits) to choose b
 etween the outputs properly.</p>\n<p>A few things to note:</p>\n<ol>\n    
 <li>We have shorthanded the Zero Extension module as 16'b0 in the followin
 g diagram. It's still there though!</li>\n    <li>Every label in the diagr
 am is important! As a suggestion\, look through each module individually a
 nd ensure the correct control bits/inputs/outputs are being passed in.</li
 >\n    <li>If you're unsure of what wires need to be passed into a given m
 odule\, look through <code>mux_lib.v</code>\, <code>rom.v</code>\, or <cod
 e>rf.v</code> for their verilog headers.</li>\n</ol>\n<p>And finally\, don
 't panic! While there are many things to connect\, you already know how to
  instantiate modules and wire them together. So long as you're careful\, e
 verything should fall into place.</p>\n<p><img src="https://canvas.illinoi
 s.edu/courses/18018/files/3110383/preview" alt="full_machine_SP20-1.png" d
 ata-api-endpoint="https://canvas.illinois.edu/api/v1/courses/18018/files/3
 110383" data-api-returntype="File"></p>\n<p>The files that we provide for 
 Lab 5 include many of those we provided from Lab 4\, with the following no
 table additions/extension. None of these will be graded.</p>\n<ul>\n    <l
 i>\n<code>rom.v</code>: has a data memory access in addition to the instru
 ction memory from Lab 4.</li>\n    <li>\n<code>all.s</code> and <code>lwbr
 .s</code>: two example MIPS assembly programs for testing your code</li>\n
     <li>\n<code>all.text.dat</code> and <code>lwbr.text.dat</code>: the ma
 chine language that corresponds to the two provided assembly programs.</li
 >\n    <li>\n<code>all.data.dat</code> and <code>lwbr.data.dat</code>: the
  data memory images that correspond to the two provided assembly programs.
 </li>\n</ul>\n<h2>Datapath modification for ISA extension (adding <code>AD
 DM</code>)</h2>\n<p>Modify the datapath and decoder to extend the current 
 MIPS ISA with the new <code>addm</code> instruction.</p>\n<pre>    addm rd
 \, rs\, rt   # load word using contents of register rs\n                  
     # add the loaded value to the contents of register rt \n              
         # store the result of the sum in register rd  \n                  
     # uses R-type encoding\n</pre>\n<pre>  R[rd] = M[R[rs]] + R[rt]\n</pre
 >\n<p>In <code>mips_defines.v</code>\, the <code>addm</code> instruction i
 s an R-Type instruction with function code <code>6'h2c</code>. <strong>You
  will need to add this instruction to your decoder</strong> and add the ne
 w parts of the datapath in <code>full_machine.v</code>.</p>\n<p>For this e
 xtension you can use the design that your group constructed during class.<
 /p>\n<h2>Fixing <code>slt</code> (Extra Credit)</h2>\n<p>Our slt implement
 ation\, as discussed in class\, won't always give correct results. Figure 
 out why and put a corrected implementation in your <code>full_machine.v</c
 ode> to get 5 points of extra credit. Course staff will not provide office
  hours support in helping you figure this part out if office hours are pac
 ked since it is extra credit. If you want to check your intuitions or idea
 s\, ask early!</p>\n<h1>Files That Will Be Graded</h1>\n<ul>\n    <li>\n  
       <p><code>full_machine.v</code>: This file contains the module <code>
 full_machine</code>\, which implements the data path for all instructions 
 from Lab 4\, plus the following instructions.</p>\n        <p><code>beq</c
 ode>\, <code>bne</code>\, <code>j</code>\, <code>jr</code>\, <code>lui</co
 de>\, <code>slt</code>\, <code>lw</code>\, <code>lbu</code>\, <code>sw</co
 de>\, <code>sb</code>\, <code>addm</code></p>\n        <p>Like Lab 4\, we'
 ve provided all of the major components\, so there will be little logic ou
 tside of wiring up these provided components and your MIPS decoder from Pa
 rt 1 (which you will need to update slightly). There is significant overla
 p between this assignment and Lab 4\, so you are free to <strong>reuse por
 tions of your Lab 4 Verilog in this Lab.</strong></p>\n    </li>\n    <li>
 \n<code>fm.s</code>: Additional tests for your full machine\; The Compilin
 g\, Running\, and Testing section has more details. Like <code>decoder_tb.
 v</code>\, this will not be autograded but we can use it for partial credi
 t for regrades</li>\n    .\n</ul>\n<h1>Compiling\, Running\, and Testing</
 h1>\n<p><strong>You will need to copy paste your <code>decoder.v</code> fr
 om part 1 in order to build the full machine\; however\, we will replace t
 he decoder with our copy when the autograder runs. That means you won't ge
 t penalized for errors in the decoder twice.</strong></p>\n<p>We've provid
 ed a Makefile you can use for compiling and running your code. The main ru
 les of interest are <code>make decoder</code> and <code>make full_machine<
 /code>\, for compiling your decoder and full machine modules respectively.
 </p>\n<p>Before you can run the full machine\, <strong>you need to set up 
 your own test case</strong>. We've provided two test cases in <code>lwbr.s
 </code> and <code>all.s</code>\, which you can use by running <code>make l
 wbr_test</code> and <code>make all_test</code>\, respectively. The assembl
 y files contain comments specifying their expected behavior\, which you ca
 n use to verify your implementation's correctness. <code>lwbr.s</code> is 
 simpler\, so we recommend getting that working first and then progressing 
 to <code>all.s</code>.</p>\n<p>Our provided tests aren't comprehensive\, a
 nd in particular\, they don't test most of the instructions carried over f
 rom last week\, so it's a good idea to write your own. To do so\, add your
  test cases to <code>fm.s</code> and then run <code>make fm_test</code> to
  assemble this file. The program needed for this compilation is already pr
 esent in the workspace and EWS machines. Follow the instructions in Canvas
  to download <code>spim-vasm</code> if you want to develop your code local
 ly.</p>\n<p>The full machine test bench will stop after 30 instructions by
  default. If you need to run more instructions\, you should edit it accord
 ingly.</p>\n<h1>Optional details\, for those interested</h1>\n<p>Our simul
 ated memories (instruction and data) get their initial values from loading
  files. Specifically\, the instruction memory loads a file called <code>me
 mory.text.dat</code> and the data memory gets its value from loading <code
 >memory.data.dat</code>.</p>\n<p>Since we've provided two test cases\, and
  neither of them are named <code>memory.text.dat</code> and <code>memory.d
 ata.dat</code>\, you'll need copy or symbolic link one of the set of files
 . Specifically\, we'd recommend that you use symbolic links. Symbolic link
 s provide an alternate name for a given file. For example:</p>\n\n<pre>ln 
 -s lwbr.text.dat memory.text.dat\nln -s lwbr.data.dat memory.data.dat\n</p
 re>\n\n<p>By typing <code>ls -l memory*</code>\, we can see that now the <
 code>memory.*</code> files refer to their <code>lwbr</code> counterparts.<
 /p>\n\n<pre>linux_machine$ ls -l memory*\nlrwxrwxrwx  1 prairielearner  pr
 airielearner  14 Sep 29 13:00 memory.data.dat -&gt\; lwbr.data.dat\nlrwxrw
 xrwx  1 prairielearner  prairielearner  14 Sep 29 13:00 memory.text.dat -&
 gt\; lwbr.text.dat\n</pre>\n\n<p>We can switch to the <code>all.*</code> e
 quivalents by removing the <code>memory.*</code> files and making new symb
 olic links.</p>\n<pre>rm memory.text.dat memory.data.dat\nln -s all.text.d
 at memory.text.dat\nln -s all.data.dat memory.data.dat\n</pre>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Attendance Quiz Tuesday 2/22 (FSHN 120 A Spring 2022 CRN32987) [fs
 hn_120_120221_213078]
DTSTART:20220222T195000Z
DTEND:20220222T195000Z
DTSTAMP:20220222T184100Z
UID:event-assignment-override-16867
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=02&year=2022#assignment_434568
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:CS 222 Office Hours [cs_222_120221_214564]
DTSTART:20220222T200000Z
DTEND:20220222T210000Z
DTSTAMP:20220222T053200Z
UID:event-calendar-event-71756
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Tuesday 2/22 \n\n2 - 3 PM Harita Reddy. Zoom Link:  https:/
 /illinois.zoom.us/j/85854483154?pwd=QnMyQjRWdFRzdTc5VC9yaExWVTdTUT09
LOCATION:Zoom
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18658&mon
 th=02&year=2022#calendar_event_71756
X-ALT-DESC;FMTTYPE=text/html:<p><strong>Tuesday 2/22&nbsp\;</strong></p>\n
 <p>2 - 3 PM Harita Reddy. Zoom Link:<span>&nbsp\;</span><span>&nbsp\;</spa
 n><a class="external" href="https://illinois.zoom.us/j/85854483154?pwd=QnM
 yQjRWdFRzdTc5VC9yaExWVTdTUT09" target="_blank"><span>https://illinois.zoom
 .us/j/85854483154?pwd=QnMyQjRWdFRzdTc5VC9yaExWVTdTUT09</span></a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:11 Pointers and More Assembly [cs_233_120221_213565]
DTSTART:20220223T140000Z
DTEND:20220223T180000Z
DTSTAMP:20220112T151200Z
UID:event-calendar-event-45266
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=02&year=2022#calendar_event_45266
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220223T140000Z
DTEND:20220223T160000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50775
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=02&year=2022#calendar_event_50775
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220223T160000Z
DTEND:20220223T180000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50806
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=02&year=2022#calendar_event_50806
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Attendance Quiz Thursday 2/24 (FSHN 120 A Spring 2022 CRN32987) [f
 shn_120_120221_213078]
DTSTART:20220224T195000Z
DTEND:20220224T195000Z
DTSTAMP:20220224T170000Z
UID:event-assignment-override-16874
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=02&year=2022#assignment_434569
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220225T170000Z
DTEND:20220225T220000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39908
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=02&year=2022#calendar_event_39908
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:MODULE 5 MINI ASSIGNMENT - DUE 3PM CT FRIDAY FEBUARY 25TH [fshn_12
 0_120221_213078]
DTSTART:20220225T210000Z
DTEND:20220225T210000Z
DTSTAMP:20220225T232200Z
UID:event-assignment-366753
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=02&year=2022#assignment_366753
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:SEMESTER PROJECT "STEP" 5 [fshn_120_120221_213078]
DTSTART:20220225T210000Z
DTEND:20220225T210000Z
DTSTAMP:20220223T005400Z
UID:event-assignment-374589
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Turn to page 113 in your student notes packet.  Complete all 
 questions and then answer the prompt below based on your responses.  
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=02&year=2022#assignment_374589
X-ALT-DESC;FMTTYPE=text/html:<p>Turn to page 113 in your student notes pac
 ket.&nbsp\; Complete all questions and then answer the prompt below based 
 on your responses.&nbsp\;&nbsp\;</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 6 Part 1 (Individual Lab) [cs_233_120221_213565]
DTSTART:20220226T020000Z
DTEND:20220226T020000Z
DTSTAMP:20220112T031900Z
UID:event-assignment-367945
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:**********************************\nTHIS LAB MUST BE DONE INDI
 VIDUALLY\n**********************************\n\nBy individually\, we mean 
 that you should not be looking at anyone else's code while you complete th
 is lab. You are welcome to discuss high level strategies or to ask clarify
 ing questions about what the C code does\, but you should not be discussin
 g specific MIPS instructions.\n\n-------------------\nLearning Objectives\
 n-------------------\n\nThis lab involves writing MIPS procedures. Specifi
 cally\, the concepts involved are:\n\n* Arrays and pointers in MIPS\n\n* M
 IPS control flow (conditionals\, loops\, etc.)\n\n* MIPS function calling 
 conventions\n\n----------\nBackground\n----------\n\nThe functions covered
  in lab 6 will be useful in a future lab called Lab Spimbot. In Lab Spimbo
 t\, one of the things you will be doing is working with a 2D grid and regi
 ons of the grid in various ways. The work in this lab does not directly re
 flect the game in Lab Spimbot\, but should help you develop useful techniq
 ues for it.\n\nThe first function we will have you implement finds which r
 ow contains the most tiles that can be "flipped". A tile\, or a cell in th
 e grid\, is owned by a player in the game\, and it can be flipped if it be
 longs to your opponent. We will call the total number of these tiles as th
 e row's "flip potential".\n\nA visual example\n----------------\n\nLet us 
 start with a simple grid\, say a 3 x 3 grid. Each tile in the grid stores 
 a value that indicates the player who owns the tile. For the purposes of t
 his lab\, we will identify each player with a number. So in a game with 2 
 players\, the first player will be 0 and the second will be 1. Thus\, the 
 grid matrix will be encoded as:\n\n$$ \\begin{bmatrix} 0 & 1 & 1 \\ 0 & 0 
 & 1 \\ 0 & 0 & 0 \\ \\end{bmatrix} $$\n\nThe rows go from top to bottom\, 
 starting with index 0. The columns go from left to right\, starting with i
 ndex 0. To identify a single tile\, we write grid[row][col]\, where row is
  the row index and col is the column index. In the example above\, player 
 1 owns grid[0][1] as well as grid[0][2] and grid[1][2]\, while player 0 ow
 ns the rest. Suppose we're player 1. From our view\, row 0's flip potentia
 l is 1\, while row 1 is 2 and row 2 is 3. So in this example\, row 2 is th
 e "best" row for us to try and flip.\n\n2D array indexing\n---------------
 --\n\nIn the above grid example\, the grid will be declared in C as a 2D a
 rray int grid[3][3]\, where the first number is the row count and the seco
 nd number is the column count. Fundamentally\, a 2D array is just like a 1
 D array\, but with some fancy indexing. The reason for this is that\, in C
 \, a 2D array is laid out in memory in row-major ordering as if it was a 1
 D array. This means that the elements in one row are adjacent to each othe
 r\, and the next row will start right after the previous row. For our exam
 ple\, it will look like this in memory:\n\n$$ \\fbox{0}\\fbox{1}\\fbox{1} 
 \\fbox{0}\\fbox{0}\\fbox{1} \\fbox{0}\\fbox{0}\\fbox{0} $$\n\nIn essence\,
  int grid[3][3] is equivalent to int grid[9]. So to access an element in a
  2D array\, we can generically write the formula of array[row][col] as arr
 ay[row * NUM_COLUMNS + col]. This will come in handy when converting the m
 emory access in C to MIPS assembly.\n\n------------\nInstructions\n-------
 -----\n\nTranslate the C code below to MIPS assembly. Do your best to foll
 ow the [MIPS style guidelines] (https://canvas.illinois.edu/courses/18018/
 pages/mips-style-guidelines). The [MIPS Green Sheet] (https://canvas.illin
 ois.edu/courses/18018/files/3110402?wrap=1) is provided for your reference
 . The function will be passed three arguments:\n\n*\n\ngrid is a 2D array\
 , where the size is determined by NUM_ROWS and NUM_COLS.\n\n*\n\nplayer is
  our player number. It may be any number if there are more players\, not j
 ust 0 or 1.\n\n*\n\nresults is a 1D array. results is called a "out parame
 ter". In C\, only one value can be returned from a function. In order to r
 eturn multiple values\, we pass in an additional argument as a pointer so 
 the function can write its value using that pointer. Thus\, these paramete
 rs are called "out parameters".\n\nWe provide you with three test cases in
  the .data segment. You can modify these test case values to try different
  values in the debugger. Do not delete any test cases\, add any new test c
 ases\, or change the sizing since it will break the debugger and cause tes
 t cases to fail.\n\nGiven a grid as a 2D array and a player number\, the f
 ollowing function finds the row that provides the highest flip potential. 
 A tile in the grid can be flipped if it does not belong to the player (ide
 ntified using the given player number). If two rows have the same flip pot
 ential\, then take the row with the higher index. The function returns the
  row index number\, and also records each row's flip potential in the give
 n results array.\n\nNote: When passing arrays as parameters\, the argument
  registers (e.g. $a0) will hold the starting address of the array\, not th
 e contents of the array.\n\n// These are constants that define array sizes
 .\n#define NUM_ROWS 8\n#define NUM_COLS 8\n\nint find_best_row(int grid[NU
 M_ROWS][NUM_COLS]\, int player\, int results[NUM_ROWS]) {\nint best_row = 
 0\;\nint max_potential = 0\;\n\nfor (int row = 0\; row < NUM_ROWS\; ++row)
  {\nint flip_potential = 0\;\nfor (int col = 0\; col < NUM_COLS\; ++col) {
 \nint tile = grid[row][col]\;\nif (tile != player) {\nflip_potential++\;\n
 }\n}\n\nresults[row] = flip_potential\;\nif (flip_potential >= max_potenti
 al) {\nmax_potential = flip_potential\;\nbest_row = row\;\n}\n}\n\nreturn 
 best_row\;\n}
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=02&year=2022#assignment_367945
X-ALT-DESC;FMTTYPE=text/html:<h1>THIS LAB MUST BE DONE INDIVIDUALLY</h1>\n
 <p>By individually\, we mean that you should not be looking at anyone else
 's code while you complete this lab. You are welcome to discuss high level
  strategies or to ask clarifying questions about what the C code does\, bu
 t you should not be discussing specific MIPS instructions.</p>\n<h2>Learni
 ng Objectives</h2>\n<p>This lab involves writing MIPS procedures. Specific
 ally\, the concepts involved are:</p>\n<ol>\n<li>Arrays and pointers in MI
 PS</li>\n<li>MIPS control flow (conditionals\, loops\, etc.)</li>\n<li>MIP
 S function calling conventions</li>\n</ol>\n<h2>Background</h2>\n<p>The fu
 nctions covered in lab 6 will be useful in a future lab called Lab Spimbot
 . In Lab Spimbot\, one of the things you will be doing is working with a 2
 D grid and regions of the grid in various ways. The work in this lab does 
 not directly reflect the game in Lab Spimbot\, but should help you develop
  useful techniques for it.</p>\n<p>The first function we will have you imp
 lement finds which row contains the most tiles that can be "flipped". A ti
 le\, or a cell in the grid\, is owned by a player in the game\, and it can
  be flipped if it belongs to your opponent. We will call the total number 
 of these tiles as the row's "flip potential".</p>\n<h3>A visual example</h
 3>\n<p>Let us start with a simple grid\, say a <code>3 x 3</code> grid. Ea
 ch tile in the grid stores a value that indicates the player who owns the 
 tile. For the purposes of this lab\, we will identify each player with a n
 umber. So in a game with 2 players\, the first player will be <code>0</cod
 e> and the second will be <code>1</code>. Thus\, the grid matrix will be e
 ncoded as:</p>\n<p>$$ \\begin{bmatrix} 0 &amp\; 1 &amp\; 1 \\ 0 &amp\; 0 &
 amp\; 1 \\ 0 &amp\; 0 &amp\; 0 \\ \\end{bmatrix} $$</p>\n<p>The rows go fr
 om top to bottom\, starting with index 0. The columns go from left to righ
 t\, starting with index 0. To identify a single tile\, we write <code>grid
 [row][col]</code>\, where <code>row</code> is the row index and <code>col<
 /code> is the column index. In the example above\, player <code>1</code> o
 wns <code>grid[0][1]</code> as well as <code>grid[0][2]</code> and <code>g
 rid[1][2]</code>\, while player <code>0</code> owns the rest. Suppose we'r
 e player <code>1</code>. From our view\, row 0's flip potential is 1\, whi
 le row 1 is 2 and row 2 is 3. So in this example\, row 2 is the "best" row
  for us to try and flip.</p>\n<h3>2D array indexing</h3>\n<p>In the above 
 grid example\, the grid will be declared in C as a 2D array <code>int grid
 [3][3]</code>\, where the first number is the row count and the second num
 ber is the column count. Fundamentally\, a 2D array is just like a 1D arra
 y\, but with some fancy indexing. The reason for this is that\, in C\, a 2
 D array is laid out in memory in <strong>row-major ordering</strong> as if
  it was a 1D array. This means that the elements in one row are adjacent t
 o each other\, and the next row will start right after the previous row. F
 or our example\, it will look like this in memory:</p>\n<p>$$ \\fbox{0}\\f
 box{1}\\fbox{1} \\fbox{0}\\fbox{0}\\fbox{1} \\fbox{0}\\fbox{0}\\fbox{0} $$
 </p>\n<p>In essence\, <code>int grid[3][3]</code> is equivalent to <code>i
 nt grid[9]</code>. So to access an element in a 2D array\, we can generica
 lly write the formula of <code>array[row][col]</code> as <code>array[row *
  NUM_COLUMNS + col]</code>. This will come in handy when converting the me
 mory access in C to MIPS assembly.</p>\n<h2>Instructions</h2>\n<p>Translat
 e the C code below to MIPS assembly. Do your best to follow the <a title="
 MIPS style guidelines" href="https://canvas.illinois.edu/courses/18018/pag
 es/mips-style-guidelines" data-api-endpoint="https://canvas.illinois.edu/a
 pi/v1/courses/18018/pages/mips-style-guidelines" data-api-returntype="Page
 ">MIPS style guidelines</a>. The <a id="2228134" class="instructure_file_l
 ink instructure_scribd_file inline_disabled" href="https://canvas.illinois
 .edu/courses/18018/files/3110402?wrap=1" target="_blank" data-canvas-previ
 ewable="true" data-api-endpoint="https://canvas.illinois.edu/api/v1/course
 s/18018/files/3110402" data-api-returntype="File">MIPS Green Sheet</a> is 
 provided for your reference. The function will be passed three arguments:<
 /p>\n<ul>\n<li>\n<p><code>grid</code> is a 2D array\, where the size is de
 termined by <code>NUM_ROWS</code> and <code>NUM_COLS</code>.</p>\n</li>\n<
 li>\n<p><code>player</code> is our player number. It may be any number if 
 there are more players\, not just <code>0</code> or <code>1</code>.</p>\n<
 /li>\n<li>\n<p><code>results</code> is a 1D array. <code>results</code> is
  called a "out parameter". In C\, only one value can be returned from a fu
 nction. In order to return multiple values\, we pass in an additional argu
 ment as a pointer so the function can write its value using that pointer. 
 Thus\, these parameters are called "out parameters".</p>\n</li>\n</ul>\n<p
 >We provide you with three test cases in the <code>.data</code> segment. Y
 ou can modify these test case values to try different values in the debugg
 er. Do not delete any test cases\, add any new test cases\, or change the 
 sizing since it will break the debugger and cause test cases to fail.</p>\
 n<div class="alert alert-warning" role="alert">\n<p>Given a <code>grid</co
 de> as a 2D array and a <code>player</code> number\, the following functio
 n finds the row that provides the highest flip potential. A tile in the gr
 id can be flipped if it does not belong to the player (identified using th
 e given player number). If two rows have the same flip potential\, then ta
 ke the row with the higher index. The function returns the row index numbe
 r\, and also records each row's flip potential in the given <code>results<
 /code> array.</p>\n<p>Note: When passing arrays as parameters\, the argume
 nt registers (e.g. <code>$a0</code>) will hold the starting address of the
  array\, not the contents of the array.</p>\n</div>\n<pre>// These are con
 stants that define array sizes.\n#define NUM_ROWS 8\n#define NUM_COLS 8\n\
 nint find_best_row(int grid[NUM_ROWS][NUM_COLS]\, int player\, int results
 [NUM_ROWS]) {\n    int best_row = 0\;\n    int max_potential = 0\;\n\n    
 for (int row = 0\; row &lt\; NUM_ROWS\; ++row) {\n        int flip_potenti
 al = 0\;\n        for (int col = 0\; col &lt\; NUM_COLS\; ++col) {\n      
       int tile = grid[row][col]\;\n            if (tile != player) {\n    
             flip_potential++\;\n            }\n        }\n\n        result
 s[row] = flip_potential\;\n        if (flip_potential &gt\;= max_potential
 ) {\n            max_potential = flip_potential\;\n            best_row = 
 row\;\n        }\n    }\n\n    return best_row\;\n}\n</pre>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Quiz 5 [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220225T000000
DTEND;VALUE=DATE:20220225T000000
DTSTAMP:20220214T230800Z
UID:event-assignment-367967
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Practice Quiz 5 exactly mirrors the structure of the actual qu
 iz. Quiz 5 will focus on content from Week 5. Specifically\, you will need
  to add a new instruction to the MIPS datapath for the main question on th
 e quiz.\n\nLinks: [Datapath Modification Review Video] (https://mediaspace
 .illinois.edu/media/t/1_vm5mp0to)\n\nIn the actual quiz\, you will receive
  only one MIPS datapath verilog programming problem. We provide two exampl
 e problems so that you don't have to keep generating random instances to s
 ee all questions\, but the actual quiz will have only one modify the datap
 ath question that will have a different instruction to implement. The actu
 al quiz will be out of 100 points and have exactly the same format otherwi
 se. All verilog coding submissions that receive less than 30 points by the
  last submission will be reviewed by the TAs to award partial credit up to
  a max of 30 points.\n\nFor a variety of reasons\, including accidentally 
 pressing Save & Grade too early\, the Quiz 5 grader guards against submiss
 ions that do not make a few\, essential changes to machine.v before gradin
 g. To successfully complete Quiz 5 with good style\, we expect you to do a
 t least the following things:\n\n* You need to modify the decoder so that 
 it can detect the new instruction and create the new control signals for t
 he instruction.\n\n* You need to modify the wire new_inst = 0\; line so th
 at the decoder can detect the new instruction opcode/funct code combinatio
 n. Your modification should have the form wire new_inst = (opcode == ...).
 ..\;.\n\n* You should ideally be passing a new control signal to the datap
 ath from the decoder to the machine datapath (e.g.\, like how you how you 
 passed the ADDM control signal from the decoder to your full machine). Thi
 s means that you should be modifying the decoder module header to pass thi
 s new control signal (which you can name however you want).\n\n* You will 
 need to set the remaining control signals (i.e.\, new_ALUOp\, new_RegWrite
 \, etc.) to control the datapath so that it executes the desired behavior 
 of your new instruction.\n\n* You need to add some new modules or modify e
 xisting ones to implement your new instruction. For example\, you will alm
 ost certainly need to add a new MUX somewhere or make an existing MUX bigg
 er. You may also need to add a new ALU where appropriate.\n\n-----------\n
 Quiz Format\n-----------\n\nYou can expect the following format for the qu
 iz \n\n* 1 question about control signals for the MIPS datapath\n\n* 1 qu
 estion about converting assembly instructions to machine code\n\n* 1 quest
 ion about modifying the MIPS datapath\n\n---------------------------------
 --------\nSolution Videos and Example Solution Code\n---------------------
 --------------------\n\nAdditional videos or example code solutions on how
  to solve each problem are embedded within each question individually. If 
 stuck on any one problem\, you can watch a video or look at the solution t
 here for help.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=02&year=2022#assignment_367967
X-ALT-DESC;FMTTYPE=text/html:<p><span>Practice Quiz 5 exactly mirrors the 
 structure of the actual quiz. Quiz 5 will focus on content from Week 5. Sp
 ecifically\, you will need to add a new instruction to the MIPS datapath f
 or the main question on the quiz.</span></p>\n<p><iframe id="kmsembed-1_vm
 5mp0to" class="kmsembed" style="width: 25vh\;" title="Kaltura Player" src=
 "https://mediaspace.illinois.edu/embed/secure/iframe/entryId/1_vm5mp0to/ui
 ConfId/26883701" sandbox="allow-forms allow-same-origin allow-scripts allo
 w-top-navigation allow-pointer-lock allow-popups allow-modals allow-orient
 ation-lock allow-popups-to-escape-sandbox allow-presentation allow-top-nav
 igation-by-user-activation" allowfullscreen="allowfullscreen" webkitallowf
 ullscreen="webkitallowfullscreen" mozallowfullscreen="mozallowfullscreen" 
 allow="autoplay *\; fullscreen *\; encrypted-media *"></iframe></p>\n<p>Li
 nks: <a href="https://mediaspace.illinois.edu/media/t/1_vm5mp0to">Datapath
  Modification Review Video</a></p>\n<p>In the actual quiz\, you will recei
 ve only one MIPS datapath verilog programming problem. We provide two exam
 ple problems so that you don't have to keep generating random instances to
  see all questions\, but the actual quiz will have only one modify the dat
 apath question that will have a different instruction to implement. The ac
 tual quiz will be out of 100 points and have exactly the same format other
 wise. All verilog coding submissions that receive less than 30 points by t
 he last submission will be reviewed by the TAs to award partial credit up 
 to a max of 30 points.</p>\n<p>For a variety of reasons\, including accide
 ntally pressing Save &amp\; Grade too early\, the Quiz 5 grader guards aga
 inst submissions that do not make a few\, essential changes to <code>machi
 ne.v</code> before grading. To successfully complete Quiz 5 with good styl
 e\, we expect you to do at least the following things:</p>\n<ol>\n    <li>
 You need to modify the decoder so that it can detect the new instruction a
 nd create the new control signals for the instruction.</li>\n    <ul>\n   
      <li>You need to modify the <code>wire new_inst = 0\;</code> line so t
 hat the decoder can detect the new instruction opcode/funct code combinati
 on. Your modification should have the form <code>wire new_inst = (opcode =
 = ...)...\;</code>.</li>\n        <li>You should ideally be passing a new 
 control signal to the datapath from the decoder to the machine datapath (e
 .g.\, like how you how you passed the <code>ADDM</code> control signal fro
 m the decoder to your full machine). This means that you should be modifyi
 ng the decoder module header to pass this new control signal (which you ca
 n name however you want).</li>\n        <li>You will need to set the remai
 ning control signals (i.e.\, <code>new_ALUOp</code>\, <code>new_RegWrite</
 code>\, etc.) to control the datapath so that it executes the desired beha
 vior of your new instruction.</li>\n    </ul>\n    <li>You need to add som
 e new modules or modify existing ones to implement your new instruction. F
 or example\, you will almost certainly need to add a new MUX somewhere or 
 make an existing MUX bigger. You may also need to add a new ALU where appr
 opriate.</li>\n</ol>\n<h2><strong>Quiz Format</strong></h2>\n<p>You can ex
 pect the following format for the quiz&nbsp\;</p>\n<ul>\n    <li>1 questio
 n about control signals for the MIPS datapath</li>\n    <li>1 question abo
 ut converting assembly instructions to machine code</li>\n    <li>1 questi
 on about modifying the MIPS datapath</li>\n</ul>\n<h2>Solution Videos and 
 Example Solution Code</h2>\n<p>Additional videos or example code solutions
  on how to solve each problem are embedded within each question individual
 ly. If stuck on any one problem\, you can watch a video or look at the sol
 ution there for help.</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:12 Recursion [cs_233_120221_213565]
DTSTART:20220228T140000Z
DTEND:20220228T180000Z
DTSTAMP:20220112T151300Z
UID:event-calendar-event-45267
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=02&year=2022#calendar_event_45267
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220228T140000Z
DTEND:20220228T160000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50776
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=02&year=2022#calendar_event_50776
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220228T160000Z
DTEND:20220228T180000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50807
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=02&year=2022#calendar_event_50807
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220228T170000Z
DTEND:20220228T220000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39874
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=02&year=2022#calendar_event_39874
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:CARBOHYDRATES EXTRA CREDIT DISCUSSION BOARD- DUE BEFORE 3PM CT MON
 DAY FEBUARY 28TH (FSHN 120 ONL Spring 2022 CRN57561) [fshn_120_120221_2130
 78]
DTSTART:20220228T210000Z
DTEND:20220228T210000Z
DTSTAMP:20220301T170200Z
UID:event-assignment-override-12736
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:QUESTION TO PONDER: Should we tax sugary sodas at a significan
 tly higher tax rate?  \n\nFOR EXTRA CREDIT CONSIDERATION:\n\n* Research 
 the above question using reputable sources (ex: peer reviewed journal arti
 cles\, the optional text book\, .gov or .edu sites)\n\n* Choose a side an
 d clearly state which side you are supporting in your initial posting\n\n*
  Share your thoughts with 5-8 sentences and additional support references 
 properly sited with MLA format at the end of the post\n\n* Compose 2+ repl
 y postings to your fellow classmates with 3-5 well thought out sentences 
 and one additional (and different) support reference properly sited with M
 LA format at the end of your reply posting\n\n* Complete all of the above 
 prior to 3 PM CT the Monday following the module deadline \n\nNOTE: You 
 will  need to post your initial posting prior to gaining access to other 
 student posts.  You must create a thread in order to view other threads i
 n this forum.  \n\nONLINE STUDENTS ONLY
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=02&year=2022#assignment_366726
X-ALT-DESC;FMTTYPE=text/html:<p><span><strong>QUESTION TO PONDER: Should w
 e tax sugary sodas at a significantly higher tax rate?</strong></span>&nbs
 p\;&nbsp\;</p><hr><p><span><strong>FOR EXTRA CREDIT CONSIDERATION:</strong
 ></span></p><ol><li>Research the above question using reputable sources (e
 x: peer reviewed journal articles\, the optional text book\, .gov or .edu&
 nbsp\;sites)</li><li>Choose a side and clearly state which side you are su
 pporting in your initial posting</li><li>Share your thoughts with 5-8 sent
 ences and additional support references properly sited with MLA format at 
 the end of the post</li><li>Compose 2+ reply postings to your fellow class
 mates&nbsp\;with 3-5 well thought out sentences and one additional (and di
 fferent) support reference properly sited with MLA format at the end of yo
 ur reply posting</li><li>Complete all of the above prior to 3 PM CT&nbsp\;
 the Monday following the module deadline&nbsp\;</li></ol><p><strong>NOTE: 
 You will&nbsp\; need to post your initial posting prior to gaining access 
 to other student posts.&nbsp\; You must create a thread in order to view o
 ther threads in this forum.&nbsp\;&nbsp\;</strong></p><p><span style="text
 -decoration: underline\;"><strong>ONLINE STUDENTS ONLY</strong></span></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:MODULE 6 VIDEO QUIZ - DUE 3PM CT MONDAY FEBUARY 28TH [fshn_120_120
 221_213078]
DTSTART:20220228T210000Z
DTEND:20220228T210000Z
DTSTAMP:20220302T193700Z
UID:event-assignment-366756
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=02&year=2022#assignment_366756
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 6 Part 2 (Individual Lab) [cs_233_120221_213565]
DTSTART:20220301T020000Z
DTEND:20220301T020000Z
DTSTAMP:20220112T031900Z
UID:event-assignment-367946
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:**********************************\nTHIS LAB MUST BE DONE INDI
 VIDUALLY\n**********************************\n\nBy individually\, we mean 
 that you should not be looking at anyone else's code while you complete th
 is lab. You are welcome to discuss high level strategies or to ask clarify
 ing questions about what the C code does\, but you should not be discussin
 g specific MIPS instructions.\n\n-------------------\nLearning Objectives\
 n-------------------\n\nThis lab involves writing MIPS procedures. Specifi
 cally\, the concepts involved are:\n\n* Arrays and pointers in MIPS\n\n* M
 IPS control flow (conditionals\, loops\, etc.)\n\n* MIPS function calling 
 conventions\n\n----------\nBackground\n----------\n\nThe functions covered
  in this part of lab 6 will be useful in a future lab called Lab Spimbot. 
 For this part of the lab\, we will work with disjoint sets.\n\nDisjoint Se
 ts\n-------------\n\nTwo sets are said to be disjoint if they have no comm
 on elements\, that is\, the intersection of the two sets is the empty set.
  Hence\, a Disjoint Set data structure keeps track of a set of elements pa
 rtitioned into different disjoint sets. Each set will have a "representati
 ve" for that set\, which is called the "parent" of the set. When merging t
 wo sets\, we will need some way to determine what the new parent of the se
 t will be. The "rank" is used for this purpose of deciding the new parent 
 of the merged set.\n\nFor this lab\, we will represent the disjoint-set da
 ta structure as two arrays\, one for parent and one for rank. The two arra
 ys will have the same size. For example\, in a set of 10 elements\, we wil
 l use the array index to represent the element. Therefore\, parent[i] and 
 rank[i] will tell us the parent and rank of element i\, respectively.\n\nU
 nion-Find\n----------\n\nThe Union Find algorithm tries to merge disjoint 
 subsets into one larger/common set. The algorithm consists of two parts (f
 unctions):\n\n*\n\nfind: Find which subset an element belongs to. When fin
 d is called for two elements\, it can be used to determine if both element
 s belong to the same subset.\n\n*\n\nunion: Uses find to merge elements fr
 om 2 subsets to the union set\, using rank to determine the new parent.\n\
 nYou will implement the Union-Find algorithm in two separate steps. In the
  first step\, you will write the equivalent of the given C code for find i
 n assembly. In the second step\, you will be implementing union.\n\n------
 ------\nInstructions\n------------\n\nTranslate the C code below to MIPS a
 ssembly. Do your best to follow the [MIPS style guidelines] (https://canva
 s.illinois.edu/courses/18018/pages/mips-style-guidelines). The [MIPS Green
  Sheet] (https://canvas.illinois.edu/courses/18018/files/3110402?wrap=1) i
 s provided for your reference. We provide you with two test cases in the .
 data segment. You can modify these test case values to try different value
 s in the debugger. Do not delete any test cases\, add any new test cases\,
  or change the sizing since it will break the debugger and cause test case
 s to fail.\n\n#define N 10\n\nint ds_find(int parent[N]\, int i) {\nwhile 
 (parent[i] != i) {\ni = parent[i]\;\n}\nreturn i\;\n}\n\n#define N 10\n\nv
 oid ds_union(int parent[N]\, int rank[N]\, int i\, int j) {\nif (i == j) r
 eturn\;\nint i_repr = ds_find(parent\, i)\;\nint j_repr = ds_find(parent\,
  j)\;\n\nif (rank[i_repr] < rank[j_repr]) {\nparent[i_repr] = j_repr\;\n} 
 else if (rank[i_repr] > rank[j_repr]) {\nparent[j_repr] = i_repr\;\n} else
  {\nparent[i_repr] = j_repr\;\nrank[j_repr]++\;\n}\n}
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=02&year=2022#assignment_367946
X-ALT-DESC;FMTTYPE=text/html:<h1>THIS LAB MUST BE DONE INDIVIDUALLY</h1>\n
 <p>By individually\, we mean that you should not be looking at anyone else
 's code while you complete this lab. You are welcome to discuss high level
  strategies or to ask clarifying questions about what the C code does\, bu
 t you should not be discussing specific MIPS instructions.</p>\n<h2>Learni
 ng Objectives</h2>\n<p>This lab involves writing MIPS procedures. Specific
 ally\, the concepts involved are:</p>\n<ol>\n<li>Arrays and pointers in MI
 PS</li>\n<li>MIPS control flow (conditionals\, loops\, etc.)</li>\n<li>MIP
 S function calling conventions</li>\n</ol>\n<h2>Background</h2>\n<p>The fu
 nctions covered in this part of lab 6 will be useful in a future lab calle
 d Lab Spimbot. For this part of the lab\, we will work with disjoint sets.
 </p>\n<h3>Disjoint Sets</h3>\n<p>Two sets are said to be disjoint if they 
 have no common elements\, that is\, the intersection of the two sets is th
 e empty set. Hence\, a Disjoint Set data structure keeps track of a set of
  elements partitioned into different disjoint sets. Each set will have a "
 representative" for that set\, which is called the "parent" of the set. Wh
 en merging two sets\, we will need some way to determine what the new pare
 nt of the set will be. The "rank" is used for this purpose of deciding the
  new parent of the merged set.</p>\n<p>For this lab\, we will represent th
 e disjoint-set data structure as two arrays\, one for <code>parent</code> 
 and one for <code>rank</code>. The two arrays will have the same size. For
  example\, in a set of 10 elements\, we will use the array index to repres
 ent the element. Therefore\, <code>parent[i]</code> and <code>rank[i]</cod
 e> will tell us the parent and rank of element <code>i</code>\, respective
 ly.</p>\n<h3>Union-Find</h3>\n<p>The Union Find algorithm tries to merge d
 isjoint subsets into one larger/common set. The algorithm consists of two 
 parts (functions):</p>\n<ol>\n<li>\n<p><code>find</code>: Find which subse
 t an element belongs to. When <code>find</code> is called for two elements
 \, it can be used to determine if both elements belong to the same subset.
 </p>\n</li>\n<li>\n<p><code>union</code>: Uses <code>find</code> to merge 
 elements from 2 subsets to the union set\, using rank to determine the new
  parent.</p>\n</li>\n</ol>\n<p>You will implement the Union-Find algorithm
  in two separate steps. In the first step\, you will write the equivalent 
 of the given C code for <code>find</code> in assembly. In the second step\
 , you will be implementing <code>union</code>.</p>\n<h2>Instructions</h2>\
 n<p>Translate the C code below to MIPS assembly. Do your best to follow th
 e <a title="MIPS style guidelines" href="https://canvas.illinois.edu/cours
 es/18018/pages/mips-style-guidelines" data-api-endpoint="https://canvas.il
 linois.edu/api/v1/courses/18018/pages/mips-style-guidelines" data-api-retu
 rntype="Page">MIPS style guidelines</a>. The <a id="2228134" class="instru
 cture_file_link instructure_scribd_file inline_disabled" href="https://can
 vas.illinois.edu/courses/18018/files/3110402?wrap=1" target="_blank" data-
 canvas-previewable="true" data-api-endpoint="https://canvas.illinois.edu/a
 pi/v1/courses/18018/files/3110402" data-api-returntype="File">MIPS Green S
 heet</a> is provided for your reference. We provide you with two test case
 s in the <code>.data</code> segment. You can modify these test case values
  to try different values in the debugger. Do not delete any test cases\, a
 dd any new test cases\, or change the sizing since it will break the debug
 ger and cause test cases to fail.</p>\n<pre>#define N 10\n\nint ds_find(in
 t parent[N]\, int i) {\n    while (parent[i] != i) {\n        i = parent[i
 ]\;\n    }\n    return i\;\n}\n</pre>\n<pre>#define N 10\n\nvoid ds_union(
 int parent[N]\, int rank[N]\, int i\, int j) {\n    if (i == j) return\;\n
     int i_repr = ds_find(parent\, i)\;\n    int j_repr = ds_find(parent\, 
 j)\;\n\n    if (rank[i_repr] &lt\; rank[j_repr]) {\n        parent[i_repr]
  = j_repr\;\n    } else if (rank[i_repr] &gt\; rank[j_repr]) {\n        pa
 rent[j_repr] = i_repr\;\n    } else {\n        parent[i_repr] = j_repr\;\n
         rank[j_repr]++\;\n    }\n}\n</pre>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Weekly Review 1 [cs_222_120221_214564]
DTSTART;VALUE=DATE:20220228T000000
DTEND;VALUE=DATE:20220228T000000
DTSTAMP:20220315T082000Z
UID:event-assignment-383678
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Provide a short (2-3 sentence) description of the work you com
 pleted in the last week. The remaining fields in the rubric will be scored
  by your mentor.\n\nTo ensure a fair grade\, your score will be determined
  as follows:\n\nPenaliser = (Participation + Explanation of Effort)/5.0\nS
 tudent’s Total Score = Participation + Explanation of Effort\n      
           + Penaliser*(Collaboration + Software Engineering Best Prac
 tices)
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18658&mon
 th=02&year=2022#assignment_383678
X-ALT-DESC;FMTTYPE=text/html:<p>Provide a short (2-3 sentence) description
  of the work you completed in the last week. The remaining fields in the r
 ubric will be scored by your mentor.</p>\n<p>To ensure a fair grade\, your
  score will be determined as follows:</p>\n<p>Penaliser = (Participation +
  Explanation of Effort)/5.0<br>Student’s Total Score = Participation + E
 xplanation of Effort<br>&nbsp\; &nbsp\; &nbsp\; &nbsp\; &nbsp\; &nbsp\; &n
 bsp\; &nbsp\; + Penaliser*(Collaboration + Software Engineering Best Pract
 ices)</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220301T170000Z
DTEND:20220301T220000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39915
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_39915
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:IN PERSON CLASS T/R POLLING QUESTIONS (NO AUDIO OR VIDEO) [fshn_12
 0_120221_213078]
DTSTART:20220301T180000Z
DTEND:20220301T200000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39967
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:966 4014 0173] (https://illin
 ois.zoom.us/j/96640140173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_39967
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/966401
 40173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09" target="_blank">Click here to 
 join Zoom Meeting:966 4014 0173</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Attendance Quiz Tuesday 3/1 (FSHN 120 A Spring 2022 CRN32987) [fsh
 n_120_120221_213078]
DTSTART:20220301T195000Z
DTEND:20220301T195000Z
DTSTAMP:20220301T180500Z
UID:event-assignment-override-17421
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_436938
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:13 IO and interrupts [cs_233_120221_213565]
DTSTART:20220302T140000Z
DTEND:20220302T180000Z
DTSTAMP:20220112T151300Z
UID:event-calendar-event-45269
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_45269
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220302T140000Z
DTEND:20220302T160000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50777
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50777
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220302T160000Z
DTEND:20220302T180000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50808
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50808
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220302T170000Z
DTEND:20220302T220000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-40070
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_40070
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220303T170000Z
DTEND:20220303T220000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39978
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_39978
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:IN PERSON CLASS T/R POLLING QUESTIONS (NO AUDIO OR VIDEO) [fshn_12
 0_120221_213078]
DTSTART:20220303T180000Z
DTEND:20220303T200000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39894
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:966 4014 0173] (https://illin
 ois.zoom.us/j/96640140173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_39894
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/966401
 40173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09" target="_blank">Click here to 
 join Zoom Meeting:966 4014 0173</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Attendance Quiz Thursday 3/3 (FSHN 120 A Spring 2022 CRN32987) [fs
 hn_120_120221_213078]
DTSTART:20220303T195000Z
DTEND:20220303T195000Z
DTSTAMP:20220303T170000Z
UID:event-assignment-override-17420
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_436939
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:CS 222 Office Hours [cs_222_120221_214564]
DTSTART:20220303T200000Z
DTEND:20220303T210000Z
DTSTAMP:20220228T034800Z
UID:event-calendar-event-72479
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Thursday 3/3 2-3 PM\n\nZoom: https://illinois.zoom.us/j/858544
 83154?pwd=QnMyQjRWdFRzdTc5VC9yaExWVTdTUT09
LOCATION:Zoom
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18658&mon
 th=03&year=2022#calendar_event_72479
X-ALT-DESC;FMTTYPE=text/html:<p>Thursday 3/3 2-3 PM</p>\n<p>Zoom: <a class
 ="external" href="https://illinois.zoom.us/j/85854483154?pwd=QnMyQjRWdFRzd
 Tc5VC9yaExWVTdTUT09" target="_blank"><span>https://illinois.zoom.us/j/8585
 4483154?pwd=QnMyQjRWdFRzdTc5VC9yaExWVTdTUT09</span></a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220304T170000Z
DTEND:20220304T220000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-40043
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_40043
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:MODULE 6 MINI ASSIGNMENT - DUE 3PM CT FRIDAY MARCH 4TH [fshn_120_1
 20221_213078]
DTSTART:20220304T210000Z
DTEND:20220304T210000Z
DTSTAMP:20220320T184700Z
UID:event-assignment-366755
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_366755
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:SEMESTER PROJECT "STEP" 6 [fshn_120_120221_213078]
DTSTART:20220304T210000Z
DTEND:20220304T210000Z
DTSTAMP:20220225T203500Z
UID:event-assignment-374590
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Complete page 135 in your student notes packet and answer the 
 questions below for full consideration.  \n\nIMPORTANT: The notes packet
  needs a little more clarification.  To calculate the Calories from fat\,
  you would take the grams of fat consumed and multiply by 9 Calories per g
 ram of fat to determine the total Calories from fat consumed.  
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_374590
X-ALT-DESC;FMTTYPE=text/html:<p>Complete page 135 in your student notes pa
 cket and answer the questions below for full consideration.&nbsp\;&nbsp\;<
 /p>\n<p><em>IMPORTANT: The notes packet needs a little more clarification.
 &nbsp\; To calculate the Calories from fat\, you would take the grams of f
 at consumed and multiply by 9 Calories per gram of fat to determine the to
 tal Calories from fat consumed.&nbsp\;&nbsp\;</em></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 7 Part 1 (Individual Lab) [cs_233_120221_213565]
DTSTART:20220305T020000Z
DTEND:20220305T020000Z
DTSTAMP:20220112T031900Z
UID:event-assignment-367947
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:**********************************\nTHIS LAB MUST BE DONE INDI
 VIDUALLY\n**********************************\n\nBy individually\, we mean 
 that you should not be looking at anyone else's code while you complete th
 is lab. You are welcome to discuss high level strategies or to ask clarify
 ing questions about what the C code does\, but you should not be discussin
 g specific MIPS instructions.\n\n-------------------\nLearning Objectives\
 n-------------------\n\n* To manage pointers and data structures in MIPS a
 ssembly\n\n* To use function calls and recursion in MIPS assembly\n\n-----
 -----\nBackground\n----------\n\nIn this lab\, you will utilize structs to
  represent canvas and lines. A struct is a high-level language tool\, a wa
 y to reference an aggregation of data with just a single variable or point
 er. Physically\, a struct is a region of memory big enough to hold all the
  members inside it\, like with an array\, except that the elements can be 
 all different sizes and types.\n\nA struct example\n----------------\n\nLe
 t's say we want to represent a graph and nodes in the graph. We can use a 
 Node struct declared as follows:\n\nstruct Node {\nint node_id\;\nstruct N
 ode** children\;\n}\;\n\nThe Node struct contains two member variables: an
  integer node_id and a pointer to a null terminated array of node pointers
  children. That is\, the second element in the node struct is a word that 
 represents the address of another place in memory\, where an array of node
  pointers is stored. To know when you have reached the end of the array\, 
 the last element of the array will be a NULL pointer. Each element of the 
 array is a Node pointer which points to a place in memory where the struct
  is allocated. If you're confused about this\, treat the second element of
  the Node struct as an array of integers. Those integers just happen to be
  addresses that point to nodes.\n\n(Note: Sometimes a length may be given 
 alongside the array. In those cases\, you will use the length to determine
  the end of the array rather than a NULL pointer.)\n\nAccess struct member
 s\n---------------------\n\nLet's assume we have a variable named mynode t
 hat is a Node struct. How do we access the members? If we want the node_id
  element of mynode\, we reference it using mynode.node_id. Same thing if w
 e wanted the other elements -- we will use a . (dot) followed by the membe
 r name. But what if all we had was a pointer to mynode?\n\nNode* myptr = &
 mynode\;\n\nIn this case\, we will dereference the pointer before accessin
 g a member: (*myptr).node_id. This can be inconvienent\, so C provides a s
 horthand for this: myptr->node_id. You'll see a lot of this "arrow" operat
 or in the C code for this lab.\n\n--------------------\nDraw Lines on Canv
 as\n--------------------\n\nAfter learning more advanced painting skills\,
  you need a better canvas to make the masterpiece. You choose the Canvas s
 truct\, which has four member variables: two integers for the height and w
 idth of the canvas\, a char for the pattern to draw\, and an array of char
  pointers where each char pointer represents a row and each char represent
 s a single pixel on the canvas.\n\nBelow is an example of a 5 x 5 canvas\,
  with a single line using the pattern #. We will use . (dot) to represent 
 empty pixel. The pixels are labeled in row-major order from 0 to height x 
 width - 1.\n\n$$ \\def\\arraystretch{1.5} \\begin{array}{|r|c|l|} \\hline 
 . & . & . & . & . \\ \\hline . & . & . & . & . \\ \\hline \\# & \\# & \\# 
 & \\# & \\# \\ \\hline . & . & . & . & . \\ \\hline . & . & . & . & . \\ \
 \hline \\end{array} $$\n\nTo get familiar with this new canvas\, you will 
 practice the basic skill: drawing a line on the canvas.\n\nGiven a Canvas 
 struct\, the start position and the end position of a horizontal or vertic
 al line\, the following function will draw a line on the canvas by setting
  each pixel along the line to the pattern\, by storing the pattern value i
 nto the char pointer array.\n\nNote: When passing a struct as parameters\,
  the respective argument register will hold the starting address of the st
 ruct\, not the contents of the struct.\n\nstruct Canvas {\n// Height and w
 idth of the canvas.\nunsigned int height\;\nunsigned int width\;\n// The p
 attern to draw on the canvas.\nunsigned char pattern\;\n// Each char* is n
 ull-terminated and has same length.\nchar** canvas\;\n}\n\n// Draw a line 
 on canvas from start_pos to end_pos.\n// start_pos will always be smaller 
 than end_pos.\nvoid draw_line(unsigned int start_pos\, unsigned int end_po
 s\, Canvas* canvas) {\nunsigned int width = canvas->width\;\nunsigned int 
 step_size = 1\;\n// Check if the line is vertical.\nif (end_pos - start_po
 s >= width) {\nstep_size = width\;\n}\n// Update the canvas with the new l
 ine.\nfor (int pos = start_pos\; pos != end_pos + step_size\; pos += step_
 size) {\ncanvas->canvas[pos / width][pos % width] = canvas->pattern\;\n}\n
 }\n\n------------\nInstructions\n------------\n\nTranslate the C code abov
 e to MIPS assembly. Do your best to follow the [MIPS style guidelines] (ht
 tps://canvas.illinois.edu/courses/18018/pages/mips-style-guidelines). The 
 [MIPS Green Sheet] (https://canvas.illinois.edu/courses/18018/files/311040
 2?wrap=1) is provided for your reference.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#assignment_367947
X-ALT-DESC;FMTTYPE=text/html:<h1>THIS LAB MUST BE DONE INDIVIDUALLY</h1>\n
 <p>By individually\, we mean that you should not be looking at anyone else
 's code while you complete this lab. You are welcome to discuss high level
  strategies or to ask clarifying questions about what the C code does\, bu
 t you should not be discussing specific MIPS instructions.</p>\n<h2>Learni
 ng Objectives</h2>\n<ol>\n    <li>To manage pointers and data structures i
 n MIPS assembly</li>\n    <li>To use function calls and recursion in MIPS 
 assembly</li>\n</ol>\n<h2>Background</h2>\n<p>In this lab\, you will utili
 ze structs to represent canvas and lines. A <code>struct</code> is a high-
 level language tool\, a way to reference an aggregation of data with just 
 a single variable or pointer. Physically\, a struct is a region of memory 
 big enough to hold all the members inside it\, like with an array\, except
  that the elements can be all different sizes and types.</p>\n<h3>A struct
  example</h3>\n<p>Let's say we want to represent a graph and nodes in the 
 graph. We can use a <code>Node</code> struct declared as follows:</p>\n<di
 v class="pl-code">\n    <div class="mb-2 rounded" style="background: #f0f0
 f0\;">\n        <pre style="padding: 0.5rem\; margin-bottom: 0px\; line-he
 ight: 125%\;"><span style="color: #007020\;">struct</span> <span style="co
 lor: #0e84b5\;">Node</span><span style="color: #bbbbbb\;"> </span>{\n<span
  style="color: #bbbbbb\;">    </span><span style="color: #902000\;">int</s
 pan><span style="color: #bbbbbb\;"> </span>node_id\;\n<span style="color: 
 #bbbbbb\;">    </span><span style="color: #007020\;">struct</span> <span s
 tyle="color: #0e84b5\;">Node</span><span style="color: #666666\;">**</span
 ><span style="color: #bbbbbb\;"> </span>children\;\n}\;\n</pre>\n    </div
 >\n</div>\n<p>The <code>Node</code> struct contains two member variables: 
 an integer <code>node_id</code> and a pointer to a null terminated array o
 f node pointers <code>children</code>. That is\, the second element in the
  node struct is a word that represents the address of another place in mem
 ory\, where an array of node pointers is stored. To know when you have rea
 ched the end of the array\, the last element of the array will be a NULL p
 ointer. Each element of the array is a <code>Node</code> pointer which poi
 nts to a place in memory where the struct is allocated. If you're confused
  about this\, treat the second element of the <code>Node</code> struct as 
 an array of integers. Those integers just happen to be addresses that poin
 t to nodes.</p>\n<p>(Note: Sometimes a length may be given alongside the a
 rray. In those cases\, you will use the length to determine the end of the
  array rather than a NULL pointer.)</p>\n<h3>Access struct members</h3>\n<
 p>Let's assume we have a variable named <code>mynode</code> that is a <cod
 e>Node</code> struct. How do we access the members? If we want the <code>n
 ode_id</code> element of <code>mynode</code>\, we reference it using <code
 >mynode.node_id</code>. Same thing if we wanted the other elements -- we w
 ill use a <code>.</code> (dot) followed by the member name. But what if al
 l we had was a <em>pointer</em> to <code>mynode</code>?</p>\n<div class="p
 l-code">\n    <div class="mb-2 rounded" style="background: #f0f0f0\;">\n  
       <pre style="padding: 0.5rem\; margin-bottom: 0px\; line-height: 125%
 \;">Node<span style="color: #666666\;">*</span><span style="color: #bbbbbb
 \;"> </span>myptr<span style="color: #bbbbbb\;"> </span><span style="color
 : #666666\;">=</span><span style="color: #bbbbbb\;"> </span><span style="c
 olor: #666666\;">&amp\;</span>mynode\;\n</pre>\n    </div>\n</div>\n<p>In 
 this case\, we will dereference the pointer before accessing a member: <co
 de>(*myptr).node_id</code>. This can be inconvienent\, so C provides a sho
 rthand for this: <code>myptr-&gt\;node_id</code>. You'll see a lot of this
  "arrow" operator in the C code for this lab.</p>\n<h2>Draw Lines on Canva
 s</h2>\n<p>After learning more advanced painting skills\, you need a bette
 r canvas to make the masterpiece. You choose the <code>Canvas</code> struc
 t\, which has four member variables: two integers for the height and width
  of the canvas\, a <code>char</code> for the pattern to draw\, and an arra
 y of <code>char</code> pointers where each <code>char</code> pointer repre
 sents a row and each <code>char</code> represents a single pixel on the ca
 nvas.</p>\n<p>Below is an example of a 5 x 5 canvas\, with a single line u
 sing the pattern <code>#</code>. We will use <code>.</code> (dot) to repre
 sent empty pixel. The pixels are labeled in row-major order from 0 to <cod
 e>height x width - 1</code>.</p>\n<p>$$ \\def\\arraystretch{1.5} \\begin{a
 rray}{|r|c|l|} \\hline . &amp\; . &amp\; . &amp\; . &amp\; . \\ \\hline . 
 &amp\; . &amp\; . &amp\; . &amp\; . \\ \\hline \\# &amp\; \\# &amp\; \\# &
 amp\; \\# &amp\; \\# \\ \\hline . &amp\; . &amp\; . &amp\; . &amp\; . \\ \
 \hline . &amp\; . &amp\; . &amp\; . &amp\; . \\ \\hline \\end{array} $$</p
 >\n<p>To get familiar with this new canvas\, you will practice the basic s
 kill: drawing a line on the canvas.</p>\n<div class="alert alert-warning" 
 role="alert">\n    <p>Given a <code>Canvas</code> struct\, the start posit
 ion and the end position of a horizontal or vertical line\, the following 
 function will draw a line on the canvas by setting each pixel along the li
 ne to the pattern\, by storing the pattern value into the <code>char</code
 > pointer array.</p>\n    <p>Note: When passing a struct as parameters\, t
 he respective argument register will hold the starting address of the stru
 ct\, not the contents of the struct.</p>\n</div>\n<div class="pl-code">\n 
    <div class="mb-2 rounded" style="background: #f0f0f0\;">\n        <pre 
 style="padding: 0.5rem\; margin-bottom: 0px\; line-height: 125%\;"><span s
 tyle="color: #007020\;">struct</span> <span style="color: #0e84b5\;">Canva
 s</span><span style="color: #bbbbbb\;"> </span>{\n<span style="color: #bbb
 bbb\;">    </span><span style="color: #60a0b0\; font-style: italic\;">// H
 eight and width of the canvas.</span>\n<span style="color: #bbbbbb\;">    
 </span><span style="color: #902000\;">unsigned</span><span style="color: #
 bbbbbb\;"> </span><span style="color: #902000\;">int</span><span style="co
 lor: #bbbbbb\;"> </span>height\;\n<span style="color: #bbbbbb\;">    </spa
 n><span style="color: #902000\;">unsigned</span><span style="color: #bbbbb
 b\;"> </span><span style="color: #902000\;">int</span><span style="color: 
 #bbbbbb\;"> </span>width\;\n<span style="color: #bbbbbb\;">    </span><spa
 n style="color: #60a0b0\; font-style: italic\;">// The pattern to draw on 
 the canvas.</span>\n<span style="color: #bbbbbb\;">    </span><span style=
 "color: #902000\;">unsigned</span><span style="color: #bbbbbb\;"> </span><
 span style="color: #902000\;">char</span><span style="color: #bbbbbb\;"> <
 /span>pattern\;\n<span style="color: #bbbbbb\;">    </span><span style="co
 lor: #60a0b0\; font-style: italic\;">// Each char* is null-terminated and 
 has same length.</span>\n<span style="color: #bbbbbb\;">    </span><span s
 tyle="color: #902000\;">char</span><span style="color: #666666\;">**</span
 ><span style="color: #bbbbbb\;"> </span>canvas\;\n}\n\n<span style="color:
  #60a0b0\; font-style: italic\;">// Draw a line on canvas from start_pos t
 o end_pos.</span>\n<span style="color: #60a0b0\; font-style: italic\;">// 
 start_pos will always be smaller than end_pos.</span>\n<span style="color:
  #902000\;">void</span><span style="color: #bbbbbb\;"> </span>draw_line(<s
 pan style="color: #902000\;">unsigned</span><span style="color: #bbbbbb\;"
 > </span><span style="color: #902000\;">int</span><span style="color: #bbb
 bbb\;"> </span>start_pos\,<span style="color: #bbbbbb\;"> </span><span sty
 le="color: #902000\;">unsigned</span><span style="color: #bbbbbb\;"> </spa
 n><span style="color: #902000\;">int</span><span style="color: #bbbbbb\;">
  </span>end_pos\,<span style="color: #bbbbbb\;"> </span>Canvas<span style=
 "color: #666666\;">*</span><span style="color: #bbbbbb\;"> </span>canvas)<
 span style="color: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">  
   </span><span style="color: #902000\;">unsigned</span><span style="color:
  #bbbbbb\;"> </span><span style="color: #902000\;">int</span><span style="
 color: #bbbbbb\;"> </span>width<span style="color: #bbbbbb\;"> </span><spa
 n style="color: #666666\;">=</span><span style="color: #bbbbbb\;"> </span>
 canvas<span style="color: #666666\;">-&gt\;</span>width\;\n<span style="co
 lor: #bbbbbb\;">    </span><span style="color: #902000\;">unsigned</span><
 span style="color: #bbbbbb\;"> </span><span style="color: #902000\;">int</
 span><span style="color: #bbbbbb\;"> </span>step_size<span style="color: #
 bbbbbb\;"> </span><span style="color: #666666\;">=</span><span style="colo
 r: #bbbbbb\;"> </span><span style="color: #40a070\;">1</span>\;\n<span sty
 le="color: #bbbbbb\;">    </span><span style="color: #60a0b0\; font-style:
  italic\;">// Check if the line is vertical.</span>\n<span style="color: #
 bbbbbb\;">    </span><span style="color: #007020\;">if</span><span style="
 color: #bbbbbb\;"> </span>(end_pos<span style="color: #bbbbbb\;"> </span><
 span style="color: #666666\;">-</span><span style="color: #bbbbbb\;"> </sp
 an>start_pos<span style="color: #bbbbbb\;"> </span><span style="color: #66
 6666\;">&gt\;=</span><span style="color: #bbbbbb\;"> </span>width)<span st
 yle="color: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">        <
 /span>step_size<span style="color: #bbbbbb\;"> </span><span style="color: 
 #666666\;">=</span><span style="color: #bbbbbb\;"> </span>width\;\n<span s
 tyle="color: #bbbbbb\;">    </span>}\n<span style="color: #bbbbbb\;">    <
 /span><span style="color: #60a0b0\; font-style: italic\;">// Update the ca
 nvas with the new line.</span>\n<span style="color: #bbbbbb\;">    </span>
 <span style="color: #007020\;">for</span><span style="color: #bbbbbb\;"> <
 /span>(<span style="color: #902000\;">int</span><span style="color: #bbbbb
 b\;"> </span>pos<span style="color: #bbbbbb\;"> </span><span style="color:
  #666666\;">=</span><span style="color: #bbbbbb\;"> </span>start_pos\;<spa
 n style="color: #bbbbbb\;"> </span>pos<span style="color: #bbbbbb\;"> </sp
 an><span style="color: #666666\;">!=</span><span style="color: #bbbbbb\;">
  </span>end_pos<span style="color: #bbbbbb\;"> </span><span style="color: 
 #666666\;">+</span><span style="color: #bbbbbb\;"> </span>step_size\;<span
  style="color: #bbbbbb\;"> </span>pos<span style="color: #bbbbbb\;"> </spa
 n><span style="color: #666666\;">+=</span><span style="color: #bbbbbb\;"> 
 </span>step_size)<span style="color: #bbbbbb\;"> </span>{\n<span style="co
 lor: #bbbbbb\;">        </span>canvas<span style="color: #666666\;">-&gt\;
 </span>canvas[pos<span style="color: #bbbbbb\;"> </span><span style="color
 : #666666\;">/</span><span style="color: #bbbbbb\;"> </span>width][pos<spa
 n style="color: #bbbbbb\;"> </span><span style="color: #666666\;">%</span>
 <span style="color: #bbbbbb\;"> </span>width]<span style="color: #bbbbbb\;
 "> </span><span style="color: #666666\;">=</span><span style="color: #bbbb
 bb\;"> </span>canvas<span style="color: #666666\;">-&gt\;</span>pattern\;\
 n<span style="color: #bbbbbb\;">    </span>}\n}\n</pre>\n    </div>\n</div
 >\n<h2>Instructions</h2>\n<p>Translate the C code above to MIPS assembly. 
 Do your best to follow the <a title="MIPS style guidelines" href="https://
 canvas.illinois.edu/courses/18018/pages/mips-style-guidelines" data-api-en
 dpoint="https://canvas.illinois.edu/api/v1/courses/18018/pages/mips-style-
 guidelines" data-api-returntype="Page">MIPS style guidelines</a>. The <a i
 d="2228134" class="instructure_file_link instructure_scribd_file inline_di
 sabled" href="https://canvas.illinois.edu/courses/18018/files/3110402?wrap
 =1" target="_blank" data-canvas-previewable="true" data-api-endpoint="http
 s://canvas.illinois.edu/api/v1/courses/18018/files/3110402" data-api-retur
 ntype="File">MIPS Green Sheet</a> is provided for your reference.</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Quiz 6 [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220304T000000
DTEND;VALUE=DATE:20220304T000000
DTSTAMP:20220217T151300Z
UID:event-assignment-367968
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:-----------\nQuiz Format\n-----------\n\nThis quiz has some re
 view questions from earlier in the semester. You can expect the following 
 format for the quiz\n\n* 1 question about bitwise logical or binary arithm
 etic\n\n* 1 question about converting between different representations of
  Boolean functions.\n\n* 2 questions about how data is laid out in memory 
 and/or how to load/store data from/to data memory\n\n* 1 question about re
 ading the MIPS Green Sheet\n\n* 1 extended MIPS programming question with 
 an emphasis on how to use argument and return registers\, branches and jum
 ps\, and accessing data stored in data memory. More information on these p
 articular problems below.\n\nAll questions\, except the MIPS programming q
 uestion\, either provide solution videos\, text solutions\, or enough feed
 back to prepare you for the quiz.\n\n-------------------------\nMIPS Progr
 amming Problem \n-------------------------\n\nFor the MIPS Programming Pr
 oblem\, you will lose points for submitting answers that have any type of 
 error\, including syntax errors. Test your code with the debugger before p
 ressing Save & Grade.\n\nIn the actual quiz\, you will receive only one MI
 PS programming problem. This practice quiz provides you with two example p
 roblems so that you don't have to create multiple instances to see all pra
 ctice problems. The actual quiz will be out of 100 points.\n\n[Review Vide
 o] (https://mediaspace.illinois.edu/media/t/1_izke94hr)
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#assignment_367968
X-ALT-DESC;FMTTYPE=text/html:<h2>Quiz Format</h2>\n<p>This quiz has some r
 eview questions from earlier in the semester. You can expect the following
  format for the quiz</p>\n<ul>\n<li>1 question about bitwise logical or bi
 nary arithmetic</li>\n<li>1 question about converting between different re
 presentations of Boolean functions.</li>\n<li>2 questions about how data i
 s laid out in memory and/or how to load/store data from/to data memory</li
 >\n<li>1 question about reading the MIPS Green Sheet</li>\n<li>1 extended 
 MIPS programming question with an emphasis on how to use argument and retu
 rn registers\, branches and jumps\, and accessing data stored in data memo
 ry. More information on these particular problems below.</li>\n</ul>\n<p>A
 ll questions\, except the MIPS programming question\, either provide solut
 ion videos\, text solutions\, or enough feedback to prepare you for the qu
 iz.</p>\n<h2>MIPS Programming Problem&nbsp\;</h2>\n<p>For the MIPS Program
 ming Problem\, you will lose points for submitting answers that have any t
 ype of error\, including syntax errors. Test your code with the debugger b
 efore pressing Save &amp\; Grade.</p>\n<p>In the actual quiz\, you will re
 ceive only one MIPS programming problem. This practice quiz provides you w
 ith two example problems so that you don't have to create multiple instanc
 es to see all practice problems. The actual quiz will be out of 100 points
 .</p>\n<p><iframe id="kmsembed-1_izke94hr" class="kmsembed" style="width: 
 25vh\;" title="Kaltura Player" src="https://mediaspace.illinois.edu/embed/
 secure/iframe/entryId/1_izke94hr/uiConfId/26883701" sandbox="allow-forms a
 llow-same-origin allow-scripts allow-top-navigation allow-pointer-lock all
 ow-popups allow-modals allow-orientation-lock allow-popups-to-escape-sandb
 ox allow-presentation allow-top-navigation-by-user-activation" allowfullsc
 reen="allowfullscreen" webkitallowfullscreen="webkitallowfullscreen" mozal
 lowfullscreen="mozallowfullscreen" allow="autoplay *\; fullscreen *\; encr
 ypted-media *"></iframe></p>\n<p><a href="https://mediaspace.illinois.edu/
 media/t/1_izke94hr">Review Video</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Weekly Review 2 [cs_222_120221_214564]
DTSTART;VALUE=DATE:20220304T000000
DTEND;VALUE=DATE:20220304T000000
DTSTAMP:20220311T203200Z
UID:event-assignment-383681
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Provide a short (2-3 sentence) description of the work you com
 pleted in the last week. The remaining fields in the rubric will be scored
  by your mentor.\n\n \n\nTo ensure a fair grade\, your score will be dete
 rmined as follows:\n\nPenaliser = (Participation + Explanation of Effort)/
 5.0\nStudent’s Total Score = Participation + Explanation of Effort\n  
               + Penaliser*(Collaboration + Software Engineering Bes
 t Practices)
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18658&mon
 th=03&year=2022#assignment_383681
X-ALT-DESC;FMTTYPE=text/html:<p>Provide a short (2-3 sentence) description
  of the work you completed in the last week. The remaining fields in the r
 ubric will be scored by your mentor.</p>\n<p>&nbsp\;</p>\n<p>To ensure a f
 air grade\, your score will be determined as follows:</p>\n<p>Penaliser = 
 (Participation + Explanation of Effort)/5.0<br>Student’s Total Score = P
 articipation + Explanation of Effort<br>&nbsp\; &nbsp\; &nbsp\; &nbsp\; &n
 bsp\; &nbsp\; &nbsp\; &nbsp\; + Penaliser*(Collaboration + Software Engine
 ering Best Practices)</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:14 Performance [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220307T000000
DTEND;VALUE=DATE:20220307T000000
DTSTAMP:20220112T151400Z
UID:event-calendar-event-45270
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_45270
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220307T140000Z
DTEND:20220307T160000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50778
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50778
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220307T160000Z
DTEND:20220307T180000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50809
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50809
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220307T170000Z
DTEND:20220307T220000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39836
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_39836
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:FATS/LIPIDS EXTRA CREDIT DISCUSSION BOARD- DUE BEFORE 3PM MONDAY M
 ARCH 7TH (FSHN 120 ONL Spring 2022 CRN57561) [fshn_120_120221_213078]
DTSTART:20220307T210000Z
DTEND:20220307T210000Z
DTSTAMP:20220228T210000Z
UID:event-assignment-override-12738
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:QUESTION TO PONDER: Should we ban trans fats from being sold a
 nd used as ingredients in foods?  \n\nFOR EXTRA CREDIT CONSIDERATION:\n\
 n* Research the above question using reputable sources (ex: peer reviewed 
 journal articles\, the optional text book\, .gov or .edu sites)\n\n* Choo
 se a side and clearly state which side you are supporting in your initial 
 posting\n\n* Share your thoughts with 5-8 sentences and additional support
  references properly sited with MLA format at the end of the post\n\n* Com
 pose 2+ reply postings to your fellow classmates with 3-5 well thought ou
 t sentences and one additional (and different) support reference properly 
 sited with MLA format at the end of your reply posting\n\n* Complete all o
 f the above prior to 3 PM CT the Monday following the module deadline\n\nN
 OTE: You will need to post your initial posting prior to gaining access to
  other student posts.  You must create a thread in order to view other th
 reads in this forum.  \n\nONLINE STUDENTS ONLY
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_366725
X-ALT-DESC;FMTTYPE=text/html:<p><span><strong>QUESTION TO PONDER: Should w
 e ban trans fats from being sold and used as ingredients in foods?&nbsp\;&
 nbsp\;</strong></span></p><hr><p><em><span><strong>FOR EXTRA CREDIT CONSID
 ERATION:</strong></span></em></p><ol><li>Research the above question using
  reputable sources (ex: peer reviewed journal articles\, the optional text
  book\, .gov or .edu&nbsp\;sites)</li><li>Choose a side and clearly state 
 which side you are supporting in your initial posting</li><li>Share your t
 houghts with 5-8 sentences and additional support references properly site
 d with MLA format at the end of the post</li><li>Compose 2+ reply postings
  to your fellow classmates&nbsp\;with 3-5 well thought out sentences and o
 ne additional (and different) support reference properly sited with MLA fo
 rmat at the end of your reply posting</li><li>Complete all of the above pr
 ior to 3 PM CT the Monday following the module deadline</li></ol><p>NOTE: 
 You will need to post your initial posting prior to gaining access to othe
 r student posts.&nbsp\; You must create a thread in order to view other th
 reads in this forum.&nbsp\;&nbsp\;</p><p><span style="text-decoration: und
 erline\;"><strong>ONLINE STUDENTS ONLY</strong></span></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:MODULE 7 VIDEO QUIZ - DUE 3PM CT MONDAY MARCH 7TH [fshn_120_120221
 _213078]
DTSTART:20220307T210000Z
DTEND:20220307T210000Z
DTSTAMP:20220311T215400Z
UID:event-assignment-366758
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_366758
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 7 Part 2 (Individual Lab) [cs_233_120221_213565]
DTSTART:20220308T020000Z
DTEND:20220308T020000Z
DTSTAMP:20220112T031900Z
UID:event-assignment-367948
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:**********************************\nTHIS LAB MUST BE DONE INDI
 VIDUALLY\n**********************************\n\nBy individually\, we mean 
 that you should not be looking at anyone else's code while you complete th
 is lab. You are welcome to discuss high level strategies or to ask clarify
 ing questions about what the C code does\, but you should not be discussin
 g specific MIPS instructions.\n\n-------------------\nLearning Objectives\
 n-------------------\n\n* To manage pointers and data structures in MIPS a
 ssembly\n\n* To use function calls and recursion in MIPS assembly\n\nThis 
 Lab will really test your ability to follow calling conventions in MIPS. W
 e recommemnd learning to use "callee saved registers" (the $s registers)\n
 \n------------\nInstructions\n------------\n\nTranslate the C code below t
 o MIPS assembly. Do your best to follow the [MIPS style guidelines] (https
 ://cs233.github.io/mipsstyle.html). The [MIPS Green Sheet] (https://canvas
 .illinois.edu/pl/course_instance/7/instructor/clientFilesCourse/MIPS_green
 _sheet.pdf) is provided for your reference.\n\n----------\nBackground\n---
 -------\n\nAs the complexity of your paintings increases\, you are looking
  for a way to keep track of the empty regions on your canvas. An empty reg
 ion is a set of connected pixels that are not yet set to the pattern. Two 
 pixels are connected if they share an edge. Two empty regions are disjoint
  if none of the pixels from one region is connected with any pixel from th
 e other region. That is\, two empty regions are disjoint if there is no pa
 th through connected edges from one region to the other that doesn't pass 
 through a pixel marked with the pattern.\n\nIn the example canvas below\, 
 there are four disjoint regions if we consider the # character as the patt
 ern (labeled A to D).\n\n$$ \\def\\arraystretch{1.5} \\begin{array}{|r|c|l
 |} \\hline \\# & . & . & . & . & . & . & . & . \\ \\hline . & \\# & . & . 
 & . & . & . & . & . \\ \\hline . & . & \\# & . & . & B & . & . & . \\ \\hl
 ine . & A & . & \\# & . & . & . & . & . \\ \\hline . & . & . & . & \\# & .
  & . & . & . \\ \\hline \\# & \\# & \\# & \\# & \\# & \\# & \\# & \\# & \\
 # \\ \\hline . & . & . & . & . & . & \\# & . & D \\ \\hline . & . & . & C 
 & . & . & . & \\# & . \\ \\hline . & . & . & . & . & . & . & . & \\# \\ \\
 hline \\end{array} $$\n\nFlood Fill Algorithm\n--------------------\n\nYou
  want to measure the number of disjoint empty regions on your canvas. This
  will be done in separate steps. First\, to make sure each disjoint empty 
 region is only counted once\, you mark each empty region using the flood-f
 ill algorithm. The algorithm starts with marking an empty pixel and recurs
 ively marking all the connected pixels (the code is shown in the next sect
 ion).\n\nIn this part of the lab\, you will work with the flood-fill algor
 ithm for a Canvas struct. See Lab 7 Part 1 for information about structs.\
 n\nGiven a Canvas struct\, a coordinate\, and a marker\, the following fun
 ction will fill up the entire region.\n\nA region is defined as a space bo
 unded by lines and the border of the canvas. If a tile is not part of a li
 ne\, then that tile and any tile directly up\, down\, left\, or right that
  is also not part of a line are considered to be in the same region. Two n
 on-line tiles diagonal from each other may not be in the same region.\n\nN
 ote: When passing a struct as a parameter\, the respective argument will h
 old the starting address of the struct\, not the contents of the struct.\n
 \nstruct Canvas {\n// Height and width of the canvas.\nunsigned int height
 \;\nunsigned int width\;\n// The pattern to draw on the canvas.\nunsigned 
 char pattern\;\n// Each char* is null-terminated and has same length.\ncha
 r** canvas\;\n}\n\n// Mark an empty region as visited on the canvas using 
 flood fill algorithm.\nvoid flood_fill(int row\, int col\, unsigned char m
 arker\, Canvas* canvas) {\n// Check the current possition is valid.\nif (r
 ow < 0 || col < 0 || row >= canvas->height || col >= canvas->width) {\nret
 urn\;\n}\nunsigned char curr = canvas->canvas[row][col]\;\nif (curr != can
 vas->pattern && curr != marker) {\n// Mark the current pos as visited.\nca
 nvas->canvas[row][col] = marker\;\n// Flood fill four neighbors.\nflood_fi
 ll(row - 1\, col\, marker\, canvas)\;\nflood_fill(row\, col + 1\, marker\,
  canvas)\;\nflood_fill(row + 1\, col\, marker\, canvas)\;\nflood_fill(row\
 , col - 1\, marker\, canvas)\;\n}\n}\n\n----------------------------------
 ------------------\nCount Disjoint Regions on the Canvas at a Given Step\n
 ----------------------------------------------------\n\nThis step function
  iterates through each pixel on the canvas in row-major order and checks i
 f a pixel is empty. If the pixel is empty\, you find another empty region.
  You will increment the region counter and call the flood fill algorithm t
 o mark the entire empty region as visited.\n\n// Count the number of disjo
 int empty area in a given canvas.\nunsigned int count_disjoint_regions_ste
 p(unsigned char marker\, Canvas* canvas) {\n	unsigned int region_count = 0
 \;\n	for (unsigned int row = 0\; row < canvas->height\; row++) {\n		for (u
 nsigned int col = 0\; col < canvas->width\; col++) {\n			unsigned char cur
 r_char = canvas->canvas[row][col]\;\n			if (curr_char != canvas->pattern &
 & curr_char != marker) {\n				region_count++\;\n				flood_fill(row\, col\,
  marker\, canvas)\;\n			}\n		}\n	}\n\n	return region_count\;\n}\n\n-------
 -----------------------------\nCount Disjoint Regions on the Canvas\n-----
 -------------------------------\n\nNow you will use functions implemented 
 above to track the number of disjoint empty regions after drawing each lin
 e on the canvas.\n\nThe Lines struct has two member variables: an integer 
 indicating the number of lines and an integer pointer array of size 2 stor
 ing a sequence of start positions and end positions. You will draw each li
 ne in the Lines struct in the given order using the draw_line function imp
 lemented in Part 1. After drawing each line\, you will call the count_disj
 oint_region_step function to count the number of disjoint empty regions. T
 he region count will be stored in counts field of the Solution struct.\n\n
 struct Lines {\nunsigned int num_lines\;\n// An int* array of size 2\, whe
 re first element is an array of start pos\n// and second element is an arr
 ay of end pos for each line.\n// start pos always has a smaller value than
  end pos.\nunsigned int* coords[2]\;\n}\;\n\nstruct Solution {\nunsigned i
 nt length\;\nint* counts\;\n}\;\n\n// Count the number of disjoint empty a
 rea after adding each line.\n// Store the count values into the Solution s
 truct.\nvoid count_disjoint_regions(const Lines* lines\, Canvas* canvas\,\
 nSolution* solution) {\n// Iterate through each step.\nfor (unsigned int i
  = 0\; i < lines->num_lines\; i++) {\nunsigned int start_pos = lines->coor
 ds[0][i]\;\nunsigned int end_pos = lines->coords[1][i]\;\n// Draw line on 
 canvas.\ndraw_line(start_pos\, end_pos\, canvas)\;\n// Run flood fill algo
 rithm on the updated canvas.\n// In each even iteration\, fill with marker
  'A'\, otherwise use 'B'.\nunsigned int count =\ncount_disjoint_regions_st
 ep('A' + (i % 2)\, canvas)\;\n// Update the solution struct. Memory for co
 unts is preallocated.\nsolution->counts[i] = count\;\n}\nsolution->length 
 = lines->num_lines\;\n}
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#assignment_367948
X-ALT-DESC;FMTTYPE=text/html:<h1>THIS LAB MUST BE DONE INDIVIDUALLY</h1>\n
 <p>By individually\, we mean that you should not be looking at anyone else
 's code while you complete this lab. You are welcome to discuss high level
  strategies or to ask clarifying questions about what the C code does\, bu
 t you should not be discussing specific MIPS instructions.</p>\n<h2>Learni
 ng Objectives</h2>\n<ol>\n    <li>To manage pointers and data structures i
 n MIPS assembly</li>\n    <li>To use function calls and recursion in MIPS 
 assembly</li>\n</ol>\n<div class="alert alert-warning" role="alert">\n    
 <p>This Lab will really test your ability to follow calling conventions in
  MIPS. We recommemnd learning to use "callee saved registers" (the <code>$
 s</code> registers)</p>\n</div>\n<h2>Instructions</h2>\n<p>Translate the C
  code below to MIPS assembly. Do your best to follow the <a href="https://
 cs233.github.io/mipsstyle.html">MIPS style guidelines</a>. The <a href="ht
 tps://canvas.illinois.edu/pl/course_instance/7/instructor/clientFilesCours
 e/MIPS_green_sheet.pdf">MIPS Green Sheet</a> is provided for your referenc
 e.</p>\n<h2>Background</h2>\n<p>As the complexity of your paintings increa
 ses\, you are looking for a way to keep track of the empty regions on your
  canvas. An empty region is a set of connected pixels that are not yet set
  to the pattern. Two pixels are connected if they share an edge. Two empty
  regions are disjoint if none of the pixels from one region is connected w
 ith any pixel from the other region. That is\, two empty regions are disjo
 int if there is no path through connected edges from one region to the oth
 er that doesn't pass through a pixel marked with the pattern.</p>\n<p>In t
 he example canvas below\, there are four disjoint regions if we consider t
 he <code>#</code> character as the pattern (labeled A to D).</p>\n<p>$$ \\
 def\\arraystretch{1.5} \\begin{array}{|r|c|l|} \\hline \\# &amp\; . &amp\;
  . &amp\; . &amp\; . &amp\; . &amp\; . &amp\; . &amp\; . \\ \\hline . &amp
 \; \\# &amp\; . &amp\; . &amp\; . &amp\; . &amp\; . &amp\; . &amp\; . \\ \
 \hline . &amp\; . &amp\; \\# &amp\; . &amp\; . &amp\; B &amp\; . &amp\; . 
 &amp\; . \\ \\hline . &amp\; A &amp\; . &amp\; \\# &amp\; . &amp\; . &amp\
 ; . &amp\; . &amp\; . \\ \\hline . &amp\; . &amp\; . &amp\; . &amp\; \\# &
 amp\; . &amp\; . &amp\; . &amp\; . \\ \\hline \\# &amp\; \\# &amp\; \\# &a
 mp\; \\# &amp\; \\# &amp\; \\# &amp\; \\# &amp\; \\# &amp\; \\# \\ \\hline
  . &amp\; . &amp\; . &amp\; . &amp\; . &amp\; . &amp\; \\# &amp\; . &amp\;
  D \\ \\hline . &amp\; . &amp\; . &amp\; C &amp\; . &amp\; . &amp\; . &amp
 \; \\# &amp\; . \\ \\hline . &amp\; . &amp\; . &amp\; . &amp\; . &amp\; . 
 &amp\; . &amp\; . &amp\; \\# \\ \\hline \\end{array} $$</p>\n<h3>Flood Fil
 l Algorithm</h3>\n<p>You want to measure the number of disjoint empty regi
 ons on your canvas. This will be done in separate steps. First\, to make s
 ure each disjoint empty region is only counted once\, you mark each empty 
 region using the flood-fill algorithm. The algorithm starts with marking a
 n empty pixel and recursively marking all the connected pixels (the code i
 s shown in the next section).</p>\n<p>In this part of the lab\, you will w
 ork with the flood-fill algorithm for a <code>Canvas</code> struct. See La
 b 7 Part 1 for information about structs.</p>\n<p>Given a <code>Canvas</co
 de> struct\, a coordinate\, and a marker\, the following function will fil
 l up the entire region.</p>\n<p>A region is defined as a space bounded by 
 lines and the border of the canvas. If a tile is not part of a line\, then
  that tile and any tile directly up\, down\, left\, or right that is also 
 not part of a line are considered to be in the same region. Two non-line t
 iles diagonal from each other may not be in the same region.</p>\n<p>Note:
  When passing a struct as a parameter\, the respective argument will hold 
 the starting address of the struct\, not the contents of the struct.</p>\n
 <div class="pl-code">\n    <div class="mb-2 rounded" style="background: #f
 0f0f0\;">\n        <pre style="padding: 0.5rem\; margin-bottom: 0px\; line
 -height: 125%\;"><span style="color: #007020\;">struct</span> <span style=
 "color: #0e84b5\;">Canvas</span><span style="color: #bbbbbb\;"> </span>{\n
 <span style="color: #bbbbbb\;">    </span><span style="color: #60a0b0\; fo
 nt-style: italic\;">// Height and width of the canvas.</span>\n<span style
 ="color: #bbbbbb\;">    </span><span style="color: #902000\;">unsigned</sp
 an><span style="color: #bbbbbb\;"> </span><span style="color: #902000\;">i
 nt</span><span style="color: #bbbbbb\;"> </span>height\;\n<span style="col
 or: #bbbbbb\;">    </span><span style="color: #902000\;">unsigned</span><s
 pan style="color: #bbbbbb\;"> </span><span style="color: #902000\;">int</s
 pan><span style="color: #bbbbbb\;"> </span>width\;\n<span style="color: #b
 bbbbb\;">    </span><span style="color: #60a0b0\; font-style: italic\;">//
  The pattern to draw on the canvas.</span>\n<span style="color: #bbbbbb\;"
 >    </span><span style="color: #902000\;">unsigned</span><span style="col
 or: #bbbbbb\;"> </span><span style="color: #902000\;">char</span><span sty
 le="color: #bbbbbb\;"> </span>pattern\;\n<span style="color: #bbbbbb\;">  
   </span><span style="color: #60a0b0\; font-style: italic\;">// Each char*
  is null-terminated and has same length.</span>\n<span style="color: #bbbb
 bb\;">    </span><span style="color: #902000\;">char</span><span style="co
 lor: #666666\;">**</span><span style="color: #bbbbbb\;"> </span>canvas\;\n
 }\n</pre>\n    </div>\n</div>\n<div class="pl-code">\n    <div class="mb-2
  rounded" style="background: #f0f0f0\;">\n        <pre style="padding: 0.5
 rem\; margin-bottom: 0px\; line-height: 125%\;"><span style="color: #60a0b
 0\; font-style: italic\;">// Mark an empty region as visited on the canvas
  using flood fill algorithm.</span>\n<span style="color: #902000\;">void</
 span><span style="color: #bbbbbb\;"> </span>flood_fill(<span style="color:
  #902000\;">int</span><span style="color: #bbbbbb\;"> </span>row\,<span st
 yle="color: #bbbbbb\;"> </span><span style="color: #902000\;">int</span><s
 pan style="color: #bbbbbb\;"> </span>col\,<span style="color: #bbbbbb\;"> 
 </span><span style="color: #902000\;">unsigned</span><span style="color: #
 bbbbbb\;"> </span><span style="color: #902000\;">char</span><span style="c
 olor: #bbbbbb\;"> </span>marker\,<span style="color: #bbbbbb\;"> </span>Ca
 nvas<span style="color: #666666\;">*</span><span style="color: #bbbbbb\;">
  </span>canvas)<span style="color: #bbbbbb\;"> </span>{\n<span style="colo
 r: #bbbbbb\;">    </span><span style="color: #60a0b0\; font-style: italic\
 ;">// Check the current possition is valid.</span>\n<span style="color: #b
 bbbbb\;">    </span><span style="color: #007020\;">if</span><span style="c
 olor: #bbbbbb\;"> </span>(row<span style="color: #bbbbbb\;"> </span><span 
 style="color: #666666\;">&lt\;</span><span style="color: #bbbbbb\;"> </spa
 n><span style="color: #40a070\;">0</span><span style="color: #bbbbbb\;"> <
 /span><span style="color: #666666\;">||</span><span style="color: #bbbbbb\
 ;"> </span>col<span style="color: #bbbbbb\;"> </span><span style="color: #
 666666\;">&lt\;</span><span style="color: #bbbbbb\;"> </span><span style="
 color: #40a070\;">0</span><span style="color: #bbbbbb\;"> </span><span sty
 le="color: #666666\;">||</span><span style="color: #bbbbbb\;"> </span>row<
 span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">&gt\;
 =</span><span style="color: #bbbbbb\;"> </span>canvas<span style="color: #
 666666\;">-&gt\;</span>height<span style="color: #bbbbbb\;"> </span><span 
 style="color: #666666\;">||</span><span style="color: #bbbbbb\;"> </span>c
 ol<span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">&g
 t\;=</span><span style="color: #bbbbbb\;"> </span>canvas<span style="color
 : #666666\;">-&gt\;</span>width)<span style="color: #bbbbbb\;"> </span>{\n
 <span style="color: #bbbbbb\;">        </span><span style="color: #007020\
 ;">return</span>\;\n<span style="color: #bbbbbb\;">    </span>}\n<span sty
 le="color: #bbbbbb\;">    </span><span style="color: #902000\;">unsigned</
 span><span style="color: #bbbbbb\;"> </span><span style="color: #902000\;"
 >char</span><span style="color: #bbbbbb\;"> </span>curr<span style="color:
  #bbbbbb\;"> </span><span style="color: #666666\;">=</span><span style="co
 lor: #bbbbbb\;"> </span>canvas<span style="color: #666666\;">-&gt\;</span>
 canvas[row][col]\;\n<span style="color: #bbbbbb\;">    </span><span style=
 "color: #007020\;">if</span><span style="color: #bbbbbb\;"> </span>(curr<s
 pan style="color: #bbbbbb\;"> </span><span style="color: #666666\;">!=</sp
 an><span style="color: #bbbbbb\;"> </span>canvas<span style="color: #66666
 6\;">-&gt\;</span>pattern<span style="color: #bbbbbb\;"> </span><span styl
 e="color: #666666\;">&amp\;&amp\;</span><span style="color: #bbbbbb\;"> </
 span>curr<span style="color: #bbbbbb\;"> </span><span style="color: #66666
 6\;">!=</span><span style="color: #bbbbbb\;"> </span>marker)<span style="c
 olor: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">        </span>
 <span style="color: #60a0b0\; font-style: italic\;">// Mark the current po
 s as visited.</span>\n<span style="color: #bbbbbb\;">        </span>canvas
 <span style="color: #666666\;">-&gt\;</span>canvas[row][col]<span style="c
 olor: #bbbbbb\;"> </span><span style="color: #666666\;">=</span><span styl
 e="color: #bbbbbb\;">  </span>marker\;\n<span style="color: #bbbbbb\;">   
      </span><span style="color: #60a0b0\; font-style: italic\;">// Flood f
 ill four neighbors.</span>\n<span style="color: #bbbbbb\;">        </span>
 flood_fill(row<span style="color: #bbbbbb\;"> </span><span style="color: #
 666666\;">-</span><span style="color: #bbbbbb\;"> </span><span style="colo
 r: #40a070\;">1</span>\,<span style="color: #bbbbbb\;"> </span>col\,<span 
 style="color: #bbbbbb\;"> </span>marker\,<span style="color: #bbbbbb\;"> <
 /span>canvas)\;\n<span style="color: #bbbbbb\;">        </span>flood_fill(
 row\,<span style="color: #bbbbbb\;"> </span>col<span style="color: #bbbbbb
 \;"> </span><span style="color: #666666\;">+</span><span style="color: #bb
 bbbb\;"> </span><span style="color: #40a070\;">1</span>\,<span style="colo
 r: #bbbbbb\;"> </span>marker\,<span style="color: #bbbbbb\;"> </span>canva
 s)\;\n<span style="color: #bbbbbb\;">        </span>flood_fill(row<span st
 yle="color: #bbbbbb\;"> </span><span style="color: #666666\;">+</span><spa
 n style="color: #bbbbbb\;"> </span><span style="color: #40a070\;">1</span>
 \,<span style="color: #bbbbbb\;"> </span>col\,<span style="color: #bbbbbb\
 ;"> </span>marker\,<span style="color: #bbbbbb\;"> </span>canvas)\;\n<span
  style="color: #bbbbbb\;">        </span>flood_fill(row\,<span style="colo
 r: #bbbbbb\;"> </span>col<span style="color: #bbbbbb\;"> </span><span styl
 e="color: #666666\;">-</span><span style="color: #bbbbbb\;"> </span><span 
 style="color: #40a070\;">1</span>\,<span style="color: #bbbbbb\;"> </span>
 marker\,<span style="color: #bbbbbb\;"> </span>canvas)\;\n<span style="col
 or: #bbbbbb\;">    </span>}\n}\n</pre>\n    </div>\n</div>\n<h2>Count Disj
 oint Regions on the Canvas at a Given Step</h2>\n<p>This step function ite
 rates through each pixel on the canvas in row-major order and checks if a 
 pixel is empty. If the pixel is empty\, you find another empty region. You
  will increment the region counter and call the flood fill algorithm to ma
 rk the entire empty region as visited.</p>\n<div class="pl-code">\n    <di
 v class="mb-2 rounded" style="background: #f0f0f0\;">\n        <pre style=
 "padding: 0.5rem\; margin-bottom: 0px\; line-height: 125%\;"><span style="
 color: #60a0b0\; font-style: italic\;">// Count the number of disjoint emp
 ty area in a given canvas.</span>\n<span style="color: #902000\;">unsigned
 </span><span style="color: #bbbbbb\;"> </span><span style="color: #902000\
 ;">int</span><span style="color: #bbbbbb\;"> </span>count_disjoint_regions
 _step(<span style="color: #902000\;">unsigned</span><span style="color: #b
 bbbbb\;"> </span><span style="color: #902000\;">char</span><span style="co
 lor: #bbbbbb\;"> </span>marker\,<span style="color: #bbbbbb\;"> </span>Can
 vas<span style="color: #666666\;">*</span><span style="color: #bbbbbb\;"> 
 </span>canvas)<span style="color: #bbbbbb\;"> </span>{\n	<span style="colo
 r: #902000\;">unsigned</span><span style="color: #bbbbbb\;"> </span><span 
 style="color: #902000\;">int</span><span style="color: #bbbbbb\;"> </span>
 region_count<span style="color: #bbbbbb\;"> </span><span style="color: #66
 6666\;">=</span><span style="color: #bbbbbb\;"> </span><span style="color:
  #40a070\;">0</span>\;\n	<span style="color: #007020\;">for</span><span st
 yle="color: #bbbbbb\;"> </span>(<span style="color: #902000\;">unsigned</s
 pan><span style="color: #bbbbbb\;"> </span><span style="color: #902000\;">
 int</span><span style="color: #bbbbbb\;"> </span>row<span style="color: #b
 bbbbb\;"> </span><span style="color: #666666\;">=</span><span style="color
 : #bbbbbb\;"> </span><span style="color: #40a070\;">0</span>\;<span style=
 "color: #bbbbbb\;"> </span>row<span style="color: #bbbbbb\;"> </span><span
  style="color: #666666\;">&lt\;</span><span style="color: #bbbbbb\;"> </sp
 an>canvas<span style="color: #666666\;">-&gt\;</span>height\;<span style="
 color: #bbbbbb\;"> </span>row<span style="color: #666666\;">++</span>)<spa
 n style="color: #bbbbbb\;"> </span>{\n		<span style="color: #007020\;">for
 </span><span style="color: #bbbbbb\;"> </span>(<span style="color: #902000
 \;">unsigned</span><span style="color: #bbbbbb\;"> </span><span style="col
 or: #902000\;">int</span><span style="color: #bbbbbb\;"> </span>col<span s
 tyle="color: #bbbbbb\;"> </span><span style="color: #666666\;">=</span><sp
 an style="color: #bbbbbb\;"> </span><span style="color: #40a070\;">0</span
 >\;<span style="color: #bbbbbb\;"> </span>col<span style="color: #bbbbbb\;
 "> </span><span style="color: #666666\;">&lt\;</span><span style="color: #
 bbbbbb\;"> </span>canvas<span style="color: #666666\;">-&gt\;</span>width\
 ;<span style="color: #bbbbbb\;"> </span>col<span style="color: #666666\;">
 ++</span>)<span style="color: #bbbbbb\;"> </span>{\n			<span style="color:
  #902000\;">unsigned</span><span style="color: #bbbbbb\;"> </span><span st
 yle="color: #902000\;">char</span><span style="color: #bbbbbb\;"> </span>c
 urr_char<span style="color: #bbbbbb\;"> </span><span style="color: #666666
 \;">=</span><span style="color: #bbbbbb\;"> </span>canvas<span style="colo
 r: #666666\;">-&gt\;</span>canvas[row][col]\;\n			<span style="color: #007
 020\;">if</span><span style="color: #bbbbbb\;"> </span>(curr_char<span sty
 le="color: #bbbbbb\;"> </span><span style="color: #666666\;">!=</span><spa
 n style="color: #bbbbbb\;"> </span>canvas<span style="color: #666666\;">-&
 gt\;</span>pattern<span style="color: #bbbbbb\;"> </span><span style="colo
 r: #666666\;">&amp\;&amp\;</span><span style="color: #bbbbbb\;"> </span>cu
 rr_char<span style="color: #bbbbbb\;"> </span><span style="color: #666666\
 ;">!=</span><span style="color: #bbbbbb\;"> </span>marker)<span style="col
 or: #bbbbbb\;"> </span>{\n				region_count<span style="color: #666666\;">+
 +</span>\;\n				flood_fill(row\,<span style="color: #bbbbbb\;"> </span>col
 \,<span style="color: #bbbbbb\;"> </span>marker\,<span style="color: #bbbb
 bb\;"> </span>canvas)\;\n			}\n		}\n	}\n\n	<span style="color: #007020\;">
 return</span><span style="color: #bbbbbb\;"> </span>region_count\;\n}\n</p
 re>\n    </div>\n</div>\n<h2>Count Disjoint Regions on the Canvas</h2>\n<p
 >Now you will use functions implemented above to track the number of disjo
 int empty regions after drawing each line on the canvas.</p>\n<p>The <code
 >Lines</code> struct has two member variables: an integer indicating the n
 umber of lines and an integer pointer array of size 2 storing a sequence o
 f start positions and end positions. You will draw each line in the Lines 
 struct in the given order using the <code>draw_line</code> function implem
 ented in Part 1. After drawing each line\, you will call the <code>count_d
 isjoint_region_step</code> function to count the number of disjoint empty 
 regions. The region count will be stored in <code>counts</code> field of t
 he <code>Solution</code> struct.</p>\n<div class="pl-code">\n    <div clas
 s="mb-2 rounded" style="background: #f0f0f0\;">\n        <pre style="paddi
 ng: 0.5rem\; margin-bottom: 0px\; line-height: 125%\;"><span style="color:
  #007020\;">struct</span> <span style="color: #0e84b5\;">Lines</span><span
  style="color: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">    </
 span><span style="color: #902000\;">unsigned</span><span style="color: #bb
 bbbb\;"> </span><span style="color: #902000\;">int</span><span style="colo
 r: #bbbbbb\;"> </span>num_lines\;\n<span style="color: #bbbbbb\;">    </sp
 an><span style="color: #60a0b0\; font-style: italic\;">// An int* array of
  size 2\, where first element is an array of start pos</span>\n<span style
 ="color: #bbbbbb\;">    </span><span style="color: #60a0b0\; font-style: i
 talic\;">// and second element is an array of end pos for each line.</span
 >\n<span style="color: #bbbbbb\;">    </span><span style="color: #60a0b0\;
  font-style: italic\;">// start pos always has a smaller value than end po
 s.</span>\n<span style="color: #bbbbbb\;">    </span><span style="color: #
 902000\;">unsigned</span><span style="color: #bbbbbb\;"> </span><span styl
 e="color: #902000\;">int</span><span style="color: #666666\;">*</span><spa
 n style="color: #bbbbbb\;"> </span>coords[<span style="color: #40a070\;">2
 </span>]\;\n}\;\n\n<span style="color: #007020\;">struct</span> <span styl
 e="color: #0e84b5\;">Solution</span><span style="color: #bbbbbb\;"> </span
 >{\n<span style="color: #bbbbbb\;">    </span><span style="color: #902000\
 ;">unsigned</span><span style="color: #bbbbbb\;"> </span><span style="colo
 r: #902000\;">int</span><span style="color: #bbbbbb\;"> </span>length\;\n<
 span style="color: #bbbbbb\;">    </span><span style="color: #902000\;">in
 t</span><span style="color: #666666\;">*</span><span style="color: #bbbbbb
 \;"> </span>counts\;\n}\;\n\n<span style="color: #60a0b0\; font-style: ita
 lic\;">// Count the number of disjoint empty area after adding each line.<
 /span>\n<span style="color: #60a0b0\; font-style: italic\;">// Store the c
 ount values into the Solution struct. </span>\n<span style="color: #902000
 \;">void</span><span style="color: #bbbbbb\;"> </span><span style="color: 
 #06287e\;">count_disjoint_regions</span>(<span style="color: #007020\;">co
 nst</span><span style="color: #bbbbbb\;"> </span>Lines<span style="color: 
 #666666\;">*</span><span style="color: #bbbbbb\;"> </span>lines\,<span sty
 le="color: #bbbbbb\;"> </span>Canvas<span style="color: #666666\;">*</span
 ><span style="color: #bbbbbb\;"> </span>canvas\,\n<span style="color: #bbb
 bbb\;">                            </span>Solution<span style="color: #666
 666\;">*</span><span style="color: #bbbbbb\;"> </span>solution)<span style
 ="color: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">    </span><
 span style="color: #60a0b0\; font-style: italic\;">// Iterate through each
  step.</span>\n<span style="color: #bbbbbb\;">    </span><span style="colo
 r: #007020\;">for</span><span style="color: #bbbbbb\;"> </span>(<span styl
 e="color: #902000\;">unsigned</span><span style="color: #bbbbbb\;"> </span
 ><span style="color: #902000\;">int</span><span style="color: #bbbbbb\;"> 
 </span>i<span style="color: #bbbbbb\;"> </span><span style="color: #666666
 \;">=</span><span style="color: #bbbbbb\;"> </span><span style="color: #40
 a070\;">0</span>\;<span style="color: #bbbbbb\;"> </span>i<span style="col
 or: #bbbbbb\;"> </span><span style="color: #666666\;">&lt\;</span><span st
 yle="color: #bbbbbb\;"> </span>lines<span style="color: #666666\;">-&gt\;<
 /span>num_lines\;<span style="color: #bbbbbb\;"> </span>i<span style="colo
 r: #666666\;">++</span>)<span style="color: #bbbbbb\;"> </span>{\n<span st
 yle="color: #bbbbbb\;">        </span><span style="color: #902000\;">unsig
 ned</span><span style="color: #bbbbbb\;"> </span><span style="color: #9020
 00\;">int</span><span style="color: #bbbbbb\;"> </span>start_pos<span styl
 e="color: #bbbbbb\;"> </span><span style="color: #666666\;">=</span><span 
 style="color: #bbbbbb\;"> </span>lines<span style="color: #666666\;">-&gt\
 ;</span>coords[<span style="color: #40a070\;">0</span>][i]\;\n<span style=
 "color: #bbbbbb\;">        </span><span style="color: #902000\;">unsigned<
 /span><span style="color: #bbbbbb\;"> </span><span style="color: #902000\;
 ">int</span><span style="color: #bbbbbb\;"> </span>end_pos<span style="col
 or: #bbbbbb\;"> </span><span style="color: #666666\;">=</span><span style=
 "color: #bbbbbb\;"> </span>lines<span style="color: #666666\;">-&gt\;</spa
 n>coords[<span style="color: #40a070\;">1</span>][i]\;\n<span style="color
 : #bbbbbb\;">        </span><span style="color: #60a0b0\; font-style: ital
 ic\;">// Draw line on canvas.</span>\n<span style="color: #bbbbbb\;">     
    </span>draw_line(start_pos\,<span style="color: #bbbbbb\;"> </span>end_
 pos\,<span style="color: #bbbbbb\;"> </span>canvas)\;\n<span style="color:
  #bbbbbb\;">        </span><span style="color: #60a0b0\; font-style: itali
 c\;">// Run flood fill algorithm on the updated canvas.</span>\n<span styl
 e="color: #bbbbbb\;">        </span><span style="color: #60a0b0\; font-sty
 le: italic\;">// In each even iteration\, fill with marker 'A'\, otherwise
  use 'B'.</span>\n<span style="color: #bbbbbb\;">        </span><span styl
 e="color: #902000\;">unsigned</span><span style="color: #bbbbbb\;"> </span
 ><span style="color: #902000\;">int</span><span style="color: #bbbbbb\;"> 
 </span>count<span style="color: #bbbbbb\;"> </span><span style="color: #66
 6666\;">=</span>\n<span style="color: #bbbbbb\;">                </span>co
 unt_disjoint_regions_step(<span style="color: #4070a0\;">'A'</span><span s
 tyle="color: #bbbbbb\;"> </span><span style="color: #666666\;">+</span><sp
 an style="color: #bbbbbb\;"> </span>(i<span style="color: #bbbbbb\;"> </sp
 an><span style="color: #666666\;">%</span><span style="color: #bbbbbb\;"> 
 </span><span style="color: #40a070\;">2</span>)\,<span style="color: #bbbb
 bb\;"> </span>canvas)\;\n<span style="color: #bbbbbb\;">        </span><sp
 an style="color: #60a0b0\; font-style: italic\;">// Update the solution st
 ruct. Memory for counts is preallocated.</span>\n<span style="color: #bbbb
 bb\;">        </span>solution<span style="color: #666666\;">-&gt\;</span>c
 ounts[i]<span style="color: #bbbbbb\;"> </span><span style="color: #666666
 \;">=</span><span style="color: #bbbbbb\;"> </span>count\;\n<span style="c
 olor: #bbbbbb\;">    </span>}\n<span style="color: #bbbbbb\;">    </span>s
 olution<span style="color: #666666\;">-&gt\;</span>length<span style="colo
 r: #bbbbbb\;"> </span><span style="color: #666666\;">=</span><span style="
 color: #bbbbbb\;"> </span>lines<span style="color: #666666\;">-&gt\;</span
 >num_lines\;\n}\n</pre>\n    </div>\n</div>
END:VEVENT
BEGIN:VEVENT
SUMMARY:VISIT IKE / SDRP AT 6PM MARCH 7th FOR CONSIDERATION - IT WILL BE G
 RADED FOR ACCURACY DURING SPRING BREAK - 2 POINTS POSSIBLE [fshn_120_12022
 1_213078]
DTSTART:20220308T020000Z
DTEND:20220308T020000Z
DTSTAMP:20220309T153700Z
UID:event-assignment-438671
SEQUENCE:0
CLASS:PUBLIC
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_438671
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220308T170000Z
DTEND:20220308T220000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39919
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_39919
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:IN PERSON CLASS T/R POLLING QUESTIONS (NO AUDIO OR VIDEO) [fshn_12
 0_120221_213078]
DTSTART:20220308T180000Z
DTEND:20220308T200000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-40096
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:966 4014 0173] (https://illin
 ois.zoom.us/j/96640140173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_40096
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/966401
 40173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09" target="_blank">Click here to 
 join Zoom Meeting:966 4014 0173</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Attendance Quiz Tuesday 3/8 (FSHN 120 A Spring 2022 CRN32987) [fsh
 n_120_120221_213078]
DTSTART:20220308T195000Z
DTEND:20220308T195000Z
DTSTAMP:20220308T193400Z
UID:event-assignment-override-18431
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Today's extra credit attendance is worth 3 points due to getti
 ng through this week's class materials today and canceling in-person class
  on Thursday.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_439202
X-ALT-DESC;FMTTYPE=text/html:<p>Today's extra credit attendance is worth 3
  points due to getting through this week's class materials today and cance
 ling in-person class on Thursday.</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:15 Sundry (OPTIONAL) [cs_233_120221_213565]
DTSTART:20220309T140000Z
DTEND:20220309T180000Z
DTSTAMP:20220112T151400Z
UID:event-calendar-event-45272
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_45272
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220309T140000Z
DTEND:20220309T160000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50779
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50779
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220309T160000Z
DTEND:20220309T180000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50810
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50810
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220309T170000Z
DTEND:20220309T220000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-40071
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_40071
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:CS 222 Office Hours [cs_222_120221_214564]
DTSTART:20220309T200000Z
DTEND:20220309T210000Z
DTSTAMP:20220309T023600Z
UID:event-calendar-event-73468
SEQUENCE:0
CLASS:PUBLIC
LOCATION:Wednesday 3/9: 2 - 3 PM Harita Reddy. Zoom Link:  https://illi
 nois.zoom.us/j/85854483154?pwd=QnMyQjRWdFRzdTc5VC9yaExWVTdTUT09
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18658&mon
 th=03&year=2022#calendar_event_73468
END:VEVENT
BEGIN:VEVENT
SUMMARY:MODULE 7 MINI ASSIGNMENT - DUE 3PM CT FRIDAY MARCH 11TH [fshn_120_
 120221_213078]
DTSTART:20220311T210000Z
DTEND:20220311T210000Z
DTSTAMP:20220320T184700Z
UID:event-assignment-366757
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_366757
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:SEMESTER PROJECT "STEP" 7 [fshn_120_120221_213078]
DTSTART:20220311T210000Z
DTEND:20220311T210000Z
DTSTAMP:20220304T210000Z
UID:event-assignment-374591
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Fill out page 153 in the student notes packet and answer the q
 uestions below to the best of your ability.  Stop in the virtual tutoring
  center if you still have questions. We are here to help you!
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_374591
X-ALT-DESC;FMTTYPE=text/html:<p>Fill out page 153 in the student notes pac
 ket and answer the questions below to the best of your ability.&nbsp\; Sto
 p in the virtual tutoring center if you still have questions. We are here 
 to help you!</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 8 Part 1 [cs_233_120221_213565]
DTSTART:20220312T020000Z
DTEND:20220312T020000Z
DTSTAMP:20220112T032000Z
UID:event-assignment-367949
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:-------------------\nLearning Objectives\n-------------------\
 n\n* Understanding memory-mapped I/O in hardware\n\n* Understanding interr
 upt handling in hardware\n\n* Understanding the functioning of coprocessor
 \n\n-------------------------\nFiles that will be graded\n----------------
 ---------\n\n* timer.v (compile and run using make timer)\n\n-----------
 \nSuggestions\n-----------\n\n* Please read the entirety of the instructio
 ns carefully and make sure you understand the circuits before implementing
  them. It'll make your life a lot easier and also help you debug and test 
 your circuits.\n\n* Look over the provided Verilog files. You don't need t
 o understand the syntax used (since it's deliberately goofy)\, but you sho
 uld be aware of what modules we provide\, since you'll need to use some of
  them in your implementation. In particular\, we've provided flip flops an
 d registers with synchronous reset inputs\, which will be used in our impl
 ementation.\n\n* This lab is more limited in scope than Lab 5. In previous
  labs\, we've built up the full\, single-cycle datapath. To decrease compl
 exity for this lab (and future labs)\, we've limited the functionality of 
 the CPU to be similar to what you saw in the datapath modification quiz. R
 efer to Figures at the bottom of the instructions for the changes. Please 
 take some time to understand the differences between Lab 5's diagram and t
 his one (Lab 8's).\n\n------------\nInstructions\n------------\n\nEquality
  Circuit\n----------------\n\nFor our timer circuit\, we’ll need to comp
 are addresses against known values. We’ll use the following symbol to in
 dicate this\, where A and B can be any number of bits wide and eq is 1 if 
 A and B are equal. In Verilog\, you could simply write A == B.\n\n \n\n[S
 creen Shot 2021-10-04 at 10.34.18 AM.png] (https://canvas.illinois.edu/cou
 rses/18018/files/3110403/preview)\n\n---------------------------\nBuses an
 d tri-state buffers\n---------------------------\n\nAll external hardware 
 devices use the memory bus to communicate\, which means all devices need t
 o output to the data bus. So far\, we’ve been using muxes to select betw
 een multiple sources for the same output line\, but a more scalable (and r
 ealistic) solution is the tri-state buffer.\n\nA tri-state buffer has a da
 ta input d\, a control input c\, and an output o. If c is 1\, the input is
  passed to the output\, i.e.\, o = d. If c is 0\, however\, the output is 
 high impedance\, which is essentially equivalent to it being disconnected.
  You can think of a tri-state buffer as a switch\, where c = 0 means the s
 witch is off and c = 1 means the switch is on. In Verilog\, a high impedan
 ce value is represented as z\, or as a yellow line in gtkwave.\n\n \n\n[S
 creen Shot 2021-10-04 at 10.35.38 AM.png] (https://canvas.illinois.edu/cou
 rses/18018/files/3110404/preview)\n\nA high impedance wire can be connecte
 d to other wires without affecting them. Tri-state buffers therefore allow
  multiple outputs to be connected to the same bus directly. Only one tri-s
 tate should be enabled at a time\, and the output of the enabled tri-state
  becomes the output of the entire bus. For example\, here’s how to imple
 ment a 2-to-1 mux using tri-state buffers (and larger muxes are in fact us
 ually made from tri-state buffers):\n\n[Screen Shot 2021-10-04 at 10.36.13
  AM.png] (https://canvas.illinois.edu/courses/18018/files/3110405/preview)
 \n\n \n\nWe’ve provided a parametrized tri-state buffer in modules.v. W
 e’ve also modified our data memory such that when its read input is 0\, 
 its data output is high impedance (using a tri-state buffer). You’ll use
  this to connect the data memory and the timer device to the same data bus
 .\n\nThe timer circuit [30 points]\n-----------------------------\n\nThe t
 imer is a hardware device which allows the processor to read the number of
  clock cycles that have elapsed\, as well as request an interrupt at a cer
 tain cycle.\n\nAs with any hardware device\, the processor communicates wi
 th the timer using memory-mapped I/O. It can load from address 0xffff001c 
 to get the current number of cycles\, and it can store a value to this add
 ress to request an interrupt at that cycle. It can also store any value to
  address 0xffff006c to acknowledge the timer interrupt.\n\nHere’s what o
 ur timer circuit will look like:\n\n \n\n[Screen Shot 2021-10-04 at 10.37
 .09 AM.png] (https://canvas.illinois.edu/courses/18018/files/3110406/previ
 ew)\n\nIt takes as input the memory address and data\, and whether memory 
 is being read or written\, as well as the clock and reset signals. The cyc
 le output is the current cycle if the timer was being read\, otherwise hig
 h impedance. The TimerAddress output is 1 when the address is a timer memo
 ry-mapped I/O address (so that data memory reads and writes can be disable
 d). The TimerInterrupt output is 1 when a timer interrupt is being raised.
 \n\nThe cycle counter register keeps track of the number of cycles. The in
 terrupt cycle register stores which cycle to interrupt the processor on\, 
 and when the current cycle matches the interrupt cycle\, a timer interrupt
  is raised by enabling the interrupt line flip flop. The interrupt line st
 ays asserted until the interrupt is acknowledged or the machine is reset.\
 n\nMake sure you understand how this circuit works\, and then write the Ve
 rilog for it in timer.v. Your primary job is to implement the timer circui
 t as shown in the diagram. We’ve provided a basic test bench in timer_tb
 .v\, which you should augment with your own test cases. You can use make t
 imer to compile and run the test bench.\n\n[Screen Shot 2021-10-04 at 11.2
 0.43 AM.png] (https://canvas.illinois.edu/courses/18018/files/3110413/prev
 iew)\n\n[Screen Shot 2021-10-04 at 11.20.53 AM.png] (https://canvas.illino
 is.edu/courses/18018/files/3110414/preview)
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#assignment_367949
X-ALT-DESC;FMTTYPE=text/html:<h2>Learning Objectives</h2>\n<ol>\n    <li>U
 nderstanding memory-mapped I/O in hardware</li>\n    <li>Understanding int
 errupt handling in hardware</li>\n    <li>Understanding the functioning of
  coprocessor</li>\n</ol>\n<h2>Files that will be graded</h2>\n<ul>\n    <l
 i>\n<code>timer.v</code>&nbsp\;(compile and run using&nbsp\;<code>make tim
 er</code>)</li>\n</ul>\n<h2>Suggestions</h2>\n<ul>\n    <li>\n<strong>Plea
 se read the entirety of the instructions carefully and make sure you under
 stand the circuits before implementing them.</strong> It'll make your life
  a lot easier and also help you debug and test your circuits.</li>\n    <l
 i><strong>Look over the provided Verilog files.<strong> You don't need to 
 understand the syntax used (since it's deliberately goofy)\, but you shoul
 d be aware of what modules we provide\, since you'll need to use some of t
 hem in your implementation. In particular\, we've provided flip flops and 
 registers with <strong>synchronous</strong> reset inputs\, which will be u
 sed in our implementation.</strong></strong></li>\n    <li>\n<strong>This 
 lab is more limited in scope than Lab 5.</strong> In previous labs\, we've
  built up the full\, single-cycle datapath. To decrease complexity for thi
 s lab (and future labs)\, we've limited the functionality of the CPU to be
  similar to what you saw in the datapath modification quiz. Refer to Figur
 es at the bottom of the instructions for the changes. Please take some tim
 e to understand the differences between Lab 5's diagram and this one (Lab 
 8's).</li>\n</ul>\n<h2>Instructions</h2>\n<h3>Equality Circuit</h3>\n<p>Fo
 r our timer circuit\, we’ll need to compare addresses against known valu
 es. We’ll use the following symbol to indicate this\, where <code>A</cod
 e> and <code>B</code> can be any number of bits wide and <code>eq</code> i
 s 1 if <code>A</code> and <code>B</code> are equal. In Verilog\, you could
  simply write A == B.</p>\n<p>&nbsp\;</p>\n<p><img src="https://canvas.ill
 inois.edu/courses/18018/files/3110403/preview" alt="Screen Shot 2021-10-04
  at 10.34.18 AM.png" width="339" height="372" data-api-endpoint="https://c
 anvas.illinois.edu/api/v1/courses/18018/files/3110403" data-api-returntype
 ="File"></p>\n<h2>Buses and tri-state buffers</h2>\n<p>All external hardwa
 re devices use the memory bus to communicate\, which means all devices nee
 d to output to the data bus. So far\, we’ve been using muxes to select b
 etween multiple sources for the same output line\, but a more scalable (an
 d realistic) solution is the <i>tri-state buffer</i>.</p>\n<p>A tri-state 
 buffer has a data input <code>d</code>\, a control input <code>c</code>\, 
 and an output <code>o</code>. If <code>c</code> is 1\, the input is passed
  to the output\, <i>i.e.\,</i> <code>o = d</code>. If <code>c</code> is 0\
 , however\, the output is <i>high impedance</i>\, which is essentially equ
 ivalent to it being disconnected. You can think of a tri-state buffer as a
  switch\, where <code>c = 0</code> means the switch is off and <code>c = 1
 </code> means the switch is on. In Verilog\, a high impedance value is rep
 resented as z\, or as a yellow line in gtkwave.</p>\n<p>&nbsp\;</p>\n<p><i
 mg src="https://canvas.illinois.edu/courses/18018/files/3110404/preview" a
 lt="Screen Shot 2021-10-04 at 10.35.38 AM.png" width="587" height="224" da
 ta-api-endpoint="https://canvas.illinois.edu/api/v1/courses/18018/files/31
 10404" data-api-returntype="File"></p>\n<p>A high impedance wire can be co
 nnected to other wires without affecting them. Tri-state buffers therefore
  allow multiple outputs to be connected to the same bus directly. Only one
  tri-state should be enabled at a time\, and the output of the enabled tri
 -state becomes the output of the entire bus. For example\, here’s how to
  implement a 2-to-1 mux using tri-state buffers (and larger muxes are in f
 act usually made from tri-state buffers):</p>\n<p><img src="https://canvas
 .illinois.edu/courses/18018/files/3110405/preview" alt="Screen Shot 2021-1
 0-04 at 10.36.13 AM.png" width="492" height="325" data-api-endpoint="https
 ://canvas.illinois.edu/api/v1/courses/18018/files/3110405" data-api-return
 type="File"></p>\n<p>&nbsp\;</p>\n<p>We’ve provided a parametrized tri-s
 tate buffer in <code>modules.v</code>. We’ve also modified our data memo
 ry such that when its read input is 0\, its data output is high impedance 
 (using a tri-state buffer). You’ll use this to connect the data memory a
 nd the timer device to the same data bus.</p>\n<h3>The timer circuit [30 p
 oints]</h3>\n<p>The <code>timer</code> is a hardware device which allows t
 he processor to read the number of clock cycles that have elapsed\, as wel
 l as request an interrupt at a certain cycle.</p>\n<p>As with any hardware
  device\, the processor communicates with the timer using memory-mapped I/
 O. It can load from address <code>0xffff001c</code> to get the current num
 ber of cycles\, and it can store a value to this address to request an int
 errupt at that cycle. It can also store any value to address <code>0xffff0
 06c</code> to acknowledge the timer interrupt.</p>\n<p>Here’s what our t
 imer circuit will look like:</p>\n<p>&nbsp\;</p>\n<p><img src="https://can
 vas.illinois.edu/courses/18018/files/3110406/preview" alt="Screen Shot 202
 1-10-04 at 10.37.09 AM.png" data-api-endpoint="https://canvas.illinois.edu
 /api/v1/courses/18018/files/3110406" data-api-returntype="File"></p>\n<p>I
 t takes as input the memory address and data\, and whether memory is being
  read or written\, as well as the clock and reset signals. The <code>cycle
 </code> output is the current cycle if the timer was being read\, otherwis
 e high impedance. The <code>TimerAddress</code> output is 1 when the addre
 ss is a timer memory-mapped I/O address (so that data memory reads and wri
 tes can be disabled). The <code>TimerInterrupt</code> output is 1 when a t
 imer interrupt is being raised.</p>\n<p>The cycle counter register keeps t
 rack of the number of cycles. The interrupt cycle register stores which cy
 cle to interrupt the processor on\, and when the current cycle matches the
  interrupt cycle\, a timer interrupt is raised by enabling the interrupt l
 ine flip flop. The interrupt line stays asserted until the interrupt is ac
 knowledged or the machine is reset.</p>\n<p>Make sure you understand how t
 his circuit works\, and then write the Verilog for it in <code>timer.v</co
 de>. <strong>Your primary job is to implement the timer circuit as shown i
 n the diagram. </strong>We’ve provided a basic test bench in <code>timer
 _tb.v</code>\, which you should augment with your own test cases. You can 
 use <code>make timer</code> to compile and run the test bench.</p>\n<p><im
 g id="2322035" src="https://canvas.illinois.edu/courses/18018/files/311041
 3/preview" alt="Screen Shot 2021-10-04 at 11.20.43 AM.png" data-api-endpoi
 nt="https://canvas.illinois.edu/api/v1/courses/18018/files/3110413" data-a
 pi-returntype="File"></p>\n<p><img id="2322074" src="https://canvas.illino
 is.edu/courses/18018/files/3110414/preview" alt="Screen Shot 2021-10-04 at
  11.20.53 AM.png" data-api-endpoint="https://canvas.illinois.edu/api/v1/co
 urses/18018/files/3110414" data-api-returntype="File"></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Quiz 7 [cs_233_120221_213565]
DTSTART:20220312T045900Z
DTEND:20220312T045900Z
DTSTAMP:20220217T151300Z
UID:event-assignment-367969
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:-----------\nQuiz Format\n-----------\n\nThis quiz has some re
 view questions from earlier in the semester. You can expect the following 
 format for the quiz\n\n* 1 question about delay in circuits\n\n* 1 questio
 n about register file timing diagrams\n\n* 1 question structs in memory\n\
 n* 1 question about cause and status registers\n\n* 1 question about laten
 cy of the datapath\n\n* 1 question about algorithm performance\n\n* 1 exte
 nded MIPS assembly programming question focused on your ability to write f
 unctions with appropriate calling conventions. Basically\, anything short 
 of recursion is fair game\n\nAll questions\, except the MIPS programming q
 uestion\, either provide solution videos\, text solutions\, or enough feed
 back to prepare you for the quiz.\n\nImportant Reminders for MIPS assembly
  programming\n-------------------------------------------------\n\n* If yo
 ur function calls another function\, you NEED to allocate stack and save $
 ra on the stack\n\n* If your function calls another function\, think about
  what data you need after the function call. Make sure you save that data 
 using either $s registers or by saving it on the stack.\n\n* You can call 
 another function using jal <function name in C>\, replace <function name i
 n C> with the actual name of the function. You may assume that the other f
 unction follows calling conventions (i.e.\, it will overwrite the contents
  of your $a\, $t\, and $v registers and maintain the contents of your $s r
 egisters.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#assignment_367969
X-ALT-DESC;FMTTYPE=text/html:<h2>Quiz Format</h2>\n<p>This quiz has some r
 eview questions from earlier in the semester. You can expect the following
  format for the quiz</p>\n<ul>\n<li>1 question about delay in circuits</li
 >\n<li>1 question about register file timing diagrams</li>\n<li>1 question
  structs in memory</li>\n<li>1 question about cause and status registers</
 li>\n<li>1 question about latency of the datapath</li>\n<li>1 question abo
 ut algorithm performance</li>\n<li>1 extended <span>MIPS assembly programm
 ing question focused on your ability to write functions with appropriate c
 alling conventions. Basically\, anything short of recursion is fair game</
 span></li>\n</ul>\n<p>All questions\, except the MIPS programming question
 \, either provide solution videos\, text solutions\, or enough feedback to
  prepare you for the quiz.</p>\n<h3>Important Reminders for MIPS assembly 
 programming</h3>\n<ul>\n<li>If your function calls another function\, you 
 NEED to allocate stack and save <code>$ra</code> on the stack</li>\n<li>If
  your function calls another function\, think about what data you need aft
 er the function call. Make sure you save that data using either <code>$s</
 code> registers or by saving it on the stack.</li>\n<li>You can call anoth
 er function using <code>jal &lt\;function name in C&gt\;</code>\, replace 
 &lt\;function name in C&gt\; with the actual name of the function. You may
  assume that the other function follows calling conventions (i.e.\, it wil
 l overwrite the contents of your <code>$a</code>\, <code>$t</code>\, and <
 code>$v</code> registers and maintain the contents of your <code>$s</code>
  registers.</li>\n</ul>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Weekly Review 3 [cs_222_120221_214564]
DTSTART;VALUE=DATE:20220311T000000
DTEND;VALUE=DATE:20220311T000000
DTSTAMP:20220311T212800Z
UID:event-assignment-383687
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Provide a short (2-3 sentence) description of the work you com
 pleted in the last week. The remaining fields in the rubric will be scored
  by your mentor.\n\n \n\nTo ensure a fair grade\, your score will be dete
 rmined as follows:\n\nPenaliser = (Participation + Explanation of Effort)/
 5.0\nStudent’s Total Score = Participation + Explanation of Effort\n  
               + Penaliser*(Collaboration + Software Engineering Bes
 t Practices)
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18658&mon
 th=03&year=2022#assignment_383687
X-ALT-DESC;FMTTYPE=text/html:<p>Provide a short (2-3 sentence) description
  of the work you completed in the last week. The remaining fields in the r
 ubric will be scored by your mentor.</p>\n<p>&nbsp\;</p>\n<p>To ensure a f
 air grade\, your score will be determined as follows:</p>\n<p>Penaliser = 
 (Participation + Explanation of Effort)/5.0<br>Student’s Total Score = P
 articipation + Explanation of Effort<br>&nbsp\; &nbsp\; &nbsp\; &nbsp\; &n
 bsp\; &nbsp\; &nbsp\; &nbsp\; + Penaliser*(Collaboration + Software Engine
 ering Best Practices)</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220314T130000Z
DTEND:20220314T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50780
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50780
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220314T150000Z
DTEND:20220314T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50811
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50811
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:PRE-EXAM 1 REFLECTION [fshn_120_120221_213078]
DTSTART:20220314T200000Z
DTEND:20220314T200000Z
DTSTAMP:20220309T170700Z
UID:event-assignment-366764
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:***ONLY THE LAST/FINAL TEXT ENTRY SUBMISSIONS PRIOR TO THE DEA
 DLINE WILL BE GRADED***\n\nattached files such as PDF cannot be accepted a
 t this time\n\nTo help you apply what you have learned to your everyday li
 fe\, students will be reflecting on topics covered while submitting a comp
 rehensive (500+ word) reflection using the assignment submission link.  Y
 ou can type your reflection using another software package\, and then copy
 /paste your thoughts to check the number of words you have at  https://ww
 w.countofwords.com/ . \n\nAs noted in the student notes packet\, student
 s can earn an extra credit point by placing a (1) at the location where th
 ey discuss one of the principles of a healthy diet. If you clearly note wh
 ere all of the 8 talking points are located in the paper you can earn 2 po
 ints of extra credit!  \n\nCreate a fun reflection on how the materials 
 apply to your life in a meaningful way or write a creative story including
  the following in your submission:\n\n* Discuss at least one of the 5 prin
 ciples/characteristics of a healthy diet.\n\n* Touch on 1+ type of malnutr
 ition and include the definition of malnutrition in your submission.\n\n* 
 Reflect on why people choose to eat certain foods including a reference to
  learning\, sensory data\, sociocultural cues\, conditioned taste aversion
 \, or emotions.  Include 1+ of the terms.\n\n* Compare appetite to hunger
 .  Define the terms in your own words while using one or both in your sub
 mission. \n\n* Touch on a nutrient content claim or a health claim you fo
 und on a label and share if it influenced your decision to consume the foo
 d. \n\n* Walk through the digestion of a foodstuff from mouth to anus (in
 clude at least one enzyme and peristalsis in your response)\n\n* Talk abou
 t a possible digestive problem that you or someone you know has experience
 d (ex: GERD\, hemorrhoids\, constipation\, lactose maldigestion\, Crohn’
 s disease\, etc.)\n\n* Reflect on sources of reliable or unreliable nutrit
 ion information you have encountered. \n\nPre-exam Journal Reflection gra
 ding criteria:\n\n* All work should be uniquely yours (we are checking wor
 k using a plagiarism check and full consideration will only be granted to 
 those with a plagiarism report less than 30%)\n\n* You should copy and pas
 te your reflection into the text box provided\n\n* All numbered items abov
 e should be covered to earn full  points\n\n* Definitions and terms shoul
 d be correct in their descriptions and applications\n\n* The story or refl
 ection should compel the reader\, flow nicely\, and allow for reader enjoy
 ment\n\n* The word count should be above 500 words  (include a word coun
 t)\n\n* Proper spelling and grammar should be used\n\n* Only one submissio
 n will be considered for grading. If you accidentally submitted work that 
 you wish to retract\, prior to the deadline you will need to stop by the T
 utoring Center to have it reset\n\nIMPORTANT: It is important to note tha
 t exam 1 will cover select topics highlighted above.  However\, there are
  many concepts that will surface on the exam that are not outlined in the 
 above reflection guidelines (ex: calculations\, basic biology/nutrition\, 
 myths/misconceptions in nutrition\, a comparison of the nutrients\, etc.).
   It is best practice to use all files in the exam study folder for exam 
 preparation.\n\nFOR AN EXAMPLE SUBMISSION FROM THE PRE-EXAM REFLECTION #1 
 VISIT: to hear an example pre-exam submission being read and to see awesom
 e puppy pics visit  [https://www.youtube.com/watch?v=CCNADcVjhyM ] (ht
 tps://www.youtube.com/watch?v=CCNADcVjhyM)  
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_366764
X-ALT-DESC;FMTTYPE=text/html:<div>\n<p style="text-align: center\; backgro
 und: #D9D9D9\; border: none\; padding: 0in\;"><strong><span style="font-si
 ze: 16.0pt\; line-height: 107%\;">***ONLY THE LAST/FINAL TEXT ENTRY SUBMIS
 SIONS PRIOR TO THE DEADLINE WILL BE GRADED***</span></strong></p>\n<p styl
 e="text-align: center\; background: #D9D9D9\; border: none\; padding: 0in\
 ;"><span style="font-size: 21.3333px\;"><strong>attached files such as PDF
  cannot be accepted at this time</strong></span></p>\n</div>\n<p><span>To 
 help you apply what you have learned to your everyday life\, students will
  be reflecting on topics covered while submitting a comprehensive (500+ wo
 rd) reflection using the assignment submission link.&nbsp\; You can type y
 our reflection using another software package\, and then copy/paste your t
 houghts to check the number of words you have at&nbsp\; </span><a href="ht
 tps://www.countofwords.com/" target="_blank">https://www.countofwords.com/
 </a><span>&nbsp\;.&nbsp\;</span></p>\n<p>As noted in the student notes pac
 ket\, students can earn an extra credit point by placing a (1) at the loca
 tion where they discuss one of the principles of a healthy diet. <strong>I
 f you clearly note where all of the 8 talking points are located in the pa
 per you can earn 2 points of extra credit!&nbsp\;&nbsp\;</strong></p>\n<di
 v><hr></div>\n<p><strong><span>Create a fun reflection on how the material
 s apply to your life in a meaningful way or write a creative story includi
 ng the following in your submission:</span></strong></p>\n<ol>\n<li>Discus
 s at least one of the 5 principles/characteristics of a healthy diet.</li>
 \n<li>Touch on 1+ type of malnutrition and include the definition of malnu
 trition in your submission.</li>\n<li>Reflect on why people choose to eat 
 certain foods including a reference to learning\, sensory data\, sociocult
 ural cues\, conditioned taste aversion\, or emotions.&nbsp\; Include 1+ of
  the terms.</li>\n<li>Compare appetite to hunger.&nbsp\; Define the terms 
 in your own words while using one or both in your submission.&nbsp\;</li>\
 n<li>Touch on a nutrient content claim or a health claim you found on a la
 bel and share if it influenced your decision to consume the food.&nbsp\;</
 li>\n<li>Walk through the digestion of a foodstuff from mouth to anus (inc
 lude at least one enzyme and peristalsis in your response)</li>\n<li>Talk 
 about a possible digestive problem that you or someone you know has experi
 enced (ex: GERD\, hemorrhoids\, constipation\, lactose maldigestion\, Croh
 n’s disease\, etc.)</li>\n<li>Reflect on sources of reliable or unreliab
 le nutrition information you have encountered.&nbsp\;</li>\n</ol>\n<div><h
 r></div>\n<p><strong>Pre-exam Journal Reflection grading criteria:</strong
 ></p>\n<ul>\n<li>All work should be uniquely yours (<span style="backgroun
 d-color: #fbeeb8\;">we are checking work using a plagiarism check and full
  consideration will only be granted to those with a plagiarism report less
  than 30%)</span></li>\n<li>You should copy and paste your reflection into
  the text box provided</li>\n<li>All numbered items above should be covere
 d to earn full&nbsp\; points</li>\n<li>Definitions and terms should be cor
 rect in their descriptions and applications</li>\n<li>The story or reflect
 ion should compel the reader\, flow nicely\, and allow for reader enjoymen
 t</li>\n<li>The word count should be above 500 words<span>&nbsp\;</span><s
 pan>&nbsp\;(include a word count)</span></li>\n<li>Proper spelling and gra
 mmar should be used</li>\n<li>Only one submission will be considered for g
 rading. If you accidentally submitted work that you wish to retract\, prio
 r to the deadline you will need to stop by the Tutoring Center to have it 
 reset</li>\n</ul>\n<div>\n<p><span>IMPORTANT:</span><span>&nbsp\;</span>It
  is important to note that exam 1 will cover select topics highlighted abo
 ve.&nbsp\; However\, there are many concepts that will surface on the exam
  that are not outlined in the above reflection guidelines (ex: calculation
 s\, basic biology/nutrition\, myths/misconceptions in nutrition\, a compar
 ison of the nutrients\, etc.).&nbsp\; It is best practice to use all files
  in the exam study folder for exam preparation.</p>\nFOR AN EXAMPLE SUBMIS
 SION FROM THE PRE-EXAM REFLECTION #1 VISIT: to hear an example pre-exam su
 bmission being read and to see awesome puppy pics&nbsp\;visit&nbsp\;<span>
 &nbsp\;</span><a href="https://www.youtube.com/watch?v=CCNADcVjhyM" target
 ="_blank">https://www.youtube.com/watch?v=CCNADcVjhyM&nbsp\;</a> &nbsp\;</
 div>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220316T130000Z
DTEND:20220316T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50781
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50781
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220316T150000Z
DTEND:20220316T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50812
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50812
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220317T160000Z
DTEND:20220317T210000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-40004
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_40004
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:IN PERSON CLASS T/R POLLING QUESTIONS (NO AUDIO OR VIDEO) [fshn_12
 0_120221_213078]
DTSTART:20220317T170000Z
DTEND:20220317T190000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-40087
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:966 4014 0173] (https://illin
 ois.zoom.us/j/96640140173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_40087
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/966401
 40173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09" target="_blank">Click here to 
 join Zoom Meeting:966 4014 0173</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220318T160000Z
DTEND:20220318T210000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39875
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_39875
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:16 Pipelining and Forwarding [cs_233_120221_213565]
DTSTART:20220321T130000Z
DTEND:20220321T170000Z
DTSTAMP:20220112T151400Z
UID:event-calendar-event-45289
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_45289
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220321T130000Z
DTEND:20220321T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50782
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50782
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220321T150000Z
DTEND:20220321T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50813
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50813
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220321T160000Z
DTEND:20220321T210000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39928
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_39928
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:PRE-EXAM 2 REFLECTION [fshn_120_120221_213078]
DTSTART:20220321T200000Z
DTEND:20220321T200000Z
DTSTAMP:20220321T050400Z
UID:event-assignment-366765
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Pre-Exam Journal Reflection Paper #2\n\n***ONLY THE LAST/FINAL
  TEXT ENTRY SUBMISSIONS PRIOR TO THE DEADLINE WILL BE GRADED***\n\nattache
 d files such as PDF cannot be accepted at this time\n\nTo help you apply w
 hat you have learned to your everyday life\, students will be reflecting o
 n topics covered while submitting a comprehensive (500+ word) reflection i
 n the assignment drop box.  You can type your reflection using another so
 ftware package\, and then copy/paste your thoughts to check the number of 
 words you have at  https://www.countofwords.com/ . We have updated the
  requirements to allow you to earn extra credit!!!\n\nEXTRA CREDIT: Studen
 ts are expected to use a (1) at the location where they incorporate the de
 finition of carbohydrate and why we should include them in our diet for he
 alth.  This notation will allow you/students as well as graders to clearl
 y check if they have covered the concepts.  If you clearly note where all
  of the 9 talking points are located in the paper\, you can earn 2 points 
 of extra credit!!!  :-)  \n\nCreate a fun reflection or write a creativ
 e story including the following talking points in your submission:\n\n* De
 fine carbohydrates and share "why we should consider consuming them" for b
 est health and well-being\n\n* Discuss blood glucose levels in the body an
 d how they are regulated\n\n* Share about high fiber foods individuals can
  consume \n\n* Define lipids and share "why we need to consume essential 
 fatty acids" for health and well-being\n\n* Compare fats and oils with spe
 cific food examples\n\n* Discuss the benefits of fats in the food as well 
 as in the body\n\n* Define what is meant by a protein\n\n* Compare and con
 trast complete and incomplete protein sources\n\n* Talk about different di
 etary patterns that are extreme.  Examples could include (but are not lim
 ited to) diets such as carbohydrate free diets\, ketogentic diets\, and/or
  fruititarian diets.  \n\nPre-exam Journal Reflection grading criteria:\
 n\n* The story or reflection should compel the reader\, flow nicely\, and 
 allow for reader enjoyment (-5 if it is not a story or it does not flow)\n
 \n* Plagiarism report less than 30% for full consideration (please\, revie
 w the report after it is generated following your submission)\n\n* The wor
 d count should be above 500 words\n\n* All talking points listed above sho
 uld be covered  (-2 for each missing talking point)\n\n* Definitions and 
 terms should be correct in their descriptions and applications \n\n* Prop
 er spelling and grammar should be used\n\n* The submission should be uploa
 ded/attached within Canvas as one of the following formats (links to outsi
 de locations are not accepted): pdf\, doc\, docx\, and txt\n\n* Only one s
 ubmission will be considered for grading. If you accidentally submitted wo
 rk that you wish to retract\, prior to the deadline you will need to stop 
 by the Tutoring Center at a time when a senior teaching team member can re
 set your submission. http://publish.illinois.edu/nutrition-fshn120/files/2
 021/09/FSHN-120-Fall-2021-Tutoring-Center-Schedule-Team-Info.pdf \n\nFOR 
 AN EXAMPLE SUBMISSION FROM THE PRE-EXAM REFLECTION #1 VISIT: [https://www
 .youtube.com/watch?v=CCNADcVjhyM ] (https://www.youtube.com/watch?v=CCNAD
 cVjhyM) or review the written work at [Example of Good Quality FSHN 120 Re
 flection.pdf] (https://canvas.illinois.edu/courses/17719/files/3105955?wra
 p=1) \n\nIMPORTANT: It is important to note that exam 2 will cover select
  talking points listed above.  However\, there are many concepts that wil
 l surface on the exam that are not outlined in the above reflection guidel
 ines.  It is best practice to use all files in the exam study folder for 
 exam preparation.\n\n 
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_366765
X-ALT-DESC;FMTTYPE=text/html:<div style="border: solid windowtext 1.0pt\; 
 padding: 1.0pt 4.0pt 1.0pt 4.0pt\; background: #D9D9D9\;">\n<p style="text
 -align: center\; background: #D9D9D9\; border: none\; padding: 0in\;"><str
 ong><span style="font-size: 16.0pt\; line-height: 107%\;">Pre-Exam Journal
  Reflection Paper #2</span></strong></p>\n<p style="text-align: center\; b
 ackground: #D9D9D9\; border: none\; padding: 0in\;"><strong><span style="f
 ont-size: 16.0pt\; line-height: 107%\;">***ONLY THE LAST/FINAL TEXT ENTRY 
 SUBMISSIONS PRIOR TO THE DEADLINE WILL BE GRADED***</span></strong></p>\n<
 p style="text-align: center\; background: #D9D9D9\; border: none\; padding
 : 0in\;"><span style="font-size: 21.3333px\;"><strong>attached files such 
 as PDF cannot be accepted at this time</strong></span></p>\n</div>\n<p sty
 le="margin: 0px 0px 1em\; padding: 0px\; border: 0px\; font-style: normal\
 ; font-family: 'Helvetica Neue'\, Helvetica\, Arial\, sans-serif\; font-si
 ze: small\; color: #000000\; text-align: start\; text-indent: 0px\; white-
 space: normal\;">To help you apply what you have learned to your everyday 
 life\, students will be reflecting on topics covered while submitting a co
 mprehensive (500+ word) reflection in the assignment drop box.&nbsp\; You 
 can type your reflection using another software package\, and then copy/pa
 ste your thoughts to check the number of words you have at&nbsp\;<span>&nb
 sp\;</span><a href="https://www.countofwords.com/" target="_blank">https:/
 /www.countofwords.com/</a>&nbsp\;.&nbsp\;<span style="font-family: 'Helvet
 ica Neue'\, Helvetica\, Arial\, sans-serif\; font-size: small\; font-style
 : normal\;">We have updated the requirements to allow you to earn extra cr
 edit!!!</span></p>\n<p style="margin: 0px 0px 1em\; padding: 0px\; border:
  0px\; font-style: normal\; font-family: 'Helvetica Neue'\, Helvetica\, Ar
 ial\, sans-serif\; font-size: small\; color: #000000\; text-align: start\;
  text-indent: 0px\; white-space: normal\;"><span style="font-family: 'Helv
 etica Neue'\, Helvetica\, Arial\, sans-serif\; font-size: small\; font-sty
 le: normal\; background-color: #fbeeb8\;">EXTRA CREDIT: Students are expec
 ted to use a (1) at the location where they incorporate the definition of 
 carbohydrate and why we should include them in our diet for health.&nbsp\;
  This notation will allow you/students as well as graders to clearly check
  if they have covered the concepts.&nbsp\; If you clearly note where all o
 f the 9 talking points are located in the paper\, you can earn 2 points of
  extra credit!!!&nbsp\; :-)&nbsp\;&nbsp\;</span></p>\n<div style="text-ali
 gn: center\;"><hr style="cursor: default\;"></div>\n<p style="margin: 0px 
 0px 1em\; padding: 0px\; border: 0px\; font-style: normal\; font-family: '
 Helvetica Neue'\, Helvetica\, Arial\, sans-serif\; font-size: small\; colo
 r: #000000\; text-align: start\; text-indent: 0px\; white-space: normal\;"
 ><strong><span style="text-decoration: underline\;">Create a fun reflectio
 n or write a creative story including the following talking points in your
  submission:</span></strong></p>\n<ol style="margin: 1em 0px\; padding: 0p
 x 0px 0px 40px\; border: 0px\; font-style: normal\; font-family: 'Helvetic
 a Neue'\, Helvetica\, Arial\, sans-serif\; font-size: small\; list-style: 
 decimal\; color: #000000\; text-align: start\; text-indent: 0px\; white-sp
 ace: normal\;">\n<li style="margin: 0px\; padding: 0px\; border: 0px\; fon
 t-style: inherit\; font-family: inherit\; font-size: 13px\; display: list-
 item\; list-style-position: outside\; list-style-type: inherit\;">Define c
 arbohydrates and share "why we should consider consuming them" for best he
 alth and well-being</li>\n<li style="margin: 0px\; padding: 0px\; border: 
 0px\; font-style: inherit\; font-family: inherit\; font-size: 13px\; displ
 ay: list-item\; list-style-position: outside\; list-style-type: inherit\;"
 >Discuss blood glucose levels in the body and how they are regulated</li>\
 n<li style="margin: 0px\; padding: 0px\; border: 0px\; font-style: inherit
 \; font-family: inherit\; font-size: 13px\; display: list-item\; list-styl
 e-position: outside\; list-style-type: inherit\;">Share about high fiber f
 oods individuals can consume&nbsp\;</li>\n<li style="margin: 0px\; padding
 : 0px\; border: 0px\; font-style: inherit\; font-family: inherit\; font-si
 ze: 13px\; display: list-item\; list-style-position: outside\; list-style-
 type: inherit\;">Define lipids and share "why we need to consume essential
  fatty acids" for health and well-being</li>\n<li style="margin: 0px\; pad
 ding: 0px\; border: 0px\; font-style: inherit\; font-family: inherit\; fon
 t-size: 13px\; display: list-item\; list-style-position: outside\; list-st
 yle-type: inherit\;">Compare fats and oils with specific food examples</li
 >\n<li style="margin: 0px\; padding: 0px\; border: 0px\; font-style: inher
 it\; font-family: inherit\; font-size: 13px\; display: list-item\; list-st
 yle-position: outside\; list-style-type: inherit\;">Discuss the benefits o
 f fats in the food as well as in the body</li>\n<li style="margin: 0px\; p
 adding: 0px\; border: 0px\; font-style: inherit\; font-family: inherit\; f
 ont-size: 13px\; display: list-item\; list-style-position: outside\; list-
 style-type: inherit\;">Define what is meant by a protein</li>\n<li style="
 margin: 0px\; padding: 0px\; border: 0px\; font-style: inherit\; font-fami
 ly: inherit\; font-size: 13px\; display: list-item\; list-style-position: 
 outside\; list-style-type: inherit\;">Compare and contrast complete and in
 complete protein sources</li>\n<li style="margin: 0px\; padding: 0px\; bor
 der: 0px\; font-style: inherit\; font-family: inherit\; font-size: 13px\; 
 display: list-item\; list-style-position: outside\; list-style-type: inher
 it\;">Talk about different dietary patterns that are extreme.&nbsp\; Examp
 les could include (but are not limited to) diets such as carbohydrate free
  diets\, ketogentic diets\, and/or fruititarian diets.&nbsp\;&nbsp\;</li>\
 n</ol>\n<div style="text-align: center\;"><hr style="cursor: default\;"></
 div>\n<p style="margin: 0px 0px 1em\; padding: 0px\; border: 0px\; font-st
 yle: normal\; font-family: 'Helvetica Neue'\, Helvetica\, Arial\, sans-ser
 if\; font-size: small\; color: #000000\; text-align: start\; text-indent: 
 0px\; white-space: normal\;"><strong>Pre-exam Journal Reflection grading c
 riteria:</strong></p>\n<ul style="margin: 1em 0px\; padding: 0px 0px 0px 4
 0px\; border: 0px\; font-style: normal\; font-family: 'Helvetica Neue'\, H
 elvetica\, Arial\, sans-serif\; font-size: small\; list-style: disc\; colo
 r: #000000\; text-align: start\; text-indent: 0px\; white-space: normal\;"
 >\n<li>The story or reflection should compel the reader\, flow nicely\, an
 d allow for reader enjoyment (-5 if it is not a story or it does not flow)
 </li>\n<li><span style="background-color: #fbeeb8\;">Plagiarism report les
 s than 30% for full consideration (please\, review the report after it is 
 generated following your submission)</span></li>\n<li>The word count shoul
 d be above 500 words</li>\n<li style="margin: 0px\; padding: 0px\; border:
  0px\; font-style: inherit\; font-family: inherit\; font-size: 13px\; disp
 lay: list-item\; list-style-position: outside\; list-style-type: inherit\;
 ">All talking points listed above should be covered&nbsp\; (-2 for each mi
 ssing talking point)</li>\n<li style="margin: 0px\; padding: 0px\; border:
  0px\; font-style: inherit\; font-family: inherit\; font-size: 13px\; disp
 lay: list-item\; list-style-position: outside\; list-style-type: inherit\;
 ">Definitions and terms should be correct in their descriptions and applic
 ations&nbsp\;</li>\n<li style="margin: 0px\; padding: 0px\; border: 0px\; 
 font-style: inherit\; font-family: inherit\; font-size: 13px\; display: li
 st-item\; list-style-position: outside\; list-style-type: inherit\;">Prope
 r spelling and grammar should be used</li>\n<li style="margin: 0px\; paddi
 ng: 0px\; border: 0px\; font-style: inherit\; font-family: inherit\; font-
 size: 13px\; display: list-item\; list-style-position: outside\; list-styl
 e-type: inherit\;">The submission should be uploaded/attached within Canva
 s as one of the following formats (links to outside locations are not acce
 pted): <span>pdf\, doc\, docx\, and txt</span></li>\n<li style="margin: 0p
 x\; padding: 0px\; border: 0px\; font-style: inherit\; font-family: inheri
 t\; font-size: 13px\; display: list-item\; list-style-position: outside\; 
 list-style-type: inherit\;">Only one submission will be considered for gra
 ding. If you accidentally submitted work that you wish to retract\, prior 
 to the deadline you will need to stop by the Tutoring Center at a time whe
 n a senior teaching team member can reset your submission. <a href="http:/
 /publish.illinois.edu/nutrition-fshn120/files/2021/09/FSHN-120-Fall-2021-T
 utoring-Center-Schedule-Team-Info.pdf" target="_blank">http://publish.illi
 nois.edu/nutrition-fshn120/files/2021/09/FSHN-120-Fall-2021-Tutoring-Cente
 r-Schedule-Team-Info.pdf</a>&nbsp\;</li>\n</ul>\n<p>FOR AN EXAMPLE SUBMISS
 ION FROM THE PRE-EXAM REFLECTION #1 VISIT:&nbsp\;<a href="https://www.yout
 ube.com/watch?v=CCNADcVjhyM" target="_blank">https://www.youtube.com/watch
 ?v=CCNADcVjhyM&nbsp\;</a> or review the written work at <a class="instruct
 ure_file_link instructure_scribd_file inline_disabled" title="Example of G
 ood Quality FSHN 120 Reflection.pdf" href="https://canvas.illinois.edu/cou
 rses/17719/files/3105955?wrap=1" target="_blank" data-canvas-previewable="
 false" data-api-endpoint="https://canvas.illinois.edu/api/v1/courses/17719
 /files/3105955" data-api-returntype="File">Example of Good Quality FSHN 12
 0 Reflection.pdf</a>&nbsp\;</p>\n<div style="border: solid windowtext 1.0p
 t\; padding: 1.0pt 4.0pt 1.0pt 4.0pt\; background: #D9D9D9\;">\n<p style="
 background: #D9D9D9\; border: none\; padding: 0in\;"><span style="text-dec
 oration: underline\;">IMPORTANT:</span> It is important to note that exam 
 2 will cover select talking points listed above.&nbsp\; However\, there ar
 e many concepts that will surface on the exam that are not outlined in the
  above reflection guidelines.&nbsp\; It is best practice to use all files 
 in the exam study folder for exam preparation.</p>\n</div>\n<p>&nbsp\;</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 8 Part 2 [cs_233_120221_213565]
DTSTART:20220322T010000Z
DTEND:20220322T010000Z
DTSTAMP:20220112T032000Z
UID:event-assignment-367950
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:-------------------\nLearning Objectives\n-------------------\
 n\n* Understanding memory-mapped I/O in hardware\n\n* Understanding interr
 upt handling in hardware\n\n* Understanding the functioning of coprocessor
 \n\n-------------------------\nFiles that will be graded\n----------------
 ---------\n\n* cp0.v (compile and run using make cp0)\n\n* machine.v (co
 mpile and run using make machine)\n\n-----------\nSuggestions\n----------
 -\n\n* Please read the entirety of the instructions carefully and make sur
 e you understand the circuits before implementing them. It'll make your l
 ife a lot easier and also help you debug and test your circuits.\n\n* Look
  over the provided Verilog files. You don't need to understand the syntax
  used (since it's deliberately goofy)\, but you should be aware of what mo
 dules we provide\, since you'll need to use some of them in your implement
 ation. In particular\, we've provided flip flops and registers with synch
 ronous reset inputs\, which will be used in our implementation.\n\n* This
  lab is more limited in scope than Lab 5. In previous labs\, we've built 
 up the full\, single-cycle datapath. To decrease complexity for this lab (
 and future labs)\, we've limited the functionality of the CPU to be simila
 r to what you saw in the datapath modification quiz. Refer to Figures at t
 he bottom of the instructions for the changes. Please take some time to un
 derstand the differences between Lab 5's diagram and this one (Lab 8's).\n
 \n-------------------------\nCoprocessor 0 [35 points]\n------------------
 -------\n\nCoprocessor 0 handles interrupts and exceptions. In this lab\, 
 we only have to handle the timer interrupt\, and we don’t deal with exce
 ptions. Our coprocessor will therefore be quite simple\, but it’ll still
  capture all the important ideas underlying a real coprocessor 0 implement
 ation.\n\nStatus "register"\n-----------------\n\nThe status "register" (c
 oprocessor 0 register 12) controls which interrupts are enabled (Interrupt
  mask) and whether any are enabled at all (Interrupt enable). The status r
 egister is not built like a standard register as you will see by the end o
 f this section. We're concerned with the following bits of the status regi
 ster:\n\n[Screen Shot 2021-10-04 at 10.57.24 AM.png] (https://canvas.illin
 ois.edu/courses/18018/files/3110408/preview)\n\nEach bit in the interrupt 
 mask corresponds to disabling (if it's 0) or enabling (if it's 1) a partic
 ular type of interrupt\; for us\, bit 15 corresponds to the timer interrup
 t. The interrupt enable bit globally controls whether any interrupts are t
 aken (i.e.\, if the global interrupt enable is 0\, then all bits of the in
 terrupt mask are treated as 0s). These bits can be set by the user's code 
 executing the mtc0 instruction.\n\nThe exception level bit is 1 whenever a
 n interrupt or exception is currently being handled. This along with all t
 he other status register bits (which we'll just force to 0 in our implemen
 tation) cannot be set by user code\; an mtc0 to the status register should
  not modify these bits.\n\nTo enforce this\, we'll actually construct the 
 status "register" from two components: one 32-bit register to hold the bit
 s which can be set by the user and a separate D flip flop to hold the exce
 ption level bit. We'll combine the outputs of the two components into a si
 ngle bus according to the wiring diagram below:\n\n[Screen Shot 2021-10-04
  at 10.58.02 AM.png] (https://canvas.illinois.edu/courses/18018/files/3110
 409/preview)\n\nCause “register”\n----------------\n\nThe cause regist
 er (coprocessor 0 register 13) tells us which interrupt or exception occur
 red:\n\n \n\n[Screen Shot 2021-10-04 at 10.58.37 AM.png] (https://canvas.
 illinois.edu/courses/18018/files/3110410/preview)\n\nLike the status “re
 gister”\, the cause “register” isn’t implemented as an actual regi
 ster. Instead\, each of the pending interrupt bits is connected to the cor
 responding interrupt line\; for us\, bit 15 will be connected to the timer
  interrupt line. The exception code would be encoded from the incoming exc
 eption lines\, but since we don’t have any exceptions\, we’ll just har
 dcode the exception code bits to 0\, forming the following bus:\n\n[Screen
  Shot 2021-10-04 at 11.00.27 AM.png] (https://canvas.illinois.edu/courses/
 18018/files/3110411/preview)\n\nEPC register\n------------\n\nThe exceptio
 n program counter register (coprocessor 0 register 14) stores the address 
 the interrupt handler should return to. EPC can be implemented as a regula
 r register. Whenever an interrupt is taken\, this register is updated with
  what the next PC would have been normally\, so that execution can resume 
 there after the interrupt is serviced and the handler issues an eret instr
 uction.\n\nReading and writing coprocessor 0 registers\n------------------
 -------------------------\n\nThe mtc0 instruction is used to write to copr
 ocessor 0 registers. As usual\, we’ll use a decoder to enable the regist
 er being written. Since the actual coprocessor has 32 registers\, we’ll 
 use a 5-to-32 decoder\, although only bits 12 and 14 of the decoder output
  will get used (since we can only write to the status and EPC registers).\
 n\nThe mfc0 instruction is used to read coprocessor 0 registers. We’ll u
 se a 32-to-1 mux to select which register value to output. Inputs 12\, 13\
 , and 14 will be connected to the status\, cause\, and EPC registers\, res
 pectively\; the rest will be connected to 0s (since we don’t implement a
 ny other registers).\n\nComplete coprocessor 0 circuit\n------------------
 ------------\n\nWe can put all our components together to get a complete c
 oprocessor 0 circuit:\n\n[Screen Shot 2021-10-04 at 11.07.05 AM.png] (http
 s://canvas.illinois.edu/courses/18018/files/3110412/preview)\n\nIt takes a
 s input what coprocessor register number is being read or written\, what d
 ata is being written to it\, whther the current instruction is an mtc0 or 
 an eret\, what the regular next PC would have been\, whether a timer inter
 rupt is being raised (from our timer circuit)\, and the clock and reset si
 gnals. It outputs whether an interrupt should be taken\, the value of the 
 coprocesor register being read\, and the value of the EPC register.\n\nThe
  EPC register can be written both by user code (using the mtc0 instruction
 ) and by the coprocessor itself (when an interrupt is taken)\, hence enabl
 ing it under both circumstances and using a mux to select which value to w
 rite.\n\nWe take an interrupt when the timer interrupt is enabled and we h
 ave a pending timer interrupt\, the interrupt enable bit is set\, and we
 ’re not already handling an interrupt. In an actual coprocessor\, we wou
 ld have to check for all other interrupts being enabled and pending too.\n
 \nThe eret instruction is used to return from an exception. The exception 
 level bit should be set to 0 upon the execution of this instruction\, henc
 e resetting the exception level flip flop when an eret instruction is seen
 .\n\nMake sure you understand how this circuit works\, and then write the 
 Verilog for it in cp0.v. We’ve provided a basic test bench in cp0_tb.v\,
  which you should augment with your own test cases. You can use make cp0 t
 o compile and run the test bench.\n\n-----------------------------------\n
 Putting it all together [35 points]\n-----------------------------------\n
 \nNow that we have our timer and coprocessor 0 circuits\, we can combine t
 hem with the given single-cycle datapath (figure included below for refere
 nce) to support I/O and interrupts in our machine. The required additions 
 are described in textual and via a circuit diagram.\n\nOur provided decode
 r (in modules.v) already supports the mfc0\, mtc0 and eret instructions\, 
 and outputs control signals for each of them.\n\nYou’ll connect the time
 r circuit’s address and data inputs to the same sources as the data memo
 ry’s address and write data inputs\, respectively\, the MemRead and MemW
 rite inputs to the corresponding control signals\, and the clock and reset
  inputs to the corresponding signals. The TimerAddress output being 1 shou
 ld force the data memory’s read and write inputs to be 0 (through ANDing
  with the NotIO signal)\, and the cycle output should be connected directl
 y to the same bus as the data memory’s read data output (because of the 
 internal tri-state buffers in both).\n\nCoprocessor 0’s TimerInterrupt i
 nput should be connected to the TimerInterrupt output from the timer circu
 it. The MTC0 and ERET inputs should be connected to the corresponding deco
 der outputs\, and clock and reset connected to the corresponding signals. 
 The regnum input should be connected to rd and the cp0’s c0:wr_data intp
 ut to R[rt]\, since those are the registers used by the mfc0 and mtc0 regi
 sters. The processor’s next_pc input should be connected to the correspo
 nding bus (to be precise\, what that bus represents in the unmodified data
 path). You’ll need to write the cp0’s c0:rd_data output to the registe
 r file on an mfc0 instruction\; the provided decoder already takes care of
  the control signals\, so you just need to adjust the register file’s wr
 ite data input accordingly.\n\nFinally\, you’ll need to adjust control f
 low to account for interrupts and interrupt returns. When the TakenInterru
 pt output from coprocessor 0 is 1\, the PC should be set to 0x80000180 (th
 e MIPS interrupt handler address)\, and on an eret instruction\, the PC sh
 ould be set to the EPC output from coprocessor 0. Be careful\; this machin
 e uses a 30-bit PC\, which means you cannot just use 0x80000180 without mo
 dification. Hint: How did we deal with a 30-bit PC in the datapath exam?\n
 \nMake all these changes to the single cycle datapath in machine.v\, and t
 hen compile and run your circuit using make machine. You can modify test.s
  to change the assembly code being executed.\n\n[Screen Shot 2021-10-04 at
  11.20.43 AM.png] (https://canvas.illinois.edu/courses/18018/files/3110413
 /preview)[Screen Shot 2021-10-04 at 11.20.53 AM.png] (https://canvas.illin
 ois.edu/courses/18018/files/3110414/preview)
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#assignment_367950
X-ALT-DESC;FMTTYPE=text/html:<h2>Learning Objectives</h2>\n<ol>\n<li>Under
 standing memory-mapped I/O in hardware</li>\n<li>Understanding interrupt h
 andling in hardware</li>\n<li>Understanding the functioning of coprocessor
 </li>\n</ol>\n<h2>Files that will be graded</h2>\n<ul>\n<li>\n<code>cp0.v<
 /code> (compile and run using&nbsp\;<code>make cp0</code>)</li>\n<li>\n<co
 de>machine.v</code>&nbsp\;(compile and run using&nbsp\;<code>make machine<
 /code>)</li>\n</ul>\n<h2>Suggestions</h2>\n<ul>\n<li>\n<strong>Please read
  the entirety of the instructions carefully and make sure you understand t
 he circuits before implementing them.</strong><span>&nbsp\;</span>It'll ma
 ke your life a lot easier and also help you debug and test your circuits.<
 /li>\n<li><strong>Look over the provided Verilog files.<span>&nbsp\;</span
 >You don't need to understand the syntax used (since it's deliberately goo
 fy)\, but you should be aware of what modules we provide\, since you'll ne
 ed to use some of them in your implementation. In particular\, we've provi
 ded flip flops and registers with<span>&nbsp\;</span>synchronous<span>&nbs
 p\;</span>reset inputs\, which will be used in our implementation.</strong
 ></li>\n<li>\n<strong>This lab is more limited in scope than Lab 5.</stron
 g><span>&nbsp\;</span>In previous labs\, we've built up the full\, single-
 cycle datapath. To decrease complexity for this lab (and future labs)\, we
 've limited the functionality of the CPU to be similar to what you saw in 
 the datapath modification quiz. Refer to Figures at the bottom of the inst
 ructions for the changes. Please take some time to understand the differen
 ces between Lab 5's diagram and this one (Lab 8's).</li>\n</ul>\n<h2>Copro
 cessor 0 [35 points]</h2>\n<p>Coprocessor 0 handles interrupts and excepti
 ons. In this lab\, we only have to handle the timer interrupt\, and we don
 ’t deal with exceptions. Our coprocessor will therefore be quite simple\
 , but it’ll still capture all the important ideas underlying a real copr
 ocessor 0 implementation.</p>\n<h3>Status "register"</h3>\n<p>The status "
 register" (coprocessor 0 register 12) controls which interrupts are enable
 d (Interrupt mask) and whether any are enabled at all (Interrupt enable). 
 The status register is not built like a standard register as you will see 
 by the end of this section. We're concerned with the following bits of the
  status register:</p>\n<p><img src="https://canvas.illinois.edu/courses/18
 018/files/3110408/preview" alt="Screen Shot 2021-10-04 at 10.57.24 AM.png"
  width="574" height="180" data-api-endpoint="https://canvas.illinois.edu/a
 pi/v1/courses/18018/files/3110408" data-api-returntype="File"></p>\n<p>Eac
 h bit in the interrupt mask corresponds to disabling (if it's 0) or enabli
 ng (if it's 1) a particular type of interrupt\; for us\, bit 15 correspond
 s to the timer interrupt. The interrupt enable bit globally controls wheth
 er any interrupts are taken (i.e.\, if the global interrupt enable is 0\, 
 then all bits of the interrupt mask are treated as 0s). These bits can be 
 set by the user's code executing the <code>mtc0</code> instruction.</p>\n<
 p>The exception level bit is 1 whenever an interrupt or exception is curre
 ntly being handled. This along with all the other status register bits (wh
 ich we'll just force to 0 in our implementation) <strong>cannot</strong> b
 e set by user code\; an <code>mtc0</code> to the status register should no
 t modify these bits.</p>\n<p>To enforce this\, we'll actually construct th
 e status "register" from two components: one 32-bit register to hold the b
 its which can be set by the user and a separate D flip flop to hold the ex
 ception level bit. We'll combine the outputs of the two components into a 
 single <strong>bus</strong> according to the wiring diagram below:</p>\n<p
 ><img src="https://canvas.illinois.edu/courses/18018/files/3110409/preview
 " alt="Screen Shot 2021-10-04 at 10.58.02 AM.png" data-api-endpoint="https
 ://canvas.illinois.edu/api/v1/courses/18018/files/3110409" data-api-return
 type="File"></p>\n<h3>Cause “register”</h3>\n<p>The cause register (co
 processor 0 register 13) tells us which interrupt or exception occurred:</
 p>\n<p>&nbsp\;</p>\n<p><img src="https://canvas.illinois.edu/courses/18018
 /files/3110410/preview" alt="Screen Shot 2021-10-04 at 10.58.37 AM.png" wi
 dth="558" height="143" data-api-endpoint="https://canvas.illinois.edu/api/
 v1/courses/18018/files/3110410" data-api-returntype="File"></p>\n<p>Like t
 he status “register”\, the cause “register” isn’t implemented as
  an actual register. Instead\, each of the pending interrupt bits is conne
 cted to the corresponding interrupt line\; for us\, bit 15 will be connect
 ed to the timer interrupt line. The exception code would be encoded from t
 he incoming exception lines\, but since we don’t have any exceptions\, w
 e’ll just hardcode the exception code bits to 0\, forming the following 
 <strong>bus</strong>:</p>\n<p><img src="https://canvas.illinois.edu/course
 s/18018/files/3110411/preview" alt="Screen Shot 2021-10-04 at 11.00.27 AM.
 png" data-api-endpoint="https://canvas.illinois.edu/api/v1/courses/18018/f
 iles/3110411" data-api-returntype="File"></p>\n<h3>EPC register</h3>\n<p>T
 he exception program counter register (coprocessor 0 register 14) stores t
 he address the interrupt handler should return to. EPC can be implemented 
 as a regular register. Whenever an interrupt is taken\, this register is u
 pdated with what the next PC would have been normally\, so that execution 
 can resume there after the interrupt is serviced and the handler issues an
  <code>eret</code> instruction.</p>\n<h3>Reading and writing coprocessor 0
  registers</h3>\n<p>The <code>mtc0</code> instruction is used to write to 
 coprocessor 0 registers. As usual\, we’ll use a decoder to enable the re
 gister being written. Since the actual coprocessor has 32 registers\, we
 ’ll use a 5-to-32 decoder\, although only bits 12 and 14 of the decoder 
 output will get used (since we can only write to the status and EPC regist
 ers).</p>\n<p>The <code>mfc0</code> instruction is used to read coprocesso
 r 0 registers. We’ll use a 32-to-1 mux to select which register value to
  output. Inputs 12\, 13\, and 14 will be connected to the status\, cause\,
  and EPC registers\, respectively\; the rest will be connected to 0s (sinc
 e we don’t implement any other registers).</p>\n<h3>Complete coprocessor
  0 circuit</h3>\n<p>We can put all our components together to get a comple
 te coprocessor 0 circuit:</p>\n<p><img src="https://canvas.illinois.edu/co
 urses/18018/files/3110412/preview" alt="Screen Shot 2021-10-04 at 11.07.05
  AM.png" data-api-endpoint="https://canvas.illinois.edu/api/v1/courses/180
 18/files/3110412" data-api-returntype="File"></p>\n<p>It takes as input wh
 at coprocessor register number is being read or written\, what data is bei
 ng written to it\, whther the current instruction is an <code>mtc0</code> 
 or an <code>eret</code>\, what the regular next <code>PC</code> would have
  been\, whether a timer interrupt is being raised (from our timer circuit)
 \, and the <code>clock</code> and <code>reset</code> signals. It outputs w
 hether an interrupt should be taken\, the value of the coprocesor register
  being read\, and the value of the EPC register.</p>\n<p>The EPC register 
 can be written both by user code (using the <code>mtc0</code> instruction)
  and by the coprocessor itself (when an interrupt is taken)\, hence enabli
 ng it under both circumstances and using a mux to select which value to wr
 ite.</p>\n<p>We take an interrupt when the timer interrupt is enabled and 
 we have a pending timer interrupt\, the interrupt enable bit is set\, and 
 we’re not already handling an interrupt. In an actual coprocessor\, we w
 ould have to check for all other interrupts being enabled and pending too.
 </p>\n<p>The <code>eret</code> instruction is used to return from an excep
 tion. The exception level bit should be set to 0 upon the execution of thi
 s instruction\, hence resetting the exception level flip flop when an eret
  instruction is seen.</p>\n<p>Make sure you understand how this circuit wo
 rks\, and then write the Verilog for it in <code>cp0.v</code>. We’ve pro
 vided a basic test bench in <code>cp0_tb.v</code>\, which you should augme
 nt with your own test cases. You can use <code>make cp0</code> to compile 
 and run the test bench.</p>\n<h2>Putting it all together [35 points]</h2>\
 n<p>Now that we have our timer and coprocessor 0 circuits\, we can combine
  them with the given single-cycle datapath (figure included below for refe
 rence) to support I/O and interrupts in our machine. The required addition
 s are described in textual and via a circuit diagram.</p>\n<p>Our provided
  decoder (in <code>modules.v</code>) already supports the <code>mfc0</code
 >\, <code>mtc0</code> and <code>eret</code> instructions\, and outputs con
 trol signals for each of them.</p>\n<p>You’ll connect the timer circuit
 ’s address and data inputs to the same sources as the data memory’s ad
 dress and write data inputs\, respectively\, the <code>MemRead</code> and 
 <code>MemWrite</code> inputs to the corresponding control signals\, and th
 e <code>clock</code> and <code>reset</code> inputs to the corresponding si
 gnals. The <code>TimerAddress</code> output being 1 should force the data 
 memory’s read and write inputs to be 0 (through ANDing with the <code>No
 tIO</code> signal)\, and the cycle output should be connected directly to 
 the same bus as the data memory’s read data output (because of the inter
 nal tri-state buffers in both).</p>\n<p>Coprocessor 0’s <code>TimerInter
 rupt</code> input should be connected to the <code>TimerInterrupt</code> o
 utput from the timer circuit. The <code>MTC0</code> and <code>ERET</code> 
 inputs should be connected to the corresponding decoder outputs\, and <cod
 e>clock</code> and <code>reset</code> connected to the corresponding signa
 ls. The <code>regnum</code> input should be connected to <code>rd</code> a
 nd the cp0’s <code>c0:wr_data</code> intput to <code>R[rt]</code>\, sinc
 e those are the registers used by the <code>mfc0</code> and <code>mtc0</co
 de> registers. The processor’s <code>next_pc</code> input should be conn
 ected to the corresponding bus (to be precise\, what that bus represents i
 n the unmodified datapath). You’ll need to write the cp0’s c0:<code>rd
 _data</code> output to the register file on an <code>mfc0</code> instructi
 on\; the provided decoder already takes care of the control signals\, so y
 ou just need to adjust the register file’s <code>write data</code> input
  accordingly.</p>\n<p>Finally\, you’ll need to adjust control flow to ac
 count for interrupts and interrupt returns. When the <code>TakenInterrupt<
 /code> output from coprocessor 0 is 1\, the <code>PC</code> should be set 
 to <code>0x80000180</code> (the MIPS interrupt handler address)\, and on a
 n <code>eret </code>instruction\, the <code>PC</code> should be set to the
  <code>EPC</code> output from coprocessor 0. <strong>Be careful\; this mac
 hine uses a 30-bit <code>PC</code>\, which means you cannot just use <code
 >0x80000180</code> without modification.</strong> Hint: How did we deal wi
 th a 30-bit PC in the datapath exam?</p>\n<p>Make all these changes to the
  single cycle datapath in <code>machine.v</code>\, and then compile and ru
 n your circuit using <code>make machine</code>. You can modify <code>test.
 s</code> to change the assembly code being executed.</p>\n<p><img src="htt
 ps://canvas.illinois.edu/courses/18018/files/3110413/preview" alt="Screen 
 Shot 2021-10-04 at 11.20.43 AM.png" data-api-endpoint="https://canvas.illi
 nois.edu/api/v1/courses/18018/files/3110413" data-api-returntype="File"><i
 mg src="https://canvas.illinois.edu/courses/18018/files/3110414/preview" a
 lt="Screen Shot 2021-10-04 at 11.20.53 AM.png" data-api-endpoint="https://
 canvas.illinois.edu/api/v1/courses/18018/files/3110414" data-api-returntyp
 e="File"></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220322T160000Z
DTEND:20220322T210000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39883
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_39883
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:IN PERSON CLASS T/R POLLING QUESTIONS (NO AUDIO OR VIDEO) [fshn_12
 0_120221_213078]
DTSTART:20220322T170000Z
DTEND:20220322T190000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39917
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:966 4014 0173] (https://illin
 ois.zoom.us/j/96640140173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_39917
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/966401
 40173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09" target="_blank">Click here to 
 join Zoom Meeting:966 4014 0173</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Attendance Quiz Tuesday 3/22 (FSHN 120 A Spring 2022 CRN32987) [fs
 hn_120_120221_213078]
DTSTART:20220322T184500Z
DTEND:20220322T184500Z
DTSTAMP:20220322T184300Z
UID:event-assignment-override-19403
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:3 points of extra credit for this poll
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_443106
X-ALT-DESC;FMTTYPE=text/html:<p>3 points of extra credit for this poll</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:17 Stalls and Flushes [cs_233_120221_213565]
DTSTART:20220323T130000Z
DTEND:20220323T170000Z
DTSTAMP:20220112T151500Z
UID:event-calendar-event-45291
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_45291
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220323T130000Z
DTEND:20220323T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50783
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50783
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220323T150000Z
DTEND:20220323T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50814
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50814
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220323T160000Z
DTEND:20220323T210000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39934
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_39934
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:EXAM 2 - BEGIN AT 6PM SHARP ON MARCH 23RD  [fshn_120_120221_213078
 ]
DTSTART:20220323T230000Z
DTEND:20220323T230000Z
DTSTAMP:20220322T161800Z
UID:event-assignment-366698
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Although students are permitted to use their student notes pac
 ket\, a simple calculator\, and one sheet of scratch paper that will be de
 stroyed following the exam\, no other resources are to be utilized during 
 the exam. Thus\, your phone should be put away.  You should be in a room 
 by yourself.  No other browser windows should be open. And\, we will be t
 racking keystrokes to increase testing integrity. No screen shots should b
 e taken at any time.\n\nIf a student is in violation of the above expectat
 ions\, a "0" will be placed as their grade in the gradebook.\n\nIf you hav
 e questions regarding your exam\, you can ask in the virtual tutoring cent
 er during the exam\, immediately following the exam\, or after the exam is
  graded and released (within 48 hours of the exam) 
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_366698
X-ALT-DESC;FMTTYPE=text/html:<p><strong style="margin: 0px\; padding: 0px\
 ; border: 0px\; font-family: 'Helvetica Neue'\, Helvetica\, Arial\, sans-s
 erif\; font-size: 13px\; color: #111111\;"><em style="font-stretch: normal
 \; line-height: normal\; font-family: Georgia\, serif\; margin: 5px 0px 0p
 x\; padding: 0px\; border: 0px\; display: inline-block\; color: #888888\;"
 >Although students are permitted to use their student notes packet\, a sim
 ple calculator\, and one sheet of scratch paper that will be destroyed fol
 lowing the exam\, no other resources are to be utilized during the exam. T
 hus\, your phone should be put away.&nbsp\; You should be in a room by you
 rself.&nbsp\; No other browser windows should be open. And\, we will be tr
 acking keystrokes to increase testing integrity. No screen shots should be
  taken at any time.</em></strong></p>\n<p><strong style="margin: 0px\; pad
 ding: 0px\; border: 0px\; font-family: 'Helvetica Neue'\, Helvetica\, Aria
 l\, sans-serif\; font-size: 13px\; color: #111111\;"><em style="font-stret
 ch: normal\; line-height: normal\; font-family: Georgia\, serif\; margin: 
 5px 0px 0px\; padding: 0px\; border: 0px\; display: inline-block\; color: 
 #888888\;">If a student is in violation of the above expectations\, a "0" 
 will be placed as their grade in the gradebook.</em></strong></p>\n<p><str
 ong style="margin: 0px\; padding: 0px\; border: 0px\; font-family: 'Helvet
 ica Neue'\, Helvetica\, Arial\, sans-serif\; font-size: 13px\; color: #111
 111\;"><em style="font-stretch: normal\; line-height: normal\; font-family
 : Georgia\, serif\; margin: 5px 0px 0px\; padding: 0px\; border: 0px\; dis
 play: inline-block\; color: #888888\;">If you have questions regarding you
 r exam\, you can ask in the virtual tutoring center during the exam\, imme
 diately following the exam\, or after the exam is graded and released (wit
 hin 48 hours of the exam)&nbsp\;</em></strong></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220324T160000Z
DTEND:20220324T210000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39889
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_39889
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:IN PERSON CLASS T/R POLLING QUESTIONS (NO AUDIO OR VIDEO) [fshn_12
 0_120221_213078]
DTSTART:20220324T170000Z
DTEND:20220324T190000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-40019
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:966 4014 0173] (https://illin
 ois.zoom.us/j/96640140173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_40019
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/966401
 40173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09" target="_blank">Click here to 
 join Zoom Meeting:966 4014 0173</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:CS 222 Office Hours [cs_222_120221_214564]
DTSTART:20220324T190000Z
DTEND:20220324T200000Z
DTSTAMP:20220322T160700Z
UID:event-calendar-event-74935
SEQUENCE:0
CLASS:PUBLIC
LOCATION:Thursday 3/24: 2 - 3 PM Harita Reddy. Zoom Link:  https://illin
 ois.zoom.us/j/85854483154?pwd=QnMyQjRWdFRzdTc5VC9yaExWVTdTUT09
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18658&mon
 th=03&year=2022#calendar_event_74935
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220325T160000Z
DTEND:20220325T210000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39864
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_39864
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 9 Part 1 (Individual Lab) [cs_233_120221_213565]
DTSTART:20220326T010000Z
DTEND:20220326T010000Z
DTSTAMP:20220322T004700Z
UID:event-assignment-367951
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:*******************\nLearning Objectives\n*******************\
 n\n* Understanding memory-mapped I/O in hardware\n\n* Understanding interr
 upt handling in hardware\n\nBackground\n----------\n\nNow that you've spen
 t some time translating C code to MIPS assembly\, it's time to write some 
 MIPS code on your own. We've created a simulation that will let you apply 
 your MIPS knowledge to more open-ended tasks. Your code will control a vir
 tual robot\, the SPIMBot\, and in this lab\, you'll have to make the robot
  achieve a few things.\n\nDocumentation\n-------------\n\nBefore you start
  this lab\, we highly recommend you read [this document] (https://canvas.i
 llinois.edu/courses/18018/pages/spimbot-documentation) in its entirety. It
  won't be for naught either — you'll be using what you learn now in the 
 final lab of the semester\, Lab Spimbot.\n\nHere are some key points to re
 cap what you'll need for this lab.\n\n* Your bot moves around a square wor
 ld made up of a 40x40 grid of tiles\n\n* Each tile is 8x8 pixels\n\n* Your
  bot can walk on tiles it owns\, but not walls or enemy tiles\n\n* Enemy t
 iles can be flipped by shooting bullets over them\n\n* Your bot can shoot 
 bullets\n\n* It has an unlimited number for Lab 9\, Part 1\n\n* Use the SH
 OOT MMIO to fire them\n\n* Your bot can shoot charged shots\, which produc
 e three bullets at once\n\n* Use the CHARGE_SHOT MMIO to begin charging a 
 shot\n\n* Wait 10\,000 cycles for it to charge\n\n* Use the SHOOT MMIO to 
 release the shot\n\n* You can set your bot's velocity using the VELOCITY M
 MIO\n\n* Be sure to set it to zero when you want it to stop moving\n\n* Th
 e following MMIO commands may be useful: ANGLE\, VELOCITY\, SHOOT\, CHARGE
 _SHOT\, BOT_X\, and BOT_Y\n\n* Read about them in the documentation linked
  above!\n\nObjectives\n----------\n\nTo earn your grade for Lab 9\, Part 1
 \, your SPIMBot must perform the following actions:\n\n* Fire at least one
  charged shot\n\n* Flip at least 200 tiles\n\nHints\n-----\n\n* Keep in mi
 nd that the map layout is fixed\, so you can hardcode the path that Spimbo
 t will take.\n\n* You might find it helpful to write functions that move S
 pimbot one tile at a time. For example\, you could define four functions m
 ove_east\, move_west\, move_north\, move_south. Then\, you could easily ex
 press your path as a sequence of moves between cells and not have to worry
  about any tiny details.\n\n* You can repeatedly check your bot's position
  against a target and stop moving once you've reached it.\n\n* You could a
 lso use the timer to stop after moving for a certain amount of time.\n\n* 
 The spimbot's velocity is expressed in units of pixels per 10\,000 cycles.
 \n\n* At the max speed of 10\, it moves at 10 pixels per 10\,000 cycles.\n
 \n* You might be able to use a modified version of your code for find_best
 _row from Lab 6\n\n* This isn't necessary\, but it could prepare you for L
 ab Spimbot.\n\n**************************\nDevelopment and Submission\n***
 ***********************\n\nSee PrairieLearn for information on getting sta
 rted with development. Submit your MIPS code on PrairieLearn.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#assignment_367951
X-ALT-DESC;FMTTYPE=text/html:<h1>Learning Objectives</h1>\n<ol>\n<li>Under
 standing memory-mapped I/O in hardware</li>\n<li>Understanding interrupt h
 andling in hardware</li>\n</ol>\n\n<h3>Background</h3>\n<p>Now that you've
  spent some time translating C code to MIPS assembly\, it's time to write 
 some MIPS code on your own. We've created a simulation that will let you a
 pply your MIPS knowledge to more open-ended tasks. Your code will control 
 a virtual robot\, the SPIMBot\, and in this lab\, you'll have to make the 
 robot achieve a few things.</p>\n\n<h3>Documentation</h3>\n<div class="ale
 rt alert-danger" role="alert">\nBefore you start this lab\, we highly reco
 mmend you read <a href="https://canvas.illinois.edu/courses/18018/pages/sp
 imbot-documentation" target="_blank" data-api-endpoint="https://canvas.ill
 inois.edu/api/v1/courses/18018/pages/spimbot-documentation" data-api-retur
 ntype="Page">this document</a> in its entirety. It won't be for naught eit
 her — you'll be using what you learn now in the final lab of the semeste
 r\, Lab Spimbot.\n</div>\n\n<p>Here are some key points to recap what you'
 ll need for this lab.</p>\n\n<ul>\n  <li>Your bot moves around a square wo
 rld made up of a 40x40 grid of tiles\n    <ul>\n      <li>Each tile is 8x8
  pixels</li>\n      <li>Your bot can walk on tiles it owns\, but not walls
  or enemy tiles</li>\n      <li>Enemy tiles can be flipped by shooting bul
 lets over them</li>\n    </ul>\n  </li>\n  <li>Your bot can shoot bullets\
 n    <ul>\n      <li>It has an unlimited number for Lab 9\, Part 1</li>\n 
      <li>Use the <strong>SHOOT</strong> MMIO to fire them</li>\n    </ul>\
 n  </li>\n  <li>Your bot can shoot charged shots\, which produce three bul
 lets at once\n    <ul>\n      <li>Use the <strong>CHARGE_SHOT</strong> MMI
 O to begin charging a shot</li>\n      <li>Wait 10\,000 cycles for it to c
 harge</li>\n      <li>Use the <strong>SHOOT</strong> MMIO to release the s
 hot</li>\n    </ul>\n  </li>\n  <li>You can set your bot's velocity using 
 the <strong>VELOCITY</strong> MMIO\n    <ul>\n      <li>Be sure to set it 
 to zero when you want it to stop moving</li>\n    </ul>\n  </li>\n  <li>Th
 e following MMIO commands may be useful: ANGLE\, VELOCITY\, SHOOT\, CHARGE
 _SHOT\, BOT_X\, and BOT_Y\n    <ul>\n      <li>Read about them in the docu
 mentation linked above!</li>\n    </ul>\n  </li>\n</ul>\n\n<h3>Objectives<
 /h3>\n\n<p>To earn your grade for Lab 9\, Part 1\, your SPIMBot must perfo
 rm the following actions:</p>\n\n<ol>\n  <li>Fire at least one charged sho
 t</li>\n  <li>Flip at least 200 tiles</li>\n</ol>\n\n<h3>Hints</h3>\n\n<ul
 >\n  <li>Keep in mind that the map layout is fixed\, so you can hardcode t
 he path that Spimbot will take.</li>\n  <li>You might find it helpful to w
 rite functions that move Spimbot one tile at a time. For example\, you cou
 ld define four functions move_east\, move_west\, move_north\, move_south. 
 Then\, you could easily express your path as a sequence of moves between c
 ells and not have to worry about any tiny details.</li>\n  <li>You can rep
 eatedly check your bot's position against a target and stop moving once yo
 u've reached it.\n    <ul>\n      <li>You could also use the timer to stop
  after moving for a certain amount of time.</li>\n    </ul>\n  </li>\n  <l
 i>The spimbot's velocity is expressed in units of pixels per 10\,000 cycle
 s.\n    <ul>\n      <li>At the max speed of 10\, it moves at 10 pixels per
  10\,000 cycles.</li>\n    </ul>\n  </li>\n  <li>You might be able to use 
 a modified version of your code for find_best_row from Lab 6\n    <ul>\n  
     <li>This isn't necessary\, but it could prepare you for Lab Spimbot.</
 li>\n    </ul>\n  </li>\n</ul>\n\n<h1>Development and Submission</h1>\nSee
  PrairieLearn for information on getting started with development. Submit 
 your MIPS code on PrairieLearn.
END:VEVENT
BEGIN:VEVENT
SUMMARY:Quiz 8 [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220325T000000
DTEND;VALUE=DATE:20220325T000000
DTSTAMP:20220112T142900Z
UID:event-assignment-367970
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Practice Quiz 8 exactly mirrors the structure of the actual qu
 iz. Quiz 8 will focus on content from Week 8.\n\nBased on feedback from pa
 st students\, Quiz 8 has two questions instead of one. It will have a "bes
 t of" structure\, where we will keep only the score from the highest scori
 ng question (from an absolute points perspective): where one easier questi
 on is worth 75 points and one original question is worth 100 points.\n\nQu
 iz 8 focuses on assessing your understanding of recursion and structs in M
 IPS programming.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#assignment_367970
X-ALT-DESC;FMTTYPE=text/html:<p><span>Practice Quiz 8 exactly mirrors the 
 structure of the actual quiz. Quiz 8 will focus on content from Week 8.</s
 pan></p>\n<p>Based on feedback from past students\, Quiz 8 has two questio
 ns instead of one. It will have a "best of" structure\, where we will keep
  only the score from the highest scoring question (from an absolute points
  perspective): where one easier question is worth 75 points and one origin
 al question is worth 100 points.</p>\n<p>Quiz 8 focuses on assessing your 
 understanding of recursion and structs in MIPS programming.</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Weekly Review 4 [cs_222_120221_214564]
DTSTART;VALUE=DATE:20220325T000000
DTEND;VALUE=DATE:20220325T000000
DTSTAMP:20220321T050000Z
UID:event-assignment-383688
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Provide a short (2-3 sentence) description of the work you com
 pleted in the last week. The remaining fields in the rubric will be scored
  by your mentor.\n\n \n\nTo ensure a fair grade\, your score will be dete
 rmined as follows:\n\nPenaliser = (Participation + Explanation of Effort)/
 5.0\nStudent’s Total Score = Participation + Explanation of Effort\n  
               + Penaliser*(Collaboration + Software Engineering Bes
 t Practices)
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18658&mon
 th=03&year=2022#assignment_383688
X-ALT-DESC;FMTTYPE=text/html:<p>Provide a short (2-3 sentence) description
  of the work you completed in the last week. The remaining fields in the r
 ubric will be scored by your mentor.</p>\n<p>&nbsp\;</p>\n<p>To ensure a f
 air grade\, your score will be determined as follows:</p>\n<p>Penaliser = 
 (Participation + Explanation of Effort)/5.0<br>Student’s Total Score = P
 articipation + Explanation of Effort<br>&nbsp\; &nbsp\; &nbsp\; &nbsp\; &n
 bsp\; &nbsp\; &nbsp\; &nbsp\; + Penaliser*(Collaboration + Software Engine
 ering Best Practices)</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:18 Pipeline Cycle Counting Review Session [cs_233_120221_213565]
DTSTART:20220328T130000Z
DTEND:20220328T170000Z
DTSTAMP:20220112T151500Z
UID:event-calendar-event-45293
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_45293
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220328T130000Z
DTEND:20220328T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50784
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50784
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220328T150000Z
DTEND:20220328T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50815
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50815
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220328T160000Z
DTEND:20220328T210000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-40012
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_40012
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:PROTEIN EXTRA CREDIT DISCUSSION BOARD - DUE BEFORE 3PM CT MONDAY M
 ARCH 28TH (FSHN 120 ONL Spring 2022 CRN57561) [fshn_120_120221_213078]
DTSTART:20220328T200000Z
DTEND:20220328T200000Z
DTSTAMP:20220307T210000Z
UID:event-assignment-override-12725
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:QUESTION TO PONDER: Which is healthiest: an omnivorous diet\,
  a pescatarian diet\, or a vegan diet?  \n\nFOR EXTRA CREDIT CONSIDERAT
 ION:\n\n* Research the above question using reputable sources (ex: peer re
 viewed journal articles\, the optional text book\, .gov or .edu sites)\n\
 n* Choose a side and clearly state which side you are supporting in your i
 nitial posting\n\n* Share your thoughts with 5-8 sentences and additional 
 support references properly sited with MLA format at the end of the post\n
 \n* Compose 2+ reply postings to your fellow classmates with 3-5 well tho
 ught out sentences and one additional (and different) support reference pr
 operly sited with MLA format at the end of your reply posting\n\n* Complet
 e all of the above prior to 3 PM CT the Monday following the module deadli
 ne\n\nNOTE: You will need to post your initial posting prior to gaining ac
 cess to other student posts.  You must create a thread in order to view o
 ther threads in this forum.  \n\nONLINE STUDENTS ONLY
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#assignment_366724
X-ALT-DESC;FMTTYPE=text/html:<p><strong style="margin: 0px\; padding: 0px\
 ; border: 0px\; font-style: inherit\; font-family: inherit\; font-size: 16
 px\;">QUESTION TO PONDER: Which is&nbsp\;healthiest: an omnivorous diet\, 
 a p<strong style="color: #222222\; font-family: Roboto\, arial\, sans-seri
 f\; font-size: 16px\; font-style: normal\; text-align: left\; text-indent:
  0px\; white-space: normal\; background-color: #ffffff\;">escatarian</stro
 ng>&nbsp\;diet\, or a vegan diet?&nbsp\;&nbsp\;</strong></p><hr><p><em><sp
 an><strong>FOR EXTRA CREDIT CONSIDERATION:</strong></span></em></p><ol><li
 >Research the above question using reputable sources (ex: peer reviewed jo
 urnal articles\, the optional text book\, .gov or .edu&nbsp\;sites)</li><l
 i>Choose a side and clearly state which side you are supporting in your in
 itial posting</li><li>Share your thoughts with 5-8 sentences and additiona
 l support references properly sited with MLA format at the end of the post
 </li><li>Compose 2+ reply postings to your fellow classmates&nbsp\;with 3-
 5 well thought out sentences and one additional (and different) support re
 ference properly sited with MLA format at the end of your reply posting</l
 i><li>Complete all of the above prior to 3 PM CT the Monday following the 
 module deadline</li></ol><p>NOTE: You will need to post your initial posti
 ng prior to gaining access to other student posts.&nbsp\; You must create 
 a thread in order to view other threads in this forum.&nbsp\;&nbsp\;</p><p
 ><span style="text-decoration: underline\;"><strong>ONLINE STUDENTS ONLY</
 strong></span></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 9 Part 2 (Individual Lab) [cs_233_120221_213565]
DTSTART:20220329T010000Z
DTEND:20220329T010000Z
DTSTAMP:20220302T214800Z
UID:event-assignment-367952
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:*******************\nLearning Objectives\n*******************\
 n\n* Understanding memory-mapped I/O in hardware\n\n* Understanding interr
 upt handling in hardware\n\n \n\n************\nInstructions\n************
 \n\nIn Lab 9 you will be writing MIPS code to control the Spimbot. Refer t
 o [this document] (https://canvas.illinois.edu/courses/18018/pages/spimbot
 -documentation) for more details about the game and Spimbot.\n\nBackground
 \n----------\n\nNow that we are done with the previous simulation\, it is 
 important to make the simulation a bit more realistic. You do not have an 
 infinite number of bullets anymore and you need to solve puzzles to get bu
 llets. So\, for this part of the lab you will do everything you did in the
  previous part of the lab (shoot charged bullets\, flip tiles) but with on
 e caveat: You have 0 bullets to start with and you need to solve puzzles t
 o obtain bullets.\n\nWe will be using the same count disjoint regions puzz
 le that you solved in Lab 7 as the puzzle for this lab - full details in t
 he spimbot documentation. You can use the code you wrote for Lab 7 or you 
 can use . You will need to place all files for your puzzle solver into par
 t2.s. You can then solve a puzzle to get bullets before shooting. Spimbot 
 will get one bullet per successful puzzle solved. Bullets can then be used
  to flip tiles.\n\nTo request a puzzle to solve\, allocate space in the .d
 ata segment for a Solution struct and a PuzzleWrapper struct that encapsul
 ates it (see below for definition of the structs). Then\, write the addres
 s of the start of this memory to the REQUEST_PUZZLE memory-mapped I/O addr
 ess. When a puzzle is ready\, the I/O device will raise a puzzle interrupt
 .\n\nThen\, you need to write to REQUEST_PUZZLE_ACK to acknowledge the puz
 zle. When you acknowledge it\, the address you wrote to REQUEST_PUZZLE wil
 l be filled with a valid puzzle generated by QtSpimbot. Make sure to ackno
 wledge REQUEST_PUZZLE_ACK by writing to it. Check for the interrupt to ack
 nowledge REQUEST_PUZZLE_ACK using the REQUEST_PUZZLE_INT_MASK interrupt ma
 sk. Solve this puzzle using the rules defined in Lab 7 and write back the 
 address to the solution to the SUBMIT_SOLUTION address. You can use GET_BU
 LLETS to find out the number of bullets you have.\n\nObjectives\n---------
 -\n\nIn Part 2\, the bot starts with 0 bullets and needs to solve puzzles 
 to get more bullets. The objectives are otherwise the same as Part 1\, i.e
 .\n\n* Solve Puzzles to get bullets.\n\n* Fire at least one charged bullet
 .\n\n* Flip at least 200 tiles.\n\nBelow is sample C++ code to give you a 
 concrete idea of what you need to do for this part of the lab.\n\n#define 
 MAX_LINES 12\n#define MAX_DIM 12\n\nstruct PuzzleWrapper {\n// canvas\nuns
 igned int height\;\nunsigned int width\;\nunsigned char pattern\;\nchar** 
 canvas\;\n\nunsigned int num_lines\;\nunsigned int* coords[2]\;\n\n// data
 \nint line_data[2 * MAX_LINES]\;\nchar* canvas_row_pointer[MAX_DIM]\;\ncha
 r canvas_data[MAX_DIM * (MAX_DIM + 1)]\;\n}\;\n\nstruct Solution {\nunsign
 ed int length\;\n// Number of disjoint regions after drawing each line.\ni
 nt * counts\;\n}\;\n\nconst mem_addr REQUEST_PUZZLE_ACK = 0x.....\; // mem
 _addr is just a pointer (word sized)\nconst mem_addr SUBMIT_SOLUTION = 0x.
 ....\; // mem_addr is just a pointer (word sized)\nconst mem_addr REQUEST_
 PUZZLE = 0x.....\; // mem_addr is just a pointer (word sized)\n\n// Stuff 
 to put into the data segment\nint puzzle_received = 0\; // puzzle_received
 : .word 0\nPuzzleWrapper puzzle\; // puzzle: .space SIZE_OF_PUZZLE\nSoluti
 on sol\; // solution: .space SIZE_OF_PUZZLE\n\nvoid interrupt_handler() {\
 n...\n// Puzzle interrupt part\n*REQUEST_PUZZLE_ACK = (int)1\; // ACK the 
 interrupt\npuzzle_received = 1\;\n// End puzzle part\n}\n\n/**\n* Solves t
 wo puzzles\n*/\n\nvoid puzzle_part() {\nfor (int i = 0\; i < 2\; i++) {\np
 uzzle_received = 0\;\n*REQUEST_PUZZLE = &puzzle\;\nwhile (puzzle_received 
 == 0) {\n// At some point in time\, the we will be interrupted\n// and we 
 will receive the puzzle\, but we don’t know when.\n// This will initiali
 ze the PuzzleWrapper with all the information\n// needed.\n}\n// Received 
 puzzle!\npuzzle_solve(puzzle)\; // This will store the solution into sol\n
 *SUBMIT_SOLUTION = &sol\; // Send the solution location\n}\n}\n\nvoid part
 1_code() {\n// Code from part 1\n}\n\nint main() {\npuzzle_part()\;\npart1
 _code()\;\n}\n\nHints\n-----\n\n* Keep in mind that the map layout is fixe
 d\, so you can hardcode the path that SPIMBot will take.\n\n* You will pro
 bably find it very helpful to write functions that move SPIMBot one cell a
 t a time. For example\, you could define four functions move_east\, move_w
 est\, move_north\, move_south. Then\, you could easily express your path a
 s a sequence of moves between cells and not have to worry about any tiny d
 etails. To implement these functions\, you can poll the SPIMBot’s positi
 on. The SPIMBot moves 1 pixel every 1\,000 cycles at top speed.\n\n* You w
 ill have to switch between moving and solving puzzles. You can choose to e
 ither solve all puzzles at the beginning before moving\, or use timer inte
 rrupts in order to solve puzzles while moving.\n\n* LabSpimbot isn’t out
  yet and we will likely make substantial changes to the game before releas
 ing it.\n\n* You can potentially use a modified version of your code for f
 ind_best_row from Lab 6 if you want. You do not need to do this now\, but 
 it may be helpful practice for LabSpimbot.\n\nYou can also get all the req
 uired files from Prairielearn.\n------------------------------------------
 ----------------
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#assignment_367952
X-ALT-DESC;FMTTYPE=text/html:<h1>Learning Objectives</h1>\n<ol>\n<li>Under
 standing memory-mapped I/O in hardware</li>\n<li>Understanding interrupt h
 andling in hardware</li>\n</ol>\n<p>&nbsp\;</p>\n<h1>Instructions</h1>\n<d
 iv class="alert alert-danger" role="alert">In Lab 9 you will be writing MI
 PS code to control the Spimbot. Refer to <a href="https://canvas.illinois.
 edu/courses/18018/pages/spimbot-documentation" data-api-endpoint="https://
 canvas.illinois.edu/api/v1/courses/18018/pages/spimbot-documentation" data
 -api-returntype="Page">this document</a> for more details about the game a
 nd Spimbot.</div>\n<h3>Background</h3>\n<p>Now that we are done with the p
 revious simulation\, it is important to make the simulation a bit more rea
 listic. You do not have an infinite number of bullets anymore and you need
  to solve puzzles to get bullets. So\, for this part of the lab you will d
 o everything you did in the previous part of the lab (shoot charged bullet
 s\, flip tiles) but with one caveat: You have 0 bullets to start with and 
 you need to solve puzzles to obtain bullets.</p>\n<p>We will be using the 
 same count disjoint regions puzzle that you solved in Lab 7 as the puzzle 
 for this lab - full details in the spimbot documentation. You can use the 
 code you wrote for Lab 7 or you can use . You will need to place all files
  for your puzzle solver into <code>part2.s</code>. You can then solve a pu
 zzle to get bullets before shooting. Spimbot will get one bullet per succe
 ssful puzzle solved. Bullets can then be used to flip tiles.</p>\n<p>To re
 quest a puzzle to solve\, allocate space in the .data segment for a <code>
 Solution</code> struct and a <code>PuzzleWrapper</code> struct that encaps
 ulates it (see below for definition of the structs). Then\, write the addr
 ess of the start of this memory to the <strong>REQUEST_PUZZLE</strong> mem
 ory-mapped I/O address. When a puzzle is ready\, the I/O device will raise
  a puzzle interrupt.</p>\n<p>Then\, you need to write to <strong>REQUEST_P
 UZZLE_ACK</strong> to acknowledge the puzzle. When you acknowledge it\, th
 e address you wrote to <strong>REQUEST_PUZZLE</strong> will be filled with
  a valid puzzle generated by QtSpimbot. Make sure to acknowledge <strong>R
 EQUEST_PUZZLE_ACK</strong> by writing to it. Check for the interrupt to ac
 knowledge <strong>REQUEST_PUZZLE_ACK</strong> using the <strong>REQUEST_PU
 ZZLE_INT_MASK</strong> interrupt mask. Solve this puzzle using the rules d
 efined in Lab 7 and write back the address to the solution to the <strong>
 SUBMIT_SOLUTION</strong> address. You can use <strong>GET_BULLETS</strong>
  to find out the number of bullets you have.</p>\n<h3>Objectives</h3>\n<p>
 In Part 2\, the bot starts with 0 bullets and needs to solve puzzles to ge
 t more bullets. The objectives are otherwise the same as Part 1\, i.e.</p>
 \n<ol>\n<li>Solve Puzzles to get bullets.</li>\n<li>Fire at least one char
 ged bullet.</li>\n<li>Flip at least 200 tiles.</li>\n</ol>\n<p>Below is sa
 mple C++ code to give you a concrete idea of what you need to do for this 
 part of the lab.</p>\n<pre><span>#define MAX_LINES 12 <br>#define MAX_DIM 
 12<br><br>struct PuzzleWrapper {<br>    // canvas<br>    unsigned int heig
 ht\;<br>    unsigned int width\;<br>    unsigned char pattern\;<br>    cha
 r** canvas\;<br><br>    unsigned int num_lines\;<br>    unsigned int* coor
 ds[2]\;<br><br><br>    // data<br>    int line_data[2 * MAX_LINES]\;<br>  
   char* canvas_row_pointer[MAX_DIM]\;<br>    char canvas_data[MAX_DIM * (M
 AX_DIM + 1)]\;<br>}\;<br><br><br>struct Solution {<br>    unsigned int len
 gth\;<br>    // Number of disjoint regions after drawing each line.<br>   
  int * counts\;<br>}\;<br><br><br>const mem_addr REQUEST_PUZZLE_ACK = 0x..
 ...\; // mem_addr is just a pointer (word sized)<br>const mem_addr SUBMIT_
 SOLUTION = 0x.....\; // mem_addr is just a pointer (word sized)<br>const m
 em_addr REQUEST_PUZZLE = 0x.....\; // mem_addr is just a pointer (word siz
 ed)<br><br><br>// Stuff to put into the data segment<br>int puzzle_receive
 d = 0\; // puzzle_received: .word 0<br>PuzzleWrapper puzzle\; // puzzle: .
 space SIZE_OF_PUZZLE<br>Solution sol\; // solution: .space SIZE_OF_PUZZLE<
 br><br>void interrupt_handler() {<br>    ...<br>    // Puzzle interrupt pa
 rt<br>    *REQUEST_PUZZLE_ACK = (int)1\; // ACK the interrupt<br>    puzzl
 e_received = 1\;<br>    // End puzzle part<br>}<br><br><br>/**<br>* Solves
  two puzzles<br>*/<br><br>void puzzle_part() {<br>    for (int i = 0\; i &
 lt\; 2\; i++) {<br>        puzzle_received = 0\;<br>        *REQUEST_PUZZL
 E = &amp\;puzzle\;<br>        while (puzzle_received == 0) {<br>          
   // At some point in time\, the we will be interrupted<br>            // 
 and we will receive the puzzle\, but we don’t know when.<br>            
 // This will initialize the PuzzleWrapper with all the information<br>    
         // needed.<br>        }<br>        // Received puzzle!<br>        
 puzzle_solve(puzzle)\; // This will store the solution into sol<br>       
  *SUBMIT_SOLUTION = &amp\;sol\; // Send the solution location<br>    }<br>
 }<br><br><br>void part1_code() {<br>// Code from part 1<br>}<br><br>int ma
 in() {<br>    puzzle_part()\;<br>    part1_code()\;<br>}</span></pre>\n<h3
 >Hints</h3>\n<ul>\n<li>Keep in mind that the map layout is fixed\, so you 
 can hardcode the path that SPIMBot will take.</li>\n<li>You will probably 
 find it very helpful to write functions that move SPIMBot one cell at a ti
 me. For example\, you could define four functions move_east\, move_west\, 
 move_north\, move_south. Then\, you could easily express your path as a se
 quence of moves between cells and not have to worry about any tiny details
 . To implement these functions\, you can poll the SPIMBot’s position. Th
 e SPIMBot moves 1 pixel every 1\,000 cycles at top speed.</li>\n<li>You wi
 ll have to switch between moving and solving puzzles. You can choose to ei
 ther solve all puzzles at the beginning before moving\, or use timer inter
 rupts in order to solve puzzles while moving.</li>\n<li>LabSpimbot isn’t
  out yet and we will likely make substantial changes to the game before re
 leasing it.</li>\n<li>You can potentially use a modified version of your c
 ode for <code>find_best_row</code> from Lab 6 if you want. You do not need
  to do this now\, but it may be helpful practice for LabSpimbot.</li>\n</u
 l>\n<h3><strong>You can also get all the required files from Prairielearn.
 </strong></h3>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220329T160000Z
DTEND:20220329T210000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-40013
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_40013
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:IN PERSON CLASS T/R POLLING QUESTIONS (NO AUDIO OR VIDEO) [fshn_12
 0_120221_213078]
DTSTART:20220329T170000Z
DTEND:20220329T190000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39868
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:966 4014 0173] (https://illin
 ois.zoom.us/j/96640140173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=03&year=2022#calendar_event_39868
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/966401
 40173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09" target="_blank">Click here to 
 join Zoom Meeting:966 4014 0173</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:19 Pipelines since 1985  [cs_233_120221_213565]
DTSTART:20220330T130000Z
DTEND:20220330T170000Z
DTSTAMP:20220112T151500Z
UID:event-calendar-event-45295
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_45295
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220330T130000Z
DTEND:20220330T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50785
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50785
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220330T150000Z
DTEND:20220330T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50816
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=03&year=2022#calendar_event_50816
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 10 Part 1 [cs_233_120221_213565]
DTSTART:20220402T010000Z
DTEND:20220402T010000Z
DTSTAMP:20220112T032100Z
UID:event-assignment-367927
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:-------------------\nLearning Objectives\n-------------------\
 n\n* Learn the fundamentals of pipeline implementation\, including data fo
 rwarding\, stalling\, and control hazards.\n\n-------------------------\nF
 iles that will be graded\n-------------------------\n\n* pipelined_adding_
 machine.v\, A 2-stage pipelined implementation of a circuit that adds a bu
 nch of numbers stored in memory.\n\n----------\nGuidelines\n----------\n\n
 * As always\, make sure to read over the handout carefully to understand t
 he circuit before attempting to implement it. Take special note of the dia
 grams provided\, as they may give clues into necessary additions/modificat
 ions.\n\n* Alongside the handout diagrams\, note that the starter files im
 plement an unpiped version of their respective circuits. Your code will ne
 ed to interact and build off the existing code\; use it to help in accompl
 ishing your goals.\n\n* Unlike the previous lab\, partners are once again 
 allowed for this lab.\n\n----------------------------------\nA 2-stage pip
 elined adding machine\n----------------------------------\n\nBelow is a ci
 rcuit diagram of a simple adding machine. The values to be added are loade
 d into the memory (process not shown) and the machine is run. The counter 
 iterates through the memory addresses\, one per cycle. As each memory valu
 e comes out\, it is accumulated into the register.\n\n \n\n[adding_machin
 e.png] (https://canvas.illinois.edu/courses/18018/files/3110419/preview)\n
 \n----------------------\nImplementation Details\n----------------------\n
 \n* Compile and run this machine using make pipelined_adding_machine. You 
 will be given the correct output for the machine. This can be confirmed by
  looking at the verilog and the things_to_add.data.dat file.\n\n* Because 
 of the delays of the components\, this machine can’t run at faster than 
 4 time units per clock cycle. For this reason\, we have to set our origina
 l clock period to 4 by setting each phase of the clock to change after 2 t
 ime units. In the pipelined_adding_machine_tb.v testbench\, change "#2" to
  "#1" so it looks like:\nalways #1 clk = !clk\;\n(this new statement will 
 cause each phase of the clock to be 1 time unit\, so the clock period will
  be 2 time units.)\nRe-compile/run and see that the output is different. W
 e’ve clocked our circuit too fast\, so it is giving incorrect results.\n
 \n* We can make the circuit work at this higher clock frequency by pipelin
 ing it\, as shown below. Be sure to name the two copies of the data bus di
 fferently\, and connect them properly. Make sure that your pipelined versi
 on behaves the same as the original version\, but does so at the higher cl
 ock frequency as well.[adding_machine2.png] (https://canvas.illinois.edu/c
 ourses/18018/files/3110420/preview)\n\n-----\nNotes\n-----\n\n* Remember t
 hat each stage of the circuit will execute in parallel\, separate from one
  another. Once each stage receives the correct inputs and passes on the co
 rrect outputs\, the entire pipeline will act as intended.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#assignment_367927
X-ALT-DESC;FMTTYPE=text/html:<h2>Learning Objectives</h2>\n<ol>\n    <li>L
 earn the fundamentals of pipeline implementation\, including <strong>data 
 forwarding</strong>\, <strong>stalling</strong>\, and <strong>control haza
 rds</strong>.</li>\n</ol>\n<h2>Files that will be graded</h2>\n<ul>\n    <
 li>\n<code>pipelined_adding_machine.v</code>\, A 2-stage pipelined impleme
 ntation of a circuit that adds a bunch of numbers stored in memory.</li>\n
 </ul>\n<h2>Guidelines</h2>\n<ul>\n    <li>As always\, make sure to read ov
 er the handout carefully to understand the circuit before attempting to im
 plement it. Take special note of the diagrams provided\, as they may give 
 clues into necessary additions/modifications.</li>\n    <li>Alongside the 
 handout diagrams\, note that the starter files implement an unpiped versio
 n of their respective circuits. Your code will need to interact and build 
 off the existing code\; use it to help in accomplishing your goals.</li>\n
     <li>Unlike the previous lab\, partners are once again allowed for this
  lab.</li>\n</ul>\n<h2>A 2-stage pipelined adding machine</h2>\n<p>Below i
 s a circuit diagram of a simple adding machine. The values to be added are
  loaded into the memory (process not shown) and the machine is run. The co
 unter iterates through the memory addresses\, one per cycle. As each memor
 y value comes out\, it is accumulated into the register.</p>\n<p>&nbsp\;</
 p>\n<p><img src="https://canvas.illinois.edu/courses/18018/files/3110419/p
 review" alt="adding_machine.png" data-api-endpoint="https://canvas.illinoi
 s.edu/api/v1/courses/18018/files/3110419" data-api-returntype="File"></p>\
 n<h2>Implementation Details</h2>\n        <ol>\n            <li>Compile an
 d run this machine using <code>make pipelined_adding_machine</code>. You w
 ill be given the correct output for the machine. This can be confirmed by 
 looking at the verilog and the <code>things_to_add.data.dat</code> file.</
 li>\n            <li>Because of the delays of the components\, this machin
 e can’t run at faster than 4 time units per clock cycle. For this reason
 \, we have to set our original clock period to 4 by setting each phase of 
 the clock to change after 2 time units. <strong>In the</strong> <code>pipe
 lined_adding_machine_tb.v</code> <strong>testbench\, change "</strong>#2<s
 trong>" to "</strong>#1<strong>" so it looks like:</strong> <br><code> alw
 ays #1 clk = !clk\;</code> <br><i>(this new statement will cause each phas
 e of the clock to be 1 time unit\, so the clock period will be 2 time unit
 s.)</i> <br>Re-compile/run and see that the output is different. We’ve c
 locked our circuit too fast\, so it is giving incorrect results.</li>\n   
          <li>We can make the circuit work at this higher clock frequency b
 y pipelining it\, as shown below. Be sure to name the two copies of the <c
 ode>data</code> bus differently\, and connect them properly. Make sure tha
 t your pipelined version behaves the same as the original version\, but do
 es so at the higher clock frequency as well.<img src="https://canvas.illin
 ois.edu/courses/18018/files/3110420/preview" alt="adding_machine2.png" dat
 a-api-endpoint="https://canvas.illinois.edu/api/v1/courses/18018/files/311
 0420" data-api-returntype="File">\n</li>\n        </ol>\n<h2>Notes</h2>\n<
 ul>\n    <li>Remember that each stage of the circuit will execute in paral
 lel\, separate from one another. Once each stage receives the correct inpu
 ts and passes on the correct outputs\, the entire pipeline will act as int
 ended.</li>\n</ul>
END:VEVENT
BEGIN:VEVENT
SUMMARY:20 Cache blocks [cs_233_120221_213565]
DTSTART:20220404T130000Z
DTEND:20220404T170000Z
DTSTAMP:20220112T151600Z
UID:event-calendar-event-45311
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_45311
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220404T130000Z
DTEND:20220404T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50786
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50786
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220404T150000Z
DTEND:20220404T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50817
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50817
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:MINERALS AND ELECTROLYTE BALANCE EXTRA CREDIT DISCUSSION BOARD - D
 UE BEFORE 3PM CT ON MONDAY APRIL 4TH (FSHN 120 ONL Spring 2022 CRN57561) [
 fshn_120_120221_213078]
DTSTART:20220404T200000Z
DTEND:20220404T200000Z
DTSTAMP:20220110T194500Z
UID:event-assignment-override-12726
SEQUENCE:0
CLASS:PUBLIC
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=04&year=2022#assignment_366723
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 10 Part 2 [cs_233_120221_213565]
DTSTART:20220405T010000Z
DTEND:20220405T010000Z
DTSTAMP:20220112T032100Z
UID:event-assignment-367928
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:-------------------\nLearning Objectives\n-------------------\
 n\n* Learn the fundamentals of pipelining implementation\, including data 
 forwarding\, stalling\, and control hazards.\n\n-------------------------\
 nFiles that will be graded\n-------------------------\n\n* pipelined_machi
 ne.v\, A 3-stage pipelined implementation of a MIPS ISA subset machine.\n\
 n----------\nGuidelines\n----------\n\n* As always\, make sure to read ove
 r the handout carefully to understand the circuit before attempting to imp
 lement it. Take special note of the diagrams provided\, as they may give c
 lues into necessary additions/modifications.\n\n* Alongside the handout di
 agrams\, note that the starter files implement an unpiped version of their
  respective circuits. Your code will need to interact and build off the ex
 isting code\; use it to help in accomplishing your goals.\n\n* Unlike the 
 previous lab\, partners are once again allowed for this lab.\n\n----------
 ----------------------\nA 3-stage pipelined MIPS machine\n----------------
 ----------------\n\n \n\nUsing the provided Verilog code for a single-cyc
 le machine\, implement the 3-stage pipeline shown above in Verilog.\n\nFor
 warding\, stalling and flushing\n---------------------------------\n\nForw
 arding\, stalling\, and flushing all work similarly to the 5 stage pipelin
 e from lecture\, but we will have to make some logical modifications for a
  3 stage pipline.\n\nFor forwarding\, unlike the 5 stage pipeline from lec
 ture\, we don’t implement register file writes in the first half and rea
 ds in the second half. (Doing so would require the clock cycle to be signi
 ficantly extended). Therefore\, we need a forwarding path from the DE/MW p
 ipeline register providing inputs to the ALU. Additionally\, with only one
  forwarding path\, our forwarding unit will consist of only the boolean ex
 pressions for control signals ForwardA and ForwardB.\n\nBecause we can nev
 er actually write to $0\, make sure your expressions guard against forward
 ing $0.\n\nFor stalling\, we’ll stall in the same situations that the 5-
 stage pipeline from class does. In these cases\, we’ll need to repeat th
 e IF and DE stages in the next cycle and convert the MW stage of the next 
 cycle to a NOP. Our register modules have enable and synchronous reset inp
 uts\, which will come in handy for repeating and NOPing stages\, respectiv
 ely. The hazard unit will consist solely of the boolean expression for the
  Stall signal.\n\nRemember to check for Rt being a source in your expressi
 on and guard against stalling for $0.\n\nFor flushing\, we just need to co
 nvert the DE stage of the next cycle to a NOP\, since branches are resolve
 d in the DE stage. Once again\, the synchronous reset input of our registe
 r modules will come in handy.\n\n----------------------\nImplementation De
 tails\n----------------------\n\n* We suggest that you implement this assi
 gnment in four steps\, and we’ve provided test cases to facilitate testi
 ng each of these steps. Feel free to modify any of the assembly files to a
 dd your own test cases\, and they’ll get reassembled the next time you r
 un the appropriate make command (see the last section).\n\n* Pipeline the 
 datapath ignoring data dependences\, stalls\, and branches. Don’t worry 
 about adding the forwarding or stalling logic yet and don’t worry about 
 flushing for the moment (since the first input doesn’t have any hazards 
 or branches). Just implement the pipeline registers and make sure your cod
 e works for the no_hazards_or_flushing.s input. Once this is working\, sav
 e a copy\, so if you have a later bug you can always revert to this versio
 n.\n\n* Implement forwarding. You can test this code using forwarding.s. S
 ave a copy.\n\n* Implement stalling. You can test it using stalling.s. Sav
 e a copy.\n\n* Implement flushing. Test this code using flushing.s. Again\
 , save a copy.\n\n* Finally\, test using pipeline_test.s which includes bo
 th data hazards and taken branches\n\n* Although the pipeline registers ar
 e drawn as monolithic entities\, we’d suggest breaking this into a colle
 ction of smaller registers\, one for each signal.\n\n* Since some signals 
 will exist in multiple pipeline stages (e.g.\, wr_regnum) you should devel
 op a naming scheme that allows you to distinguish the names of the signals
 . One suggestion is to append _MW to the end of all the signals in the MW 
 stage.\n\n* To test if your pipelining is working correctly\, reduce the c
 lock period in the test bench from 12 to 4 and check if your code is still
  producing the right outputs\; an incorrectly pipelined machine will not. 
 (Something to think about: why does the DE stage only need 4 time units an
 d not 5?)\n\n-----\nNotes\n-----\n\n* The Verilog provided implements a si
 ngle-cycle MIPS machine which supports the following instructions: add\, s
 ub\, and\, or\, slt\, lw\, sw\, beq\n\n* There are some differences betwee
 n this machine and the one that we implemented in Lab 6\, including:\n\n* 
 We’re providing a totally different ALU\, which implements slt internall
 y and has a different encoding for its control inputs.\n\n* We’ve provid
 ed discrete adders so that we didn’t have to use ALUs for computing the 
 next PC.\n\n* The registers have a synchronous reset. This can be useful f
 or implementing stalling and flushing.\n\n* When reset\, the registers (ex
 cept register 0) all start with the value 0x10010000\, which is the base a
 ddress of the .data segment.\n\n* We’ve provided a working decoder\; thi
 s code uses some goofy Verilog syntax\, so don’t be distressed if it doe
 sn’t make sense to you. You don’t need to change it.\n\n* The control 
 for the next PC mux (PCSrc) is provided outside the decoder.\n\n* Also\, w
 e’ve added delays to all of the major components\, using Verilog’s del
 ay notation: #N means the output should be updated N time units after its 
 input changes. The latencies are as follows: instruction and data memories
  (3)\, adders/ALUs (2)\, register file read/write (1)\, decoder (2). Thus 
 the baseline machine needs a clock period ≥ 11 time units. Hence\, in pi
 pelined_machine_tb.v\, the clock alternates every 6 time units\, giving a 
 12 time unit clock period.\n\n------------------------------\nCompiling\, 
 Running and Testing\n------------------------------\n\nWe have given you a
  Makefile for setting up the test cases we have provided and compiling and
  running your machine.\n\nBefore you compile your code\, you need to set u
 p the test case you want to use. To do that\, use one of the following:\n\
 n* make no_hazards_or_flushing\n\n* make forwarding\n\n* make stalling\n\n
 * make flushing\n\n* make pipeline_test\n\nThen\, compile and run your cod
 e using the command make pipelined_machine. Notice that the assembly progr
 ams that we provide contain comments that specify the behavior of the prog
 ram. You can use these comments to verify that your pipelined machine has 
 indeed the expected behavior.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#assignment_367928
X-ALT-DESC;FMTTYPE=text/html:<h2>Learning Objectives</h2>\n<ol>\n<li>Learn
  the fundamentals of pipelining implementation\, including <strong>data fo
 rwarding</strong>\, <strong>stalling</strong>\, and <strong>control hazard
 s</strong>.</li>\n</ol>\n<h2>Files that will be graded</h2>\n<ul>\n<li>\n<
 code>pipelined_machine.v</code>\, A 3-stage pipelined implementation of a 
 MIPS ISA subset machine.</li>\n</ul>\n<h2>Guidelines</h2>\n<ul>\n<li>As al
 ways\, make sure to read over the handout carefully to understand the circ
 uit before attempting to implement it. Take special note of the diagrams p
 rovided\, as they may give clues into necessary additions/modifications.</
 li>\n<li>Alongside the handout diagrams\, note that the starter files impl
 ement an unpiped version of their respective circuits. Your code will need
  to interact and build off the existing code\; use it to help in accomplis
 hing your goals.</li>\n<li>Unlike the previous lab\, partners are once aga
 in allowed for this lab.</li>\n</ul>\n<h2>A 3-stage pipelined MIPS machine
 </h2>\n<p>&nbsp\;</p>\n<p>Using the provided Verilog code for a single-cyc
 le machine\, implement the 3-stage pipeline shown above in Verilog.</p>\n<
 h3>Forwarding\, stalling and flushing</h3>\n<p>Forwarding\, stalling\, and
  flushing all work similarly to the 5 stage pipeline from lecture\, but we
  will have to make some logical modifications for a 3 stage pipline.</p>\n
 <p>For forwarding\, unlike the 5 stage pipeline from lecture\, we don’t 
 implement register file writes in the first half and reads in the second h
 alf. (Doing so would require the clock cycle to be significantly extended)
 . Therefore\, we need a forwarding path from the DE/MW pipeline register p
 roviding inputs to the ALU. Additionally\, with only one forwarding path\,
  our forwarding unit will consist of only the boolean expressions for cont
 rol signals <code>ForwardA</code> and <code>ForwardB</code>.</p>\n<div cla
 ss="alert alert-danger" role="alert">Because we can never actually write t
 o <code>$0</code>\, make sure your expressions guard against forwarding <c
 ode>$0</code>.</div>\n<p>For stalling\, we’ll stall in the same situatio
 ns that the 5-stage pipeline from class does. In these cases\, we’ll nee
 d to repeat the IF and DE stages in the next cycle and convert the MW stag
 e of the next cycle to a NOP. Our register modules have enable and synchro
 nous reset inputs\, which will come in handy for repeating and NOPing stag
 es\, respectively. The hazard unit will consist solely of the boolean expr
 ession for the <code>Stall</code> signal.</p>\n<div class="alert alert-dan
 ger" role="alert">Remember to check for <code>Rt</code> being a source in 
 your expression and guard against stalling for <code>$0</code>.</div>\n<p>
 For flushing\, we just need to convert the DE stage of the next cycle to a
  NOP\, since branches are resolved in the DE stage. Once again\, the synch
 ronous reset input of our register modules will come in handy.</p>\n<h2>Im
 plementation Details</h2>\n<ol>\n<li>We suggest that you implement this as
 signment in four steps\, and we’ve provided test cases to facilitate tes
 ting each of these steps. Feel free to modify any of the assembly files to
  add your own test cases\, and they’ll get reassembled the next time you
  run the appropriate <code>make</code> command (see the last section).\n<o
 l style="list-style-type: lower-alpha\; padding-bottom: 0\;">\n<li>Pipelin
 e the datapath ignoring data dependences\, stalls\, and branches. Don’t 
 worry about adding the forwarding or stalling logic yet and don’t worry 
 about flushing for the moment (since the first input doesn’t have any ha
 zards or branches). Just implement the pipeline registers and make sure yo
 ur code works for the <code>no_hazards_or_flushing.s</code> input. Once th
 is is working\, save a copy\, so if you have a later bug you can always re
 vert to this version.</li>\n<li>Implement forwarding. You can test this co
 de using <code>forwarding.s</code>. Save a copy.</li>\n<li>Implement stall
 ing. You can test it using <code>stalling.s</code>. Save a copy.</li>\n<li
 >Implement flushing. Test this code using <code>flushing.s</code>. Again\,
  save a copy.</li>\n<li>Finally\, test using <code>pipeline_test.s</code> 
 which includes both data hazards and taken branches</li>\n</ol>\n</li>\n<l
 i>Although the pipeline registers are drawn as monolithic entities\, we’
 d suggest breaking this into a collection of smaller registers\, one for e
 ach signal.</li>\n<li>Since some signals will exist in multiple pipeline s
 tages (<i>e.g.</i>\, <code>wr_regnum</code>) you should develop a naming s
 cheme that allows you to distinguish the names of the signals. One suggest
 ion is to append <code>_MW</code> to the end of all the signals in the MW 
 stage.</li>\n<li>To test if your pipelining is working correctly\, <strong
 >reduce the clock period in the test bench from 12 to 4</strong> and check
  if your code is still producing the right outputs\; an incorrectly pipeli
 ned machine will not. (Something to think about: why does the DE stage onl
 y need 4 time units and not 5?)</li>\n</ol>\n<h2>Notes</h2>\n<ul>\n<li>The
  Verilog provided implements a single-cycle MIPS machine which supports th
 e following instructions: <code>add</code>\, <code>sub</code>\, <code>and<
 /code>\, <code>or</code>\, <code>slt</code>\, <code>lw</code>\, <code>sw</
 code>\, <code>beq</code>\n</li>\n<li>There are some differences between th
 is machine and the one that we implemented in Lab 6\, including:</li>\n<ul
 >\n<li>We’re providing a totally different ALU\, which implements <code>
 slt</code> internally and has a different encoding for its control inputs.
 </li>\n<li>We’ve provided discrete adders so that we didn’t have to us
 e ALUs for computing the next PC.</li>\n<li>The registers have a <strong>s
 ynchronous</strong> reset. This can be useful for implementing stalling an
 d flushing.</li>\n<li>When reset\, the registers (except register 0) all s
 tart with the value <code>0x10010000</code>\, which is the base address of
  the <code>.data</code> segment.</li>\n<li>We’ve provided a working deco
 der\; this code uses some goofy Verilog syntax\, so don’t be distressed 
 if it doesn’t make sense to you. You don’t need to change it.</li>\n<l
 i>The control for the next PC mux (<code>PCSrc</code>) is provided outside
  the decoder.</li>\n</ul>\n<li>Also\, we’ve added delays to all of the m
 ajor components\, using Verilog’s delay notation: #N means the output sh
 ould be updated N time units after its input changes. The latencies are as
  follows: instruction and data memories (3)\, adders/ALUs (2)\, register f
 ile read/write (1)\, decoder (2). Thus the baseline machine needs a clock 
 period ≥ 11 time units. Hence\, in <code>pipelined_machine_tb.v</code>\,
  the clock alternates every 6 time units\, giving a 12 time unit clock per
 iod.</li>\n</ul>\n<h2>Compiling\, Running and Testing</h2>\n<p>We have giv
 en you a Makefile for setting up the test cases we have provided and compi
 ling and running your machine.</p>\n<p><strong>Before you compile your cod
 e\, you need to set up the test case you want to use.</strong> To do that\
 , use one of the following:</p>\n<ul>\n<li><code>make no_hazards_or_flushi
 ng</code></li>\n<li><code>make forwarding</code></li>\n<li><code>make stal
 ling</code></li>\n<li><code>make flushing</code></li>\n<li><code>make pipe
 line_test</code></li>\n</ul>\n<p>Then\, compile and run your code using th
 e command <code>make pipelined_machine</code>. Notice that the assembly pr
 ograms that we provide contain comments that specify the behavior of the p
 rogram. You can use these comments to verify that your pipelined machine h
 as indeed the expected behavior.</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:21 Cache associativity [cs_233_120221_213565]
DTSTART:20220406T130000Z
DTEND:20220406T170000Z
DTSTAMP:20220112T151600Z
UID:event-calendar-event-45312
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_45312
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220406T130000Z
DTEND:20220406T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50787
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50787
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220406T150000Z
DTEND:20220406T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50818
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50818
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220406T160000Z
DTEND:20220406T210000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39884
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=04&year=2022#calendar_event_39884
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:TUTORING CENTER OFFICE HOURS FOR FSHN 120 [fshn_120_120221_213078]
DTSTART:20220407T160000Z
DTEND:20220407T210000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-39865
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:201 772 908] (https://illinoi
 s.zoom.us/j/201772908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=04&year=2022#calendar_event_39865
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/201772
 908?pwd=cXJCVElqZG80c2xGVStxa2VpUkwvQT09" target="_blank">Click here to jo
 in Zoom Meeting:201 772 908</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:IN PERSON CLASS T/R POLLING QUESTIONS (NO AUDIO OR VIDEO) [fshn_12
 0_120221_213078]
DTSTART:20220407T170000Z
DTEND:20220407T190000Z
DTSTAMP:20220106T181700Z
UID:event-calendar-event-40088
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:966 4014 0173] (https://illin
 ois.zoom.us/j/96640140173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09)
LOCATION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=04&year=2022#calendar_event_40088
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/966401
 40173?pwd=OUZsNllBcDRXNFFtd09QUlVpd2R4UT09" target="_blank">Click here to 
 join Zoom Meeting:966 4014 0173</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Quiz 9 [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220408T000000
DTEND;VALUE=DATE:20220408T000000
DTSTAMP:20220112T142900Z
UID:event-assignment-367971
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Practice Quiz 9 is available and mirrors the format and conten
 t of Quiz 9 exactly. Quiz 9 focuses on your understanding of pipelines.\n\
 nReview Video\n------------\n\nVideo: https://mediaspace.illinois.edu/medi
 a/t/1_vxka9i0t\n\nTime stamps for particular types of problems.\n\n* [FDEM
 W diagrams] (https://mediaspace.illinois.edu/media/t/1_vxka9i0t)\n\n* [Pip
 eline Merge/Split Optimizations] (https://mediaspace.illinois.edu/media/t/
 1_k4f4lae5?st=306)\n\n* [Forwarding MUXes] (https://mediaspace.illinois.ed
 u/media/t/1_k4f4lae5?st=752)\n\n* [Datapaths] (https://mediaspace.illinois
 .edu/media/t/1_k4f4lae5?st=901)\n\n* [Execution Time] (https://mediaspace.
 illinois.edu/media/t/1_k4f4lae5?st=1142)\n\n* [Latency and Throughput (dif
 ferent video - You will have one question on this)] (https://mediaspace.il
 linois.edu/media/t/1_fcxco3a4?st=161)\n\nExtra video: [Live Example: Execu
 tion Time problems] (https://mediaspace.illinois.edu/media/t/1_k4f4lae5)
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#assignment_367971
X-ALT-DESC;FMTTYPE=text/html:<p>Practice Quiz 9 is available and mirrors t
 he format and content of Quiz 9 exactly. Quiz 9 focuses on your understand
 ing of pipelines.</p>\n<h3>Review Video</h3>\n<p>Video: <a href="https://m
 ediaspace.illinois.edu/media/t/1_vxka9i0t" target="_blank">https://mediasp
 ace.illinois.edu/media/t/1_vxka9i0t</a></p>\n<p>Time stamps for particular
  types of problems.</p>\n<ol>\n<li><a href="https://mediaspace.illinois.ed
 u/media/t/1_vxka9i0t" target="_blank">FDEMW diagrams</a></li>\n<li><a href
 ="https://mediaspace.illinois.edu/media/t/1_k4f4lae5?st=306" target="_blan
 k">Pipeline Merge/Split Optimizations</a></li>\n<li><a href="https://media
 space.illinois.edu/media/t/1_k4f4lae5?st=752" target="_blank">Forwarding M
 UXes</a></li>\n<li><a href="https://mediaspace.illinois.edu/media/t/1_k4f4
 lae5?st=901" target="_blank">Datapaths</a></li>\n<li><a href="https://medi
 aspace.illinois.edu/media/t/1_k4f4lae5?st=1142" target="_blank">Execution 
 Time</a></li>\n<li><a href="https://mediaspace.illinois.edu/media/t/1_fcxc
 o3a4?st=161" target="_blank">Latency and Throughput (different video - You
  will have one question on this)</a></li>\n</ol>\n<p>Extra video: <a href=
 "https://mediaspace.illinois.edu/media/t/1_k4f4lae5" target="_blank">Live 
 Example: Execution Time problems</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Weekly Review 5 [cs_222_120221_214564]
DTSTART;VALUE=DATE:20220408T000000
DTEND;VALUE=DATE:20220408T000000
DTSTAMP:20220311T214000Z
UID:event-assignment-383689
SEQUENCE:0
CLASS:PUBLIC
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18658&mon
 th=04&year=2022#assignment_383689
END:VEVENT
BEGIN:VEVENT
SUMMARY:22 Cache memory access patterns [cs_233_120221_213565]
DTSTART:20220411T130000Z
DTEND:20220411T170000Z
DTSTAMP:20220112T151600Z
UID:event-calendar-event-45314
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_45314
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220411T130000Z
DTEND:20220411T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50788
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50788
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220411T150000Z
DTEND:20220411T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50819
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50819
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:NUTRIENTS ESSENTIAL TO KEY BODY FUNCTIONS EXTRA CREDIT DISCUSSION 
 BOARD - DUE BEFORE 3PM CT ON MONDAY APRIL 11TH (FSHN 120 ONL Spring 2022 C
 RN57561) [fshn_120_120221_213078]
DTSTART:20220411T200000Z
DTEND:20220411T200000Z
DTSTAMP:20220110T194700Z
UID:event-assignment-override-12727
SEQUENCE:0
CLASS:PUBLIC
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=04&year=2022#assignment_366722
END:VEVENT
BEGIN:VEVENT
SUMMARY:23 cache writing/prefetching [cs_233_120221_213565]
DTSTART:20220413T130000Z
DTEND:20220413T170000Z
DTSTAMP:20220112T151600Z
UID:event-calendar-event-45315
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_45315
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220413T130000Z
DTEND:20220413T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50789
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50789
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220413T150000Z
DTEND:20220413T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50820
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50820
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 11 Part 1 [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220415T000000
DTEND;VALUE=DATE:20220415T000000
DTSTAMP:20220112T032100Z
UID:event-assignment-367929
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:-------------------\nLearning Objectives\n-------------------\
 n\n* Basic Cache Design and Implementation\n\n-------------------------\nF
 iles that will be graded\n-------------------------\n\n* simplecache.cpp: 
 contains your find and insert implementations.\n\n----------\nGuidelines\n
 ----------\n\nYou may want to spend some time drawing out data structures 
 before you begin coding.\n\nFollow good programming practices: comment you
 r code\, label variables and functions according to their purpose\, use a 
 debugger\, and stick to a single coding style.\n\n------------\nSimple Cac
 he\n------------\n\nFor part 1\, you have to finish simplecache.cpp. A hea
 der file\, simplecache.h\, has been provided to you with a simplified cach
 e store and some public functions that you can use. Read the file to under
 stand how the Simple Cache Simulator works. We have also provided simpleca
 che_main.cpp\, which provides some initial test cases and some more commen
 ts to help you understand how the simplecache simulator works.  \n\nYou h
 ave to write the two basic functions a cache should be capable of:\n\n* Fi
 nd: This function simulates a cache hit/miss detector. Given a tag\, index
 \, and offset combination\, the function should indicate whether that comb
 ination would be a hit or a miss. When given a set index\, you will need t
 o check all cache blocks in the set to see if any of the blocks have a tag
  that matches the tag you are looking for. If the tag matches AND the bloc
 k is valid\, you have a cache hit\, and the function should return the cor
 rect byte of data from the cache block. If a tag match cannot be found or 
 the found cache block is invalid\, you have a cache miss\, and the functio
 n should return 0xdeadbeef\, the universal slaughterhouse ‘bad address
 ’ code.\n\n* Insert: This function simulates what would happen when you 
 copy a block of data from main memory to the cache after a cache miss. Not
 ice that this function does not have 'block_offset' as an argument because
  you copy entire cache blocks (i.e.\, all offsets in a block) when you cop
 y a cache block. When given a set index\, you will need to identify the bl
 ocks associated with that set and search for an invalid cache block. If an
  invalid cache block is found\, replace it with the block of data being in
 serted and return. If there is no invalid cache block\, replace the 0th bl
 ock in the set (overwriting whatever was in it). You can perform these rep
 lacements by calling the replace function provided in simplecache.h for th
 e cache block you identified (e.g.\, block_to_replace.replace(tag\, data)\
 ;). Note: This is NOT the Least-Recently Used replacement policy that we'v
 e taught you in class\, but is instead a simplified (and admittedly poor) 
 replacement policy.\n\nThe purpose of this exercise is to get you used to 
 how the cache hierarchy and some basic cache properties work: sets\, block
 s\, bytes\, indices\, tags\, etc. Keep in mind that this is a (heavily) si
 mplified version of Part 2\, so understanding it will make it easier for y
 ou to understand the subtler aspects of caching (as well as help you for t
 he exam and future labs).\n\n---------------------\nCompiling and Testing\
 n---------------------\n\nCompile and run using the following commands:\n\
 nmake simplecache\n\n./simplecache\n\nThe expected output is in the commen
 ts in simplecache_main.cpp\n\n* Our test programs will try to break your c
 ode. You are encouraged to create your own test scenarios to verify the co
 rrectness of your code. \n\n* Try varying the number of set indices or th
 e set associativity of the cache in simplecache_main.cpp.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#assignment_367929
X-ALT-DESC;FMTTYPE=text/html:<h2>Learning Objectives</h2>\n<ol>\n<li>Basic
  Cache Design and Implementation</li>\n</ol>\n<h2>Files that will be grade
 d</h2>\n<ul>\n<li>\n<code>simplecache.cpp</code>: contains your find and i
 nsert implementations.</li>\n</ul>\n<h2>Guidelines</h2>\n<p>You may want t
 o spend some time drawing out data structures before you begin coding.</p>
 \n<p>Follow good programming practices: comment your code\, label variable
 s and functions according to their purpose\, use a debugger\, and stick to
  a single coding style.</p>\n<h2>Simple Cache</h2>\n<p>For part 1\, you ha
 ve to finish <code>simplecache.cpp</code>. A header file\, <code>simplecac
 he.h</code>\, has been provided to you with a simplified cache store and s
 ome public functions that you can use. Read the file to understand how the
  Simple Cache Simulator works. We have also provided simplecache_main.cpp\
 , which provides some initial test cases and some more comments to help yo
 u understand how the simplecache simulator works. &nbsp\;</p>\n<p>You have
  to write the two basic functions a cache should be capable of:</p>\n<ol>\
 n<li>\n<em>Find</em>: This function simulates a cache hit/miss detector. G
 iven a tag\, index\, and offset combination\, the function should indicate
  whether that combination would be a hit or a miss. When given a set index
 \, you will need to check all cache blocks in the set to see if any of the
  blocks have a tag that matches the tag you are looking for. If the tag ma
 tches AND the <strong><span style="color: #e03e2d\;">block is valid</span>
 </strong>\, you have a cache hit\, and the function should return the corr
 ect byte of data from the cache block. If a tag match cannot be found or t
 he found cache block is invalid\, you have a cache miss\, and the function
  should return <code>0xdeadbeef</code>\, the universal <span style="text-d
 ecoration: line-through\;">slaughterhouse</span> ‘bad address’ code.</
 li>\n<li>\n<em>Insert</em>: This function simulates what would happen when
  you copy a block of data from main memory to the cache after a cache miss
 . Notice that this function does not have 'block_offset' as an argument be
 cause you copy entire cache blocks (i.e.\, all offsets in a block) when yo
 u copy a cache block. When given a set index\, you will need to identify t
 he blocks associated with that set and search for an invalid cache block. 
 If an invalid cache block is found\, replace it with the block of data bei
 ng inserted and return. If there is no invalid cache block\, replace the 0
 th block in the set (overwriting whatever was in it). You can perform thes
 e replacements by calling the <code>replace</code> function provided in <c
 ode>simplecache.h</code> for the cache block you identified (e.g.\, <code>
 block_to_replace.replace(tag\, data)\;</code>). Note: This is NOT the Leas
 t-Recently Used replacement policy that we've taught you in class\, but is
  instead a simplified (and admittedly poor) replacement policy.</li>\n</ol
 >\n<p>The purpose of this exercise is to get you used to how the cache hie
 rarchy and some basic cache properties work: sets\, blocks\, bytes\, indic
 es\, tags\, etc. Keep in mind that this is a (heavily) simplified version 
 of Part 2\, so understanding it will make it easier for you to understand 
 the subtler aspects of caching (as well as help you for the exam and futur
 e labs).</p>\n<h2>Compiling and Testing</h2>\n<p>Compile and run using the
  following commands:</p>\n<p><code>make simplecache</code></p>\n<p><code>.
 /simplecache</code></p>\n<p>The expected output is in the comments in <cod
 e>simplecache_main.cpp</code></p>\n<ul>\n<li>Our test programs will try to
  break your code. You are encouraged to create your own test scenarios to 
 verify the correctness of your code.&nbsp\;</li>\n<li>Try varying the numb
 er of set indices or the set associativity of the cache in <code>simplecac
 he_main.cpp</code>.</li>\n</ul>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Weekly Review 6 [cs_222_120221_214564]
DTSTART;VALUE=DATE:20220415T000000
DTEND;VALUE=DATE:20220415T000000
DTSTAMP:20220311T214100Z
UID:event-assignment-383690
SEQUENCE:0
CLASS:PUBLIC
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18658&mon
 th=04&year=2022#assignment_383690
END:VEVENT
BEGIN:VEVENT
SUMMARY:24 Cache concious code [cs_233_120221_213565]
DTSTART:20220418T130000Z
DTEND:20220418T170000Z
DTSTAMP:20220112T151900Z
UID:event-calendar-event-45331
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_45331
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220418T130000Z
DTEND:20220418T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50790
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50790
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220418T150000Z
DTEND:20220418T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50821
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50821
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:NUTRIENTS AND HEALTHY TISSUES EXTRA CREDIT DISCUSSION 3PM CT ON MO
 NDAY APRIL 18TH (FSHN 120 ONL Spring 2022 CRN57561) [fshn_120_120221_21307
 8]
DTSTART:20220418T200000Z
DTEND:20220418T200000Z
DTSTAMP:20220110T194900Z
UID:event-assignment-override-12729
SEQUENCE:0
CLASS:PUBLIC
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=04&year=2022#assignment_366721
END:VEVENT
BEGIN:VEVENT
SUMMARY:PRE-EXAM 3 REFLECTION [fshn_120_120221_213078]
DTSTART:20220418T200000Z
DTEND:20220418T200000Z
DTSTAMP:20220309T152800Z
UID:event-assignment-366766
SEQUENCE:0
CLASS:PUBLIC
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=04&year=2022#assignment_366766
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 11 Part 2 [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220418T000000
DTEND;VALUE=DATE:20220418T000000
DTSTAMP:20220112T032100Z
UID:event-assignment-367930
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:-------------------\nLearning Objectives\n-------------------\
 n\n* Basic Cache Design and Implementation\n\n-------------------------\nF
 iles that will be graded\n-------------------------\n\n*\n\ncacheblock.cpp
 \, cacheconfig.cpp\, cachesimulator.cpp\, and utils.cpp: contain your cach
 e implementation. \n\n----------\nGuidelines\n----------\n\n* You may wan
 t to spend some time drawing out data structures before you begin coding.\
 n\n* Follow good programming practices: comment your code\, label variable
 s and functions according to their purpose\, use a debugger\, and stick to
  a single coding style. \n\n* Our test programs will try to break your co
 de. You are encouraged to create your own test scenarios to verify the cor
 rectness of your code. One good test is to run your cache with different c
 ache block lengths and sizes\, with different levels of associativity\, an
 d with different writing policies. We strongly recommend following the ste
 ps listed in the Specifics section. Writing small portions and then testin
 g them immediately will make your life a lot easier.\n\n---------------\nC
 ache Simulator\n---------------\n\nA cache simulator is a program that is 
 used by computer architects to estimate the performance of caches of diffe
 rent sizes for a given workload. A key idea of a simulator is that it is n
 ot a cache design itself\; it is instead a model. So we design a simulator
  slightly differently than a cache. For instance\, keeping track of flag v
 alues and the such are done in ways that are easy to do in software\, and 
 are not implemented how they actually are in hardware. Also\, while cache 
 indices are tracked implicitly in hardware (they are intrinsic to the circ
 uit design)\, in the simulator we explicitly store the index of each cache
  block within the block for simplicity. For the second deadline\, you will
  be completing a program to simulate a cache for a processor. The simulato
 r will read in a trace of memory instructions (32-bit addresses) that has 
 two kinds of operations:\n\n* R x: Reads the data at location x.\n\n* A x 
 y z: Reads the data at memory locations y and z (in that order)\, adds the
 m\, and writes the result into location x.\n\nAdditionally\, the simulator
  will determine which are cache hits and which are cache misses. The patte
 rn of writing data to memory will be based on the various paradigms that y
 ou have learned in class. We have provided some functions to get you start
 ed so that you do not need to worry about the specific implementation of h
 ow we store and manage the data (though you are welcome to go through it f
 or your own interest).\n\nWe have provided some functions to get you start
 ed so that you do not need to worry about the specific implementation of h
 ow we store and manage the data (though you are welcome to go through it f
 or your own interest).\n\nYour cache should be able to handle variable tot
 al sizes\, variable block sizes and degrees of associativity\, and differe
 nt writing paradigms:\n\n* The block size will be a power of two.\n\n* The
  cache size does not need to be a power of two.\n\n* The number of sets wi
 ll be a power of two to allow for easy indexing.\n\n* The number of blocks
  per set (the associativity) does not need to be a power of two.\n\nFor ex
 ample\, 20 cache blocks with 5-way associativity will mean 4 sets.\n\nFor 
 associative caches\, you should implement a Least Recently Used replacemen
 t policy. LRU can be implemented in a variety of ways. For this lab\, the 
 simulator keeps a “clock” (the _use_clock member of CacheSimulator)\, 
 which is just a counter of accesses. Each block has a last_used_time membe
 r. When a block is accessed\, you increment the clock and update the last 
 used time of the block. For LRU replacement\, the block in a set with the 
 oldest (i.e. smallest) last used time is the LRU block.\n\n---------\nSpec
 ifics\n---------\n\nThe simulator is split across a few classes. You shoul
 d take a look at all the header files to see what functionality each class
  provides\, and how you can use that functionality in your implementation.
 \n\nWe’ve provided both unit tests (in cacheblock_test.cpp\, cacheconfig
 _test.cpp and utils_test.cpp) and full simulator tests (in the trace_files
  directory). As always\, you should augment these tests with your own. You
  can compile and run the unit tests using the following commands:\n\nmake 
 unit_tests\n\n./unit_tests\n\nThe details of the simulator tests and how t
 o run them are in the next section. Here’s the order we very strongly su
 ggest following for completing this lab\; the key idea is completing a por
 tion at a time and then testing it immediately (and fixing any bugs).\n\n*
  Implement the CacheConfig constructor in cacheconfig.cpp\, which computes
  and stores the number of bits in each portion of the address for a specif
 ic cache configuration. Some handy functions such as log_2 are available i
 n utils.h. Remember that our addresses are 32 bits. Test it using the unit
  tests. (see CacheConfig.NumBits)\n\n* Implement extract_block_offset\, ex
 tract_index and extract_tag in utils.cpp. Some handy functions are availab
 le in utils.h. Test it using the unit tests. (see Utils.Extract and Utils.
 Extract32BitTag) Hint: to get a bitstring of N 1s\, you can do (1 << N) - 
 1. However\, shifting by an amount greater than or equal to the width of y
 our type (in this case\, 32 bits) is undefined behavior\, so make sure you
  don’t run into that\, hence the Utils.Extract32BitTag test.\n\n* Implem
 ent the get_address function in cacheblock.cpp\, which computes the starti
 ng memory address of a block. Test it using the unit tests. (see CacheBloc
 k.GetAddress) At this point\, all of our provided unit tests should pass.\
 n\n* Implement the find_block function in cachesimulator.cpp\, which searc
 hes for the block containing a particular address in the cache (if such a 
 block exists). The function comment has implementation details.\n\n* Imple
 ment the bring_block_into_cache function in cachesimulator.cpp\, which loa
 ds a block from memory into the cache. The function comment has implementa
 tion details.\n\n* Implement the read_access function in cachesimulator.cp
 p. The function comment has implementation details\, and our LRU implement
 ation is detailed in the previous section.\n\n* Try out the simulator with
  the basic\, block\, associativity\, and lru traces\; details are in the n
 ext section. Make sure cache reads work correctly for a variety of cache s
 izes\, block sizes and associativities.\n\n* Implement the write_access fu
 nction in cachesimulator.cpp. The function comment has implementation deta
 ils.\n\n* Try out the simulator with the write_back and write_allocate tra
 ces to make sure the writing policies are implemented correctly.\n\n* For 
 final testing\, run your simulator against gcc-trace.verbose and then gcc-
 trace. Unfortunately\, the sheer size of these traces make debugging diffi
 cult\, but they at least tell you if your simulator is behaving correctly 
 for complicated traces.\n\n---------------------\nRunning the simulator\n-
 --------------------\n\nCompile and run the simulator as follows:\n\nmake 
 cachesim\n\n./cachesim <trace_file> <data_file> <cache_size> <block_size> 
 <associativity> <write_back> <write_allocate> [verbose]\n\n* trace_file is
  a file containing the loads and adds the simulator will run.\n\n* data_fi
 le is a file containing the initial values stored in each memory location.
 \n\n* cache_size is an integer representing the cache size in words.\n\n* 
 block_size is an integer representing the number of words in each block.\n
 \n* associativity is an integer representing the associativity of the cach
 e.\n\n* write_back is a 1 or a 0\, if the cache is a write-back cache or n
 ot\, respectively.\n\n* write_allocate is a 1 or a 0\, if the cache alloca
 tes on writes or not\, respectively\n\n* verbose is an optional argument. 
 If you include verbose as the eighth argument\, the code will print out th
 e result of each operation\n\nFor example:\n\n./cachesim trace_files/lru d
 ata_files/data 4 1 4 0 0 verbose\n\n---------------\nProvided Traces\n----
 -----------\n\nWe’ve provided some small traces to facilitate testing an
 d debugging. Each trace should be run against the data file data_files/dat
 a\, and you can use the verbose parameter to see exactly how your cache is
  behaving. You should test your cache’s behavior for a variety of cache 
 sizes\, block sizes\, associativities and write policies. We recommend cre
 ating more small traces to cover other scenarios.\n\n* basic consist of 5 
 accesses to the same address (the first should miss\, the rest should hit)
 .\n\n* block consists of accesses to sequential addresses\; run this trace
  varying the block size of the cache (the first access to a block should m
 iss\, the rest should hit\; so for a sufficiently large block size\, all a
 ccesses but the first should be hits).\n\n* associativity accesses two mem
 ory locations alternately. Depending on the cache configuration\, this cou
 ld result in all 4 accesses being misses\, only the first two being misses
 \, or only the first one being a miss.\n\n* lru tests LRU eviction. If you
  run with a cache size of 4\, a block size of 1 and an associativity of 4\
 , the first four accesses should miss\, the next one should hit (making 1 
 the LRU block)\, the next one should miss\, and the last three should hit\
 , indicating the LRU block got evicted.\n\n* write_back tests write-back v
 s. write-through behavior. The number of memory writes will vary depending
  on that\, and you should also check the data values to ensure dirty block
 s are written back correctly.\n\n* write_allocate tests write-allocate vs.
  write-around behavior\, which will cause the second access to either be a
  hit or a miss.\n\nWe’ve also provided a large trace (gcc-trace) and a p
 refix of it (gcc-trace.verbose) to verify your simulator’s behavior. Exp
 ected outputs for a variety of different cache configurations are provided
  in the test_cases directory in the files gcc-trace.output and gcc-trace.v
 erbose.output. These files contain the commands to run each configuration\
 , and you can then use diff to compare your output to the expected output.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#assignment_367930
X-ALT-DESC;FMTTYPE=text/html:<h2>Learning Objectives</h2>\n<ol>\n    <li>B
 asic Cache Design and Implementation</li>\n</ol>\n<h2>Files that will be g
 raded</h2>\n<ul>\n    <li>\n        <p><code><em>cacheblock.cpp</em>\, <em
 >cacheconfig.cpp</em>\, <em>cachesimulator.cpp</em>\, and <em>utils.cpp</e
 m></code>: contain your cache implementation.&nbsp\;</p>\n    </li>\n</ul>
 \n<h2>Guidelines</h2>\n<ul>\n    <li>You may want to spend some time drawi
 ng out data structures before you begin coding.</li>\n    <li>Follow good 
 programming practices: comment your code\, label variables and functions a
 ccording to their purpose\, use a debugger\, and stick to a single coding 
 style.&nbsp\;</li>\n    <li>Our test programs will try to break your code.
  You are encouraged to create your own test scenarios to verify the correc
 tness of your code. One good test is to run your cache with different cach
 e block lengths and sizes\, with different levels of associativity\, and w
 ith different writing policies. We <strong>strongly recommend</strong> fol
 lowing the steps listed in the Specifics section. Writing small portions a
 nd then testing them immediately will make your life a lot easier.</li>\n<
 /ul>\n<h2>Cache Simulator</h2>\n<p>A cache simulator is a program that is 
 used by computer architects to estimate the performance of caches of diffe
 rent sizes for a given workload. A key idea of a simulator is that <em>it 
 is not a cache design itself</em>\; it is instead a model. So we design a 
 simulator slightly differently than a cache. For instance\, keeping track 
 of flag values and the such are done in ways that are easy to do in softwa
 re\, and are not implemented how they actually are in hardware. Also\, whi
 le cache indices are tracked implicitly in hardware (they are intrinsic to
  the circuit design)\, in the simulator we explicitly store the index of e
 ach cache block within the block for simplicity. For the second deadline\,
  you will be completing a program to simulate a cache for a processor. The
  simulator will read in a trace of memory instructions (32-bit addresses) 
 that has two kinds of operations:</p>\n<ul>\n    <li>R x: Reads the data a
 t location x.</li>\n    <li>A x y z: Reads the data at memory locations y 
 and z (in that order)\, adds them\, and writes the result into location x.
 </li>\n</ul>\n<p>Additionally\, the simulator will determine which are cac
 he hits and which are cache misses. The pattern of writing data to memory 
 will be based on the various paradigms that you have learned in class. We 
 have provided some functions to get you started so that you do not need to
  worry about the specific implementation of how we store and manage the da
 ta (though you are welcome to go through it for your own interest).</p>\n<
 p><strong>We have provided some functions to get you started so that you d
 o not need to worry about the specific implementation of how we store and 
 manage the data</strong> (though you are welcome to go through it for your
  own interest).</p>\n<p>Your cache should be able to handle variable total
  sizes\, variable block sizes and degrees of associativity\, and different
  writing paradigms:</p>\n<ul>\n    <li>The block size <strong>will </stron
 g>be a power of two.</li>\n    <li>The cache size <strong>does not</strong
 > need to be a power of two.</li>\n    <li>The number of sets <strong>will
  </strong>be a power of two to allow for easy indexing.</li>\n    <li>The 
 number of blocks per set (the associativity) <strong>does not</strong> nee
 d to be a power of two.</li>\n</ul>\n<p>For example\, 20 cache blocks with
  5-way associativity will mean 4 sets.</p>\n<p>For associative caches\, yo
 u should implement a Least Recently Used replacement policy. LRU can be im
 plemented in a variety of ways. For this lab\, the simulator keeps a “cl
 ock” (the <code>_use_clock</code> member of <code>CacheSimulator</code>)
 \, which is just a counter of accesses. Each block has a <code>last_used_t
 ime</code> member. When a block is accessed\, you increment the clock and 
 update the last used time of the block. For LRU replacement\, the block in
  a set with the oldest (i.e. smallest) last used time is the LRU block.</p
 >\n<h2>Specifics</h2>\n<p>The simulator is split across a few classes. You
  should take a look at all the header files to see what functionality each
  class provides\, and how you can use that functionality in your implement
 ation.</p>\n<p>We’ve provided both unit tests (in <code>cacheblock_test.
 cpp\, cacheconfig_test.cpp</code> and <code>utils_test.cpp</code>) and ful
 l simulator tests (in the <code>trace_files</code> directory). As always\,
  you should augment these tests with your own. You can compile and run the
  unit tests using the following commands:</p>\n<p><code>make unit_tests</c
 ode></p>\n<p><code>./unit_tests</code></p>\n<p>The details of the simulato
 r tests and how to run them are in the next section. Here’s the order we
  <strong>very strongly</strong> suggest following for completing this lab\
 ; the key idea is completing a portion at a time and then testing it immed
 iately (and fixing any bugs).</p>\n<ol>\n    <li>Implement the <code>Cache
 Config</code> constructor in <code>cacheconfig.cpp</code>\, which computes
  and stores the number of bits in each portion of the address for a specif
 ic cache configuration. Some handy functions such as <code>log_2</code> ar
 e available in <code>utils.h</code>. Remember that our addresses are 32 bi
 ts. <strong>Test it using the unit tests.</strong> (see <code>CacheConfig.
 NumBits</code>)</li>\n    <li>Implement <code>extract_block_offset</code>\
 , <code>extract_index</code> and <code>extract_tag</code> in <code>utils.c
 pp</code>. Some handy functions are available in <code>utils.h</code>. Tes
 t it using the unit tests. (see <code>Utils.Extract</code> and <code>Utils
 .Extract32BitTag</code>) <em>Hint</em>: to get a bitstring of N 1s\, you c
 an do <code>(1 &lt\;&lt\; N) - 1</code>. However\, shifting by an amount g
 reater than or equal to the width of your type (in this case\, 32 bits) is
  undefined behavior\, so make sure you don’t run into that\, hence the <
 code>Utils.Extract32BitTag</code> test.</li>\n    <li>Implement the <code>
 get_address</code> function in <code>cacheblock.cpp</code>\, which compute
 s the <em>starting </em>memory address of a block. <strong>Test it using t
 he unit tests</strong>. (see <code>CacheBlock.GetAddress)</code> <strong>A
 t this point\, all of our provided unit tests should pass.</strong>\n</li>
 \n    <li>Implement the <code>find_block</code> function in <code>cachesim
 ulator.cpp</code>\, which searches for the block containing a particular a
 ddress in the cache (if such a block exists). The function comment has imp
 lementation details.</li>\n    <li>\n<strong></strong>Implement the <code>
 bring_block_into_cache</code> function in <code>cachesimulator.cpp</code>\
 , which loads a block from memory into the cache. The function comment has
  implementation details.</li>\n    <li>Implement the <code>read_access</co
 de> function in <code>cachesimulator.cpp</code>. The function comment has 
 implementation details\, and our LRU implementation is detailed in the pre
 vious section.</li>\n    <li>Try out the simulator with the <code>basic</c
 ode>\, <code>block</code>\, <code>associativity</code>\, and <code>lru</co
 de> traces\; details are in the next section. Make sure cache reads work c
 orrectly for a variety of cache sizes\, block sizes and associativities.</
 li>\n    <li>Implement the <code>write_access</code> function in <code>cac
 hesimulator.cpp</code>. The function comment has implementation details.</
 li>\n    <li>Try out the simulator with the <code>write_back</code> and <c
 ode>write_allocate</code> traces to make sure the writing policies are imp
 lemented correctly.</li>\n    <li>For final testing\, run your simulator a
 gainst <code>gcc-trace.verbose</code> and then <code>gcc-trace</code>. Unf
 ortunately\, the sheer size of these traces make debugging difficult\, but
  they at least tell you if your simulator is behaving correctly for compli
 cated traces.</li>\n</ol>\n<h2>Running the simulator</h2>\n<p>Compile and 
 run the simulator as follows:</p>\n<p><code>make cachesim</code></p>\n<p><
 code>./cachesim &lt\;trace_file&gt\; &lt\;data_file&gt\; &lt\;cache_size&g
 t\; &lt\;block_size&gt\; &lt\;associativity&gt\; &lt\;write_back&gt\; &lt\
 ;write_allocate&gt\; [verbose]</code></p>\n<ul>\n    <li>\n<code>trace_fil
 e</code> is a file containing the loads and adds the simulator will run.</
 li>\n    <li>\n<code>data_file</code> is a file containing the initial val
 ues stored in each memory location.</li>\n    <li>\n<code>cache_size</code
 > is an integer representing the cache size in words.</li>\n    <li>\n<cod
 e>block_size</code> is an integer representing the number of words in each
  block.</li>\n    <li>associativity is an integer representing the associa
 tivity of the cache.</li>\n    <li>\n<code>write_back</code> is a <code>1<
 /code> or a <code>0</code>\, if the cache is a write-back cache or not\, r
 espectively.</li>\n    <li>\n<code>write_allocate</code> is a <code>1</cod
 e> or a <code>0</code>\, if the cache allocates on writes or not\, respect
 ively</li>\n    <li>\n<code>verbose </code>is an optional argument. If you
  include <code>verbose</code> as the eighth argument\, the code will print
  out the result of each operation</li>\n</ul>\n<p>For example:</p>\n<p><co
 de>./cachesim trace_files/lru data_files/data 4 1 4 0 0 verbose</code></p>
 \n<h2>Provided Traces</h2>\n<p>We’ve provided some small traces to facil
 itate testing and debugging. Each trace should be run against the data fil
 e <code>data_files/data</code>\, and you can use the verbose parameter to 
 see exactly how your cache is behaving. You should test your cache’s beh
 avior for a variety of cache sizes\, block sizes\, associativities and wri
 te policies. We recommend creating more small traces to cover other scenar
 ios.</p>\n<ul>\n    <li>\n<code>basic</code> consist of 5 accesses to the 
 same address (the first should miss\, the rest should hit).</li>\n    <li>
 \n<code>block</code> consists of accesses to sequential addresses\; run th
 is trace varying the block size of the cache (the first access to a block 
 should miss\, the rest should hit\; so for a sufficiently large block size
 \, all accesses but the first should be hits).</li>\n    <li>\n<code>assoc
 iativity</code> accesses two memory locations alternately. Depending on th
 e cache configuration\, this could result in all 4 accesses being misses\,
  only the first two being misses\, or only the first one being a miss.</li
 >\n    <li>\n<code>lru</code> tests LRU eviction. If you run with a cache 
 size of 4\, a block size of 1 and an associativity of 4\, the first four a
 ccesses should miss\, the next one should hit (making 1 the LRU block)\, t
 he next one should miss\, and the last three should hit\, indicating the L
 RU block got evicted.</li>\n    <li>\n<code>write_back</code> tests write-
 back vs. write-through behavior. The number of memory writes will vary dep
 ending on that\, and you should also check the data values to ensure dirty
  blocks are written back correctly.</li>\n    <li>\n<code>write_allocate</
 code> tests write-allocate vs. write-around behavior\, which will cause th
 e second access to either be a hit or a miss.</li>\n</ul>\n<p>We’ve also
  provided a large trace (<code>gcc-trace</code>) and a prefix of it (<code
 >gcc-trace.verbose</code>) to verify your simulator’s behavior. Expected
  outputs for a variety of different cache configurations are provided in t
 he <code>test_cases</code> directory in the files <code>gcc-trace.output</
 code> and <code>gcc-trace.verbose.output</code>. These files contain the c
 ommands to run each configuration\, and you can then use <code>diff</code>
  to compare your output to the expected output.</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:25 Cache concious code [cs_233_120221_213565]
DTSTART:20220420T130000Z
DTEND:20220420T170000Z
DTSTAMP:20220112T151900Z
UID:event-calendar-event-45332
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_45332
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220420T130000Z
DTEND:20220420T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50791
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50791
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220420T150000Z
DTEND:20220420T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50822
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50822
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:EXAM 3 [fshn_120_120221_213078]
DTSTART:20220420T230000Z
DTEND:20220420T230000Z
DTSTAMP:20220112T054200Z
UID:event-assignment-366695
SEQUENCE:0
CLASS:PUBLIC
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=04&year=2022#assignment_366695
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 12 Part 1 [cs_233_120221_213565]
DTSTART:20220423T010000Z
DTEND:20220423T010000Z
DTSTAMP:20220112T032200Z
UID:event-assignment-367931
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:-------------------\nLearning Objectives\n-------------------\
 n\nPerformance optimization and cache conscious programming\, including\n\
 n* Analysis of cache access patterns\n\n* Loop tiling / strip mining\n\n--
 --------\nGuidelines\n----------\n\n* Your goal for this lab is to transfo
 rm the provided code to reduce the number of cache misses. You will see th
 at the total execution time will also be reduced.\n\n* We recommend that y
 ou develop your code in the workspace\, check correctness\, and achieve so
 me speedup before submitting.\n\n* The grader will exhaustively check the 
 output of your code. Your code should produce the same output as the one g
 enerated by the original code that we have provided. Thus\, you may want t
 o enhance the test conditions in the main code to verify the correctness o
 f your code.\n\n* You may see a large variation in execution time at diffe
 rent times depending on how server resources are allocated to you at the t
 ime of running your code. You may need to run your code multiple times to 
 get useful run times. In general\, you should focus on the shortest execut
 ion times\, since (unlike in other sciences) all of the variance is coming
  from interference which is slowing down your runs (i.e.\, the fastest tim
 es are the ones with the least interference\, which is what we want).\n\n*
  To make grading more robust\, we will not be using your execution time\, 
 but rather we'll be looking at the number of cache misses that your progra
 m has. The grader will run your code on a cache simulator with undisclosed
  parameters but that is representative of a typical design in modern compu
 ters. You can expect the cache to be comparable to modern processors such 
 as the Intel i7 or AMD Ryzen 7 caches that we showed you in 21GA. PrairieL
 earn assignments will tell you the number of misses that your code achieve
 s along with your grade.\n\nIn this question\, you will optimize implement
 ation of the matrix transpose function (See below).\n\nVariable definition
 s\n--------------------\n\nVariables are initialized elsewhere\n\n#define 
 N 2000\n\nint A[N][N]\;\nint B[N][N]\;\n\nThe given code snippet:\n\n#incl
 ude "definitions.h"\n\nvoid transpose() {\nfor (int i = 0\; i < N\; i++) {
 \nfor (int j = 0\; j < N\; j++) {\nB[i][j] = A[j][i]\;\n}\n}\n}\n\n-------
 ----------------------\nUseful Conceptual Information\n-------------------
 ----------\n\nIn this code\, accesses to B have spatial locality as the ma
 trix is accessed by rows\; however\, accesses to A do not have spatial loc
 ality\, as it is accessed by columns. Thus\, your goal for this lab is to 
 transform the code above to increase locality in the accesses to A.\n\nIf 
 you consider iterations i=0 and i=1 you can see that the rows of A that we
 re accessed during iteration i=0 will also be accessed during iteration i=
 1. Ideally\, we would hope that all the memory accesses to A during iterat
 ion i=0 should miss\, while accesses during iteration i=1 should hit (as c
 ache blocks contain several elements of A). This would indeed happen if th
 e cache is large enough to hold the cache blocks with the data from A that
  were brought to the cache during the execution of iteration i=0. However\
 , if A is very large\, the cache blocks that were storing the elements of 
 A will get overwritten even before finishing the i=0 iteration. Consequent
 ly\, all the memory accesses to A during iteration i=1 will result in miss
 es.\n\nYour task is to apply loop tiling to increase the likelihood that t
 he elements a A remain in cache until they are reused (and result in a cac
 he hit). You can check out the [Cheat Sheet] (https://canvas.illinois.edu/
 pl/course_instance/6/instructor/clientFilesCourse/cache_conscious_code.htm
 l)\, 25GA\, or the videos below for relevant examples to help you with thi
 s task.\n\nhttps://mediaspace.illinois.edu/media/t/1_7tua5ief\n\nhttps://m
 ediaspace.illinois.edu/media/t/1_2t3a1n24\n\nPlay around with the tile siz
 e to see what makes your code run the fastest. If running in the workspace
 \, you will see only a modest improvement (e.g.\, 1.5-1.6x speed)\, but on
  a regular desktop or laptop machine you would likely see a dramatic impro
 vement (e.g.\, 10x speed). (Notice also that tile size is a parameter of t
 he loop tiling transformation and is different from SIZE\, which defines t
 he size of the matrices.)\n\n-------------------\nTesting & Debugging\n---
 ----------------\n\nYou can run the program with the following commands:\n
 \nmake transpose\n./transpose\n\nWhen you run ./transpose\, it will report
  the execution time for the original code and your optimized code
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#assignment_367931
X-ALT-DESC;FMTTYPE=text/html:<h2>Learning Objectives</h2>\n<p>Performance 
 optimization and cache conscious programming\, including</p>\n<ul>\n<li>An
 alysis of cache access patterns</li>\n<li>Loop tiling / strip mining</li>\
 n</ul>\n<h2>Guidelines</h2>\n<ul>\n<li>Your goal for this lab is to transf
 orm the provided code to reduce the number of cache misses. You will see t
 hat the total execution time will also be reduced.</li>\n<li>We recommend 
 that you develop your code in the workspace\, check correctness\, and achi
 eve some speedup before submitting.</li>\n<li>The grader will exhaustively
  check the output of your code. Your code should produce the same output a
 s the one generated by the original code that we have provided. Thus\, you
  may want to enhance the test conditions in the main code to verify the co
 rrectness of your code.</li>\n<li>You may see a large variation in executi
 on time at different times depending on how server resources are allocated
  to you at the time of running your code. You may need to run your code mu
 ltiple times to get useful run times. In general\, you should focus on the
  <strong>shortest</strong> execution times\, since (unlike in other scienc
 es) all of the variance is coming from interference which is slowing down 
 your runs (i.e.\, the fastest times are the ones with the least interferen
 ce\, which is what we want).</li>\n<li>To make grading more robust\, we wi
 ll not be using your execution time\, but rather we'll be looking at the n
 umber of cache misses that your program has. The grader will run your code
  on a cache simulator with undisclosed parameters but that is representati
 ve of a typical design in modern computers. You can expect the cache to be
  comparable to modern processors such as the Intel i7 or AMD Ryzen 7 cache
 s that we showed you in 21GA. PrairieLearn assignments will tell you the n
 umber of misses that your code achieves along with your grade.</li>\n</ul>
 \n<p>In this question\, you will optimize implementation of the matrix tra
 nspose function (See below).</p>\n<h4>Variable definitions</h4>\n<p>Variab
 les are initialized elsewhere</p>\n<div class="pl-code">\n<div class="mb-2
  rounded" style="background: #f0f0f0\;">\n<pre style="padding: 0.5rem\; ma
 rgin-bottom: 0px\; line-height: 125%\;"><span style="color: #007020\;">#de
 fine N 2000</span>\n\n<span style="color: #902000\;">int</span><span style
 ="color: #bbbbbb\;"> </span>A[N][N]\;\n<span style="color: #902000\;">int<
 /span><span style="color: #bbbbbb\;"> </span>B[N][N]\;\n</pre>\n</div>\n</
 div>\n<p>The given code snippet:</p>\n<div class="pl-code">\n<div class="m
 b-2 rounded" style="background: #f0f0f0\;">\n<pre style="padding: 0.5rem\;
  margin-bottom: 0px\; line-height: 125%\;"><span style="color: #007020\;">
 #include</span><span style="color: #bbbbbb\;"> </span><span style="color: 
 #60a0b0\; font-style: italic\;">"definitions.h"</span>\n\n<span style="col
 or: #902000\;">void</span><span style="color: #bbbbbb\;"> </span><span sty
 le="color: #06287e\;">transpose</span>()<span style="color: #bbbbbb\;"> </
 span>{\n<span style="color: #bbbbbb\;">    </span><span style="color: #007
 020\; ">for</span><span style="color: #bbbbbb\;"> </span>(<span style="col
 or: #902000\;">int</span><span style="color: #bbbbbb\;"> </span>i<span sty
 le="color: #bbbbbb\;"> </span><span style="color: #666666\;">=</span><span
  style="color: #bbbbbb\;"> </span><span style="color: #40a070\;">0</span>\
 ;<span style="color: #bbbbbb\;"> </span>i<span style="color: #bbbbbb\;"> <
 /span><span style="color: #666666\;">&lt\;</span><span style="color: #bbbb
 bb\;"> </span>N\;<span style="color: #bbbbbb\;"> </span>i<span style="colo
 r: #666666\;">++</span>)<span style="color: #bbbbbb\;"> </span>{\n<span st
 yle="color: #bbbbbb\;">        </span><span style="color: #007020\; ">for<
 /span><span style="color: #bbbbbb\;"> </span>(<span style="color: #902000\
 ;">int</span><span style="color: #bbbbbb\;"> </span>j<span style="color: #
 bbbbbb\;"> </span><span style="color: #666666\;">=</span><span style="colo
 r: #bbbbbb\;"> </span><span style="color: #40a070\;">0</span>\;<span style
 ="color: #bbbbbb\;"> </span>j<span style="color: #bbbbbb\;"> </span><span 
 style="color: #666666\;">&lt\;</span><span style="color: #bbbbbb\;"> </spa
 n>N\;<span style="color: #bbbbbb\;"> </span>j<span style="color: #666666\;
 ">++</span>)<span style="color: #bbbbbb\;"> </span>{\n<span style="color: 
 #bbbbbb\;">            </span>B[i][j]<span style="color: #bbbbbb\;"> </spa
 n><span style="color: #666666\;">=</span><span style="color: #bbbbbb\;"> <
 /span>A[j][i]\;\n<span style="color: #bbbbbb\;">        </span>}\n<span st
 yle="color: #bbbbbb\;">    </span>}\n}\n</pre>\n</div>\n</div>\n<h2>Useful
  Conceptual Information</h2>\n<p>In this code\, accesses to <code>B</code>
  have spatial locality as the matrix is accessed by rows\; however\, acces
 ses to <code>A</code> do not have spatial locality\, as it is accessed by 
 columns. Thus\, your goal for this lab is to transform the code above to i
 ncrease locality in the accesses to <code>A</code>.</p>\n<p>If you conside
 r iterations <code>i=0</code> and <code>i=1</code> you can see that the ro
 ws of <code>A</code> that were accessed during iteration <code>i=0</code> 
 will also be accessed during iteration <code>i=1</code>. Ideally\, we woul
 d hope that all the memory accesses to <code>A</code> during iteration <co
 de>i=0</code> should <i>miss</i>\, while accesses during iteration <code>i
 =1</code> should <i>hit</i> (as cache blocks contain several elements of A
 ). This would indeed happen if the cache is large enough to hold the cache
  blocks with the data from <code>A</code> that were brought to the cache d
 uring the execution of iteration <code>i=0</code>. However\, if <code>A</c
 ode> is very large\, the cache blocks that were storing the elements of <c
 ode>A</code> will get overwritten even before finishing the <code>i=0</cod
 e> iteration. Consequently\, all the memory accesses to <code>A</code> dur
 ing iteration <code>i=1</code> will result in <i>misses</i>.</p>\n<p><stro
 ng>Your task is to apply loop tiling</strong> to increase the likelihood t
 hat the elements a <code>A</code> remain in cache until they are reused (a
 nd result in a cache <i>hit</i>). You can check out the <a href="https://c
 anvas.illinois.edu/pl/course_instance/6/instructor/clientFilesCourse/cache
 _conscious_code.html">Cheat Sheet</a>\, 25GA\, or the videos below for rel
 evant examples to help you with this task.</p>\n<p><a href="https://medias
 pace.illinois.edu/media/t/1_7tua5ief">https://mediaspace.illinois.edu/medi
 a/t/1_7tua5ief</a></p>\n<p><a href="https://mediaspace.illinois.edu/media/
 t/1_2t3a1n24">https://mediaspace.illinois.edu/media/t/1_2t3a1n24</a></p>\n
 <div class="alert alert-danger" role="alert">Play around with the tile siz
 e to see what makes your code run the fastest. If running in the workspace
 \, you will see only a modest improvement (e.g.\, 1.5-1.6x speed)\, but on
  a regular desktop or laptop machine you would likely see a dramatic impro
 vement (e.g.\, 10x speed). (Notice also that tile size is a parameter of t
 he loop tiling transformation and is different from SIZE\, which defines t
 he size of the matrices.)</div>\n<h2>Testing &amp\; Debugging</h2>\n<p>You
  can run the program with the following commands:</p>\n<div class="pl-code
 ">\n<div class="mb-2 rounded" style="background: #f0f0f0\;">\n<pre style="
 padding: 0.5rem\; margin-bottom: 0px\; line-height: 125%\;">make transpose
 \n./transpose\n</pre>\n</div>\n</div>\n<p>When you run <code>./transpose</
 code>\, it will report the execution time for the original code and your o
 ptimized code</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Quiz 10 [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220422T000000
DTEND;VALUE=DATE:20220422T000000
DTSTAMP:20220112T142900Z
UID:event-assignment-367962
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Practice Quiz 10 is available and mirrors the format and conte
 nt of Quiz 10 exactly. You can earn extra credit for completing practice q
 uizzes before Quiz 10 closes.\n\nReview Videos\n-------------\n\nOverview 
 Video: https://mediaspace.illinois.edu/media/t/1_oww8fw2m\n\nExample Solut
 ion Videos: Will Keep updating to be more precise and to have more content
 \n\nShort answer questions\n----------------------\n\nCache size relations
 : https://mediaspace.illinois.edu/media/t/1_oww8fw2m?st=197\nL2 cache: htt
 ps://mediaspace.illinois.edu/media/t/1_oww8fw2m?st=465\nRead from multi-by
 te blocks: https://mediaspace.illinois.edu/media/t/1_oww8fw2m?st=617\nRead
  from multi-byte blocks w/ valid bit: https://mediaspace.illinois.edu/medi
 a/t/1_oww8fw2m?st=688\nQuick answer for miss rate estimation: https://medi
 aspace.illinois.edu/media/t/1_oww8fw2m?st=788\n\nMiss rate estimation\n---
 -----------------\n\nMiss rate estimation - Nested loops: https://mediaspa
 ce.illinois.edu/media/t/1_ey7mct15\nMiss rate estimation - Set Associativi
 ty: https://mediaspace.illinois.edu/media/t/1_05w7o658\nMiss rate estimati
 on - Data size (not exact but directly relevant): https://mediaspace.illin
 ois.edu/media/t/1_1vzuyn97\nMiss rate estimation - Stride length (slides d
 irectly translate to PL): https://mediaspace.illinois.edu/media/t/1_1hupdb
 qc?st=694\n\nLong form total miss count problems\n------------------------
 -----------\n\nPractice Quiz 10 - 2 Array loops: https://mediaspace.illino
 is.edu/media/t/1_9zeij7g2\nPractice Quiz 10 - pow(2\,k): https://mediaspac
 e.illinois.edu/media/t/1_f70xxgcj
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#assignment_367962
X-ALT-DESC;FMTTYPE=text/html:<p>Practice Quiz 10 is available and mirrors 
 the format and content of Quiz 10 exactly. You can earn extra credit for c
 ompleting practice quizzes before Quiz 10 closes.</p>\n<h3>Review Videos</
 h3>\n<p>Overview Video: <a href="https://mediaspace.illinois.edu/media/t/1
 _oww8fw2m" target="_blank">https://mediaspace.illinois.edu/media/t/1_oww8f
 w2m</a></p>\n<p>Example Solution Videos: Will Keep updating to be more pre
 cise and to have more content</p>\n<h4>Short answer questions</h4>\n<p>Cac
 he size relations: <a href="https://mediaspace.illinois.edu/media/t/1_oww8
 fw2m?st=197" target="_blank">https://mediaspace.illinois.edu/media/t/1_oww
 8fw2m?st=197</a> <br>L2 cache: <a href="https://mediaspace.illinois.edu/me
 dia/t/1_oww8fw2m?st=465" target="_blank">https://mediaspace.illinois.edu/m
 edia/t/1_oww8fw2m?st=465</a> <br>Read from multi-byte blocks: <a href="htt
 ps://mediaspace.illinois.edu/media/t/1_oww8fw2m?st=617" target="_blank">ht
 tps://mediaspace.illinois.edu/media/t/1_oww8fw2m?st=617</a> <br>Read from 
 multi-byte blocks w/ valid bit: <a href="https://mediaspace.illinois.edu/m
 edia/t/1_oww8fw2m?st=688" target="_blank">https://mediaspace.illinois.edu/
 media/t/1_oww8fw2m?st=688</a> <br>Quick answer for miss rate estimation: <
 a href="https://mediaspace.illinois.edu/media/t/1_oww8fw2m?st=788" target=
 "_blank">https://mediaspace.illinois.edu/media/t/1_oww8fw2m?st=788</a></p>
 \n<h4>Miss rate estimation</h4>\n<p>Miss rate estimation - Nested loops: <
 a href="https://mediaspace.illinois.edu/media/t/1_ey7mct15" target="_blank
 ">https://mediaspace.illinois.edu/media/t/1_ey7mct15</a> <br>Miss rate est
 imation - Set Associativity: <a href="https://mediaspace.illinois.edu/medi
 a/t/1_05w7o658" target="_blank">https://mediaspace.illinois.edu/media/t/1_
 05w7o658</a> <br>Miss rate estimation - Data size (not exact but directly 
 relevant): <a href="https://mediaspace.illinois.edu/media/t/1_1vzuyn97" ta
 rget="_blank">https://mediaspace.illinois.edu/media/t/1_1vzuyn97</a> <br>M
 iss rate estimation - Stride length (slides directly translate to PL): <a 
 href="https://mediaspace.illinois.edu/media/t/1_1hupdbqc?st=694" target="_
 blank">https://mediaspace.illinois.edu/media/t/1_1hupdbqc?st=694</a></p>\n
 <h4>Long form total miss count problems</h4>\n<p>Practice Quiz 10 - 2 Arra
 y loops: <a href="https://mediaspace.illinois.edu/media/t/1_9zeij7g2" targ
 et="_blank">https://mediaspace.illinois.edu/media/t/1_9zeij7g2</a> <br>Pra
 ctice Quiz 10 - pow(2\,k): <a href="https://mediaspace.illinois.edu/media/
 t/1_f70xxgcj" target="_blank">https://mediaspace.illinois.edu/media/t/1_f7
 0xxgcj</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Weekly Review 7 [cs_222_120221_214564]
DTSTART;VALUE=DATE:20220422T000000
DTEND;VALUE=DATE:20220422T000000
DTSTAMP:20220311T214100Z
UID:event-assignment-383691
SEQUENCE:0
CLASS:PUBLIC
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18658&mon
 th=04&year=2022#assignment_383691
END:VEVENT
BEGIN:VEVENT
SUMMARY:26 Virtual Memory [cs_233_120221_213565]
DTSTART:20220425T130000Z
DTEND:20220425T170000Z
DTSTAMP:20220112T151900Z
UID:event-calendar-event-45333
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_45333
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220425T130000Z
DTEND:20220425T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50792
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50792
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220425T150000Z
DTEND:20220425T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50823
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50823
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 12 Part 2 [cs_233_120221_213565]
DTSTART:20220426T010000Z
DTEND:20220426T010000Z
DTSTAMP:20220112T032200Z
UID:event-assignment-367932
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:-------------------\nLearning Objectives\n-------------------\
 n\nPerformance optimization and cache conscious programming\, including\n\
 n* Analysis of cache access patterns\n\n* Single pass vs. multi-pass algor
 ithms\n\n* Software prefetch insertion\n\n----------\nGuidelines\n--------
 --\n\n* Your goal for this lab is to transform the provided code to reduce
  the number of cache misses. You will see that the total execution time wi
 ll also be reduced.\n\n* We recommend that you develop your code in the wo
 rkspace\, check correctness\, and achieve some speedup before submitting.\
 n\n* The grader will exhaustively check the output of your code. Your code
  should produce the same output as the one generated by the original code 
 that we have provided. Thus\, you may want to enhance the test conditions 
 in the main code to verify the correctness of your code.\n\n* You may see 
 a large variation in execution time at different times depending on how se
 rver resources are allocated to you at the time of running your code. You 
 may need to run your code multiple times to get useful run times. In gener
 al\, you should focus on the shortest execution times\, since (unlike in o
 ther sciences) all of the variance is coming from interference which is sl
 owing down your runs (i.e.\, the fastest times are the ones with the least
  interference\, which is what we want).\n\n* To make grading more robust\,
  we will not be using your execution time\, but rather we'll be looking at
  the number of cache misses that your program has. The grader will run you
 r code on a cache simulator with undisclosed parameters but that is repres
 entative of a typical design in modern computers. You can expect the cache
  to be comparable to modern processors such as the Intel i7 or AMD Ryzen 7
  caches that we showed you in 21GA. PrairieLearn assignments will tell you
  the number of misses that your code achieves along with your grade.\n\nIn
  this question\, you will optimize the use of a series of image filter fun
 ctions (See below).\n\n-------\nFilters\n-------\n\nThe filter_none functi
 on in file main-filter.cpp serves as the baseline function and performance
  metric for your modifications. It is meant to represent a series of filte
 rs (filter1\, filter2\, filter3) applied to an image. Your task is to appl
 y a series of transformations to the filter function in filter_submission.
 cpp to reduce the execution time of this code. You need to verify that the
  transformed code is correct (returns the same result obtained with filter
 _none) and the execution time is reduced. All the code optimization modifi
 cations should be done in the filter_submission.cpp file\, though may edit
  main-filter.cpp to more robustly test whether your transformed code is co
 rrect.\n\nFilter functions. Do not need to modify these!\n\n#define SIZE 5
 00000\n\nstruct pixel_t {\nint x\, y\, z\;\nint r\, g\, b\;\n}\;\n\nvoid f
 ilter1(pixel_t **image1\, pixel_t **image2\, int i) {\nimage2[i]->x = imag
 e1[i - 1]->x + image1[i + 1]->x\;\nimage2[i]->y = image1[i - 1]->y + image
 1[i + 1]->y\;\nimage2[i]->z = image1[i - 1]->z + image1[i + 1]->z\;\n}\n\n
 void filter2(pixel_t **image1\, pixel_t **image2\, int i) {\nimage2[i]->r 
 = image1[i - 2]->r + image1[i + 2]->r\;\nimage2[i]->g = image1[i - 2]->g +
  image1[i + 2]->g\;\nimage2[i]->b = image1[i - 2]->b + image1[i + 2]->b\;\
 n}\n\nvoid filter3(pixel_t **image\, int i) {\nimage[i]->x = image[i]->x +
  image[i + 5]->x\;\nimage[i]->y = image[i]->y + image[i + 5]->y\;\nimage[i
 ]->z = image[i]->z + image[i + 5]->z\;\n}\n\nfilter_none code that serves 
 as your baseline. Variables are initialized elsewhere. Do not modify!\n\nv
 oid\nfilter_none(pixel_t **image1\, pixel_t **image2) {\n\nfor (int i = 1\
 ; i < SIZE - 1\; i ++) {\nfilter1(image1\, image2\, i)\;\n}\n\nfor (int i 
 = 2\; i < SIZE - 2\; i ++) {\nfilter2(image1\, image2\, i)\;\n}\n\nfor (in
 t i = 1\; i < SIZE - 5\; i ++) {\nfilter3(image2\, i)\;\n}\n}\n\nThe trans
 formations you need to apply to filter are the following: prefetching and 
 loop fusion.\n\n--------\nPrefetch\n--------\n\nSoftware pre-fetching is s
 upported in the system. You may assume that a cache miss incurs a penalty 
 of approximately 100 clock cycles.\n\nHardware prefetchers are effective f
 or streams and strided accesses\, but typically can't effectively prefetch
  irregular access patterns. The provided code uses an array of pointers. B
 ecause we're walking down the array linearly\, the hardware prefetcher sho
 uld effectively prefetch the array itself\, but it won't be able to prefet
 ch the pixels pointed to by the array. To prefetch the pixels\, you'll nee
 d to use software prefetches.\n\nYour code should include prefetches for e
 ach traversal of a pointer array. Make sure you are prefetching the pixels
  and not just the array!\n\nDuring your development\, explore the paramete
 r space of this prefetching\, specifically how far ahead should you prefet
 ch? For example\, should you prefetch 1 iteration ahead? 10? 50?\n\nThe gc
 c compiler\, which you will use in the workspace\, uses the following head
 er for its prefetcher (this is slighty different from what you used in the
  GAs). Note that there are two underscores in front of "builtin".\n\nvoid 
 __builtin_prefetch(const void *addr)\n\nfor (i = 0\; i < n\; i ++) {\na[i]
  = a[i] + b[i]\;\n/* ... */\n}\n\nFor example\, if you had the C code abov
 e\, you could add pre-fetching with the following\, where j is how far ahe
 ad you prefetch.\n\nfor (i = 0\; i < n\; i ++) {\na[i] = a[i] + b[i]\;\n__
 builtin_prefetch(&a[i+j])\;\n__builtin_prefetch(&b[i+j])\;\n/* ... */\n}\n
 \n-----------\nLoop Fusion\n-----------\n\nOne shortcoming of the supplied
  code is that it traverses the images several times\, once for each filter
 . As a result\, we're bringing all the data through the cache several time
 s\, and each time only performing a relatively small amount of processing 
 on it. There is an optimization called loop fusion\, whereby we merge adja
 cent loops for efficiency sake\, including cache efficiency. Refer to \\ur
 l{http://en.wikipedia.org/wiki/Loop\\_fusion} or the [cheat sheet] (https:
 //canvas.illinois.edu/pl/course_instance/6/instructor/clientFilesCourse/ca
 che_conscious_code.html) for a little insight into loop fusion.\n\nApply t
 he loop fusion technique to decrease the number of walks through the array
 s. Note that you will need to do a small amount of work outside of the fus
 ed loop to make this possible.\n\nLoop fusion is not always a legal transf
 ormation\, meaning that sometimes it cannot be applied\, as it will produc
 e incorrect results. Whether a transformation is legal or not can be deter
 mined based on the memory accesses to the data. Thus\, while applying this
  transformation to improve performance you need to verify that your code p
 roduces the same output as the original code that we have provided.\n\n---
 ------------------\nTesting and Debugging\n---------------------\n\nYou ca
 n test and execute the code with the commands\n\nmake filter\n./filter\n\n
 Note: You will see that ./filter prints Image 2374. This is only the value
  of a single random pixel. This means that if you don't see Image 2374 aft
 er making a transformation\, you're definitely wrong\, but if you do see I
 mage 2374\, it doesn't mean that you're correct. You should modify main-fi
 lter.cpp to verify your final result in a fashion similar to what you saw 
 in the first part. Incorrect outputs from the functions will cause you to 
 lose all points for an attempt (no partial credit will be given). Make sur
 e you test your own code with exhaustive output checks.\n\nIt is possible 
 to achieve 2x-3x speedups in the code. filter_none can take upwards of 15 
 seconds to run\, so be patient when running ./filter
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#assignment_367932
X-ALT-DESC;FMTTYPE=text/html:<h2>Learning Objectives</h2>\n<p>Performance 
 optimization and cache conscious programming\, including</p>\n<ul>\n<li>An
 alysis of cache access patterns</li>\n<li>Single pass vs. multi-pass algor
 ithms</li>\n<li>Software prefetch insertion</li>\n</ul>\n<h2>Guidelines</h
 2>\n<ul>\n<li>Your goal for this lab is to transform the provided code to 
 reduce the number of cache misses. You will see that the total execution t
 ime will also be reduced.</li>\n<li>We recommend that you develop your cod
 e in the workspace\, check correctness\, and achieve some speedup before s
 ubmitting.</li>\n<li>The grader will exhaustively check the output of your
  code. Your code should produce the same output as the one generated by th
 e original code that we have provided. Thus\, you may want to enhance the 
 test conditions in the main code to verify the correctness of your code.</
 li>\n<li>You may see a large variation in execution time at different time
 s depending on how server resources are allocated to you at the time of ru
 nning your code. You may need to run your code multiple times to get usefu
 l run times. In general\, you should focus on the <strong>shortest</strong
 > execution times\, since (unlike in other sciences) all of the variance i
 s coming from interference which is slowing down your runs (i.e.\, the fas
 test times are the ones with the least interference\, which is what we wan
 t).</li>\n<li>To make grading more robust\, we will not be using your exec
 ution time\, but rather we'll be looking at the number of cache misses tha
 t your program has. The grader will run your code on a cache simulator wit
 h undisclosed parameters but that is representative of a typical design in
  modern computers. You can expect the cache to be comparable to modern pro
 cessors such as the Intel i7 or AMD Ryzen 7 caches that we showed you in 2
 1GA. PrairieLearn assignments will tell you the number of misses that your
  code achieves along with your grade.</li>\n</ul>\n<p>In this question\, y
 ou will optimize the use of a series of image filter functions (See below)
 .</p>\n<h2>Filters</h2>\n<p>The <code>filter_none</code> function in file 
 <code>main-filter.cpp</code> serves as the baseline function and performan
 ce metric for your modifications. It is meant to represent a series of fil
 ters (<code>filter1</code>\, <code>filter2</code>\, <code>filter3</code>) 
 applied to an image. Your task is to apply a series of transformations to 
 the <code>filter</code> function in <code>filter_submission.cpp</code> to 
 reduce the execution time of this code. You need to verify that the transf
 ormed code is correct (returns the same result obtained with <code>filter_
 none</code>) and the execution time is reduced. All the code optimization 
 modifications should be done in the <code>filter_submission.cpp</code> fil
 e\, though may edit <code>main-filter.cpp</code> to more robustly test whe
 ther your transformed code is correct.</p>\n<p>Filter functions. Do <stron
 g>not</strong> need to modify these!</p>\n<div class="pl-code">\n<div clas
 s="mb-2 rounded" style="background: #f0f0f0\;">\n<pre style="padding: 0.5r
 em\; margin-bottom: 0px\; line-height: 125%\;"><span style="color: #007020
 \;">#define SIZE 500000</span>\n\n<span style="color: #007020\;">struct</s
 pan> <span style="color: #0e84b5\;">pixel_t</span><span style="color: #bbb
 bbb\;"> </span>{\n<span style="color: #bbbbbb\;">    </span><span style="c
 olor: #902000\;">int</span><span style="color: #bbbbbb\;"> </span>x\,<span
  style="color: #bbbbbb\;"> </span>y\,<span style="color: #bbbbbb\;"> </spa
 n>z\;\n<span style="color: #bbbbbb\;">    </span><span style="color: #9020
 00\;">int</span><span style="color: #bbbbbb\;"> </span>r\,<span style="col
 or: #bbbbbb\;"> </span>g\,<span style="color: #bbbbbb\;"> </span>b\;\n}\;\
 n\n<span style="color: #902000\;">void</span><span style="color: #bbbbbb\;
 "> </span><span style="color: #06287e\;">filter1</span>(pixel_t<span style
 ="color: #bbbbbb\;"> </span><span style="color: #666666\;">**</span>image1
 \,<span style="color: #bbbbbb\;"> </span>pixel_t<span style="color: #bbbbb
 b\;"> </span><span style="color: #666666\;">**</span>image2\,<span style="
 color: #bbbbbb\;"> </span><span style="color: #902000\;">int</span><span s
 tyle="color: #bbbbbb\;"> </span>i)<span style="color: #bbbbbb\;"> </span>{
 \n<span style="color: #bbbbbb\;">    </span>image2[i]<span style="color: #
 666666\;">-&gt\;</span>x<span style="color: #bbbbbb\;"> </span><span style
 ="color: #666666\;">=</span><span style="color: #bbbbbb\;"> </span>image1[
 i<span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">-</
 span><span style="color: #bbbbbb\;"> </span><span style="color: #40a070\;"
 >1</span>]<span style="color: #666666\;">-&gt\;</span>x<span style="color:
  #bbbbbb\;"> </span><span style="color: #666666\;">+</span><span style="co
 lor: #bbbbbb\;"> </span>image1[i<span style="color: #bbbbbb\;"> </span><sp
 an style="color: #666666\;">+</span><span style="color: #bbbbbb\;"> </span
 ><span style="color: #40a070\;">1</span>]<span style="color: #666666\;">-&
 gt\;</span>x\;\n<span style="color: #bbbbbb\;">    </span>image2[i]<span s
 tyle="color: #666666\;">-&gt\;</span>y<span style="color: #bbbbbb\;"> </sp
 an><span style="color: #666666\;">=</span><span style="color: #bbbbbb\;"> 
 </span>image1[i<span style="color: #bbbbbb\;"> </span><span style="color: 
 #666666\;">-</span><span style="color: #bbbbbb\;"> </span><span style="col
 or: #40a070\;">1</span>]<span style="color: #666666\;">-&gt\;</span>y<span
  style="color: #bbbbbb\;"> </span><span style="color: #666666\;">+</span><
 span style="color: #bbbbbb\;"> </span>image1[i<span style="color: #bbbbbb\
 ;"> </span><span style="color: #666666\;">+</span><span style="color: #bbb
 bbb\;"> </span><span style="color: #40a070\;">1</span>]<span style="color:
  #666666\;">-&gt\;</span>y\;\n<span style="color: #bbbbbb\;">    </span>im
 age2[i]<span style="color: #666666\;">-&gt\;</span>z<span style="color: #b
 bbbbb\;"> </span><span style="color: #666666\;">=</span><span style="color
 : #bbbbbb\;"> </span>image1[i<span style="color: #bbbbbb\;"> </span><span 
 style="color: #666666\;">-</span><span style="color: #bbbbbb\;"> </span><s
 pan style="color: #40a070\;">1</span>]<span style="color: #666666\;">-&gt\
 ;</span>z<span style="color: #bbbbbb\;"> </span><span style="color: #66666
 6\;">+</span><span style="color: #bbbbbb\;"> </span>image1[i<span style="c
 olor: #bbbbbb\;"> </span><span style="color: #666666\;">+</span><span styl
 e="color: #bbbbbb\;"> </span><span style="color: #40a070\;">1</span>]<span
  style="color: #666666\;">-&gt\;</span>z\;\n}\n\n<span style="color: #9020
 00\;">void</span><span style="color: #bbbbbb\;"> </span><span style="color
 : #06287e\;">filter2</span>(pixel_t<span style="color: #bbbbbb\;"> </span>
 <span style="color: #666666\;">**</span>image1\,<span style="color: #bbbbb
 b\;"> </span>pixel_t<span style="color: #bbbbbb\;"> </span><span style="co
 lor: #666666\;">**</span>image2\,<span style="color: #bbbbbb\;"> </span><s
 pan style="color: #902000\;">int</span><span style="color: #bbbbbb\;"> </s
 pan>i)<span style="color: #bbbbbb\;"> </span>{\n<span style="color: #bbbbb
 b\;">    </span>image2[i]<span style="color: #666666\;">-&gt\;</span>r<spa
 n style="color: #bbbbbb\;"> </span><span style="color: #666666\;">=</span>
 <span style="color: #bbbbbb\;"> </span>image1[i<span style="color: #bbbbbb
 \;"> </span><span style="color: #666666\;">-</span><span style="color: #bb
 bbbb\;"> </span><span style="color: #40a070\;">2</span>]<span style="color
 : #666666\;">-&gt\;</span>r<span style="color: #bbbbbb\;"> </span><span st
 yle="color: #666666\;">+</span><span style="color: #bbbbbb\;"> </span>imag
 e1[i<span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">
 +</span><span style="color: #bbbbbb\;"> </span><span style="color: #40a070
 \;">2</span>]<span style="color: #666666\;">-&gt\;</span>r\;\n<span style=
 "color: #bbbbbb\;">    </span>image2[i]<span style="color: #666666\;">-&gt
 \;</span>g<span style="color: #bbbbbb\;"> </span><span style="color: #6666
 66\;">=</span><span style="color: #bbbbbb\;"> </span>image1[i<span style="
 color: #bbbbbb\;"> </span><span style="color: #666666\;">-</span><span sty
 le="color: #bbbbbb\;"> </span><span style="color: #40a070\;">2</span>]<spa
 n style="color: #666666\;">-&gt\;</span>g<span style="color: #bbbbbb\;"> <
 /span><span style="color: #666666\;">+</span><span style="color: #bbbbbb\;
 "> </span>image1[i<span style="color: #bbbbbb\;"> </span><span style="colo
 r: #666666\;">+</span><span style="color: #bbbbbb\;"> </span><span style="
 color: #40a070\;">2</span>]<span style="color: #666666\;">-&gt\;</span>g\;
 \n<span style="color: #bbbbbb\;">    </span>image2[i]<span style="color: #
 666666\;">-&gt\;</span>b<span style="color: #bbbbbb\;"> </span><span style
 ="color: #666666\;">=</span><span style="color: #bbbbbb\;"> </span>image1[
 i<span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">-</
 span><span style="color: #bbbbbb\;"> </span><span style="color: #40a070\;"
 >2</span>]<span style="color: #666666\;">-&gt\;</span>b<span style="color:
  #bbbbbb\;"> </span><span style="color: #666666\;">+</span><span style="co
 lor: #bbbbbb\;"> </span>image1[i<span style="color: #bbbbbb\;"> </span><sp
 an style="color: #666666\;">+</span><span style="color: #bbbbbb\;"> </span
 ><span style="color: #40a070\;">2</span>]<span style="color: #666666\;">-&
 gt\;</span>b\;\n}\n\n<span style="color: #902000\;">void</span><span style
 ="color: #bbbbbb\;"> </span><span style="color: #06287e\;">filter3</span>(
 pixel_t<span style="color: #bbbbbb\;"> </span><span style="color: #666666\
 ;">**</span>image\,<span style="color: #bbbbbb\;"> </span><span style="col
 or: #902000\;">int</span><span style="color: #bbbbbb\;"> </span>i)<span st
 yle="color: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">    </spa
 n>image[i]<span style="color: #666666\;">-&gt\;</span>x<span style="color:
  #bbbbbb\;"> </span><span style="color: #666666\;">=</span><span style="co
 lor: #bbbbbb\;"> </span>image[i]<span style="color: #666666\;">-&gt\;</spa
 n>x<span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">+
 </span><span style="color: #bbbbbb\;"> </span>image[i<span style="color: #
 bbbbbb\;"> </span><span style="color: #666666\;">+</span><span style="colo
 r: #bbbbbb\;"> </span><span style="color: #40a070\;">5</span>]<span style=
 "color: #666666\;">-&gt\;</span>x\;\n<span style="color: #bbbbbb\;">    </
 span>image[i]<span style="color: #666666\;">-&gt\;</span>y<span style="col
 or: #bbbbbb\;"> </span><span style="color: #666666\;">=</span><span style=
 "color: #bbbbbb\;"> </span>image[i]<span style="color: #666666\;">-&gt\;</
 span>y<span style="color: #bbbbbb\;"> </span><span style="color: #666666\;
 ">+</span><span style="color: #bbbbbb\;"> </span>image[i<span style="color
 : #bbbbbb\;"> </span><span style="color: #666666\;">+</span><span style="c
 olor: #bbbbbb\;"> </span><span style="color: #40a070\;">5</span>]<span sty
 le="color: #666666\;">-&gt\;</span>y\;\n<span style="color: #bbbbbb\;">   
  </span>image[i]<span style="color: #666666\;">-&gt\;</span>z<span style="
 color: #bbbbbb\;"> </span><span style="color: #666666\;">=</span><span sty
 le="color: #bbbbbb\;"> </span>image[i]<span style="color: #666666\;">-&gt\
 ;</span>z<span style="color: #bbbbbb\;"> </span><span style="color: #66666
 6\;">+</span><span style="color: #bbbbbb\;"> </span>image[i<span style="co
 lor: #bbbbbb\;"> </span><span style="color: #666666\;">+</span><span style
 ="color: #bbbbbb\;"> </span><span style="color: #40a070\;">5</span>]<span 
 style="color: #666666\;">-&gt\;</span>z\;\n}\n</pre>\n</div>\n</div>\n<p><
 code>filter_none</code> code that serves as your baseline. Variables are i
 nitialized elsewhere. Do not modify!</p>\n<div class="pl-code">\n<div clas
 s="mb-2 rounded" style="background: #f0f0f0\;">\n<pre style="padding: 0.5r
 em\; margin-bottom: 0px\; line-height: 125%\;"><span style="color: #902000
 \;">void</span>\n<span style="color: #06287e\;">filter_none</span>(pixel_t
 <span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">**</
 span>image1\,<span style="color: #bbbbbb\;"> </span>pixel_t<span style="co
 lor: #bbbbbb\;"> </span><span style="color: #666666\;">**</span>image2)<sp
 an style="color: #bbbbbb\;"> </span>{\n\n<span style="color: #bbbbbb\;">  
   </span><span style="color: #007020\;">for</span><span style="color: #bbb
 bbb\;"> </span>(<span style="color: #902000\;">int</span><span style="colo
 r: #bbbbbb\;"> </span>i<span style="color: #bbbbbb\;"> </span><span style=
 "color: #666666\;">=</span><span style="color: #bbbbbb\;"> </span><span st
 yle="color: #40a070\;">1</span>\;<span style="color: #bbbbbb\;"> </span>i<
 span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">&lt\;
 </span><span style="color: #bbbbbb\;"> </span>SIZE<span style="color: #bbb
 bbb\;"> </span><span style="color: #666666\;">-</span><span style="color: 
 #bbbbbb\;"> </span><span style="color: #40a070\;">1</span>\;<span style="c
 olor: #bbbbbb\;"> </span>i<span style="color: #bbbbbb\;"> </span><span sty
 le="color: #666666\;">++</span>)<span style="color: #bbbbbb\;"> </span>{\n
 <span style="color: #bbbbbb\;">        </span>filter1(image1\,<span style=
 "color: #bbbbbb\;"> </span>image2\,<span style="color: #bbbbbb\;"> </span>
 i)\;\n<span style="color: #bbbbbb\;">    </span>}\n\n<span style="color: #
 bbbbbb\;">    </span><span style="color: #007020\;">for</span><span style=
 "color: #bbbbbb\;"> </span>(<span style="color: #902000\;">int</span><span
  style="color: #bbbbbb\;"> </span>i<span style="color: #bbbbbb\;"> </span>
 <span style="color: #666666\;">=</span><span style="color: #bbbbbb\;"> </s
 pan><span style="color: #40a070\;">2</span>\;<span style="color: #bbbbbb\;
 "> </span>i<span style="color: #bbbbbb\;"> </span><span style="color: #666
 666\;">&lt\;</span><span style="color: #bbbbbb\;"> </span>SIZE<span style=
 "color: #bbbbbb\;"> </span><span style="color: #666666\;">-</span><span st
 yle="color: #bbbbbb\;"> </span><span style="color: #40a070\;">2</span>\;<s
 pan style="color: #bbbbbb\;"> </span>i<span style="color: #bbbbbb\;"> </sp
 an><span style="color: #666666\;">++</span>)<span style="color: #bbbbbb\;"
 > </span>{\n<span style="color: #bbbbbb\;">        </span>filter2(image1\,
 <span style="color: #bbbbbb\;"> </span>image2\,<span style="color: #bbbbbb
 \;"> </span>i)\;\n<span style="color: #bbbbbb\;">    </span>}\n\n<span sty
 le="color: #bbbbbb\;">    </span><span style="color: #007020\;">for</span>
 <span style="color: #bbbbbb\;"> </span>(<span style="color: #902000\;">int
 </span><span style="color: #bbbbbb\;"> </span>i<span style="color: #bbbbbb
 \;"> </span><span style="color: #666666\;">=</span><span style="color: #bb
 bbbb\;"> </span><span style="color: #40a070\;">1</span>\;<span style="colo
 r: #bbbbbb\;"> </span>i<span style="color: #bbbbbb\;"> </span><span style=
 "color: #666666\;">&lt\;</span><span style="color: #bbbbbb\;"> </span>SIZE
 <span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">-</s
 pan><span style="color: #bbbbbb\;"> </span><span style="color: #40a070\;">
 5</span>\;<span style="color: #bbbbbb\;"> </span>i<span style="color: #bbb
 bbb\;"> </span><span style="color: #666666\;">++</span>)<span style="color
 : #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">        </span>filt
 er3(image2\,<span style="color: #bbbbbb\;"> </span>i)\;\n<span style="colo
 r: #bbbbbb\;">    </span>}\n}\n</pre>\n</div>\n</div>\n<p>The transformati
 ons you need to apply to <code>filter</code> are the following: prefetchin
 g and loop fusion.</p>\n<h2>Prefetch</h2>\n<p>Software pre-fetching is sup
 ported in the system. You may assume that a cache miss incurs a penalty of
  approximately 100 clock cycles.</p>\n<p>Hardware prefetchers are effectiv
 e for streams and strided accesses\, but typically can't effectively prefe
 tch irregular access patterns. The provided code uses an array of pointers
 . Because we're walking down the array linearly\, the hardware prefetcher 
 should effectively prefetch the array itself\, but it won't be able to pre
 fetch the pixels pointed to by the array. To prefetch the pixels\, you'll 
 need to use software prefetches.</p>\n<div class="alert alert-danger" role
 ="alert">Your code should include prefetches for each traversal of a point
 er array. Make sure you are prefetching the pixels and not just the array!
 </div>\n<p>During your development\, explore the parameter space of this p
 refetching\, specifically how far ahead should you prefetch? For example\,
  should you prefetch 1 iteration ahead? 10? 50?</p>\n<p>The <code>gcc</cod
 e> compiler\, which you will use in the workspace\, uses the following hea
 der for its prefetcher (this is slighty different from what you used in th
 e GAs). Note that there are <strong>two underscores</strong> in front of "
 builtin".</p>\n<div class="pl-code">\n<div class="mb-2 rounded" style="bac
 kground: #f0f0f0\;">\n<pre style="padding: 0.5rem\; margin-bottom: 0px\; l
 ine-height: 125%\;"><span style="color: #902000\;">void</span><span style=
 "color: #bbbbbb\;"> </span>__builtin_prefetch(<span style="color: #007020\
 ;">const</span><span style="color: #bbbbbb\;"> </span><span style="color: 
 #902000\;">void</span><span style="color: #bbbbbb\;"> </span><span style="
 color: #666666\;">*</span>addr)\n</pre>\n</div>\n</div>\n<div class="pl-co
 de">\n<div class="mb-2 rounded" style="background: #f0f0f0\;">\n<pre style
 ="padding: 0.5rem\; margin-bottom: 0px\; line-height: 125%\;"><span style=
 "color: #007020\;">for</span><span style="color: #bbbbbb\;"> </span>(i<spa
 n style="color: #bbbbbb\;"> </span><span style="color: #666666\;">=</span>
 <span style="color: #bbbbbb\;"> </span><span style="color: #40a070\;">0</s
 pan>\;<span style="color: #bbbbbb\;"> </span>i<span style="color: #bbbbbb\
 ;"> </span><span style="color: #666666\;">&lt\;</span><span style="color: 
 #bbbbbb\;"> </span>n\;<span style="color: #bbbbbb\;"> </span>i<span style=
 "color: #bbbbbb\;"> </span><span style="color: #666666\;">++</span>)<span 
 style="color: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">    </s
 pan>a[i]<span style="color: #bbbbbb\;"> </span><span style="color: #666666
 \;">=</span><span style="color: #bbbbbb\;"> </span>a[i]<span style="color:
  #bbbbbb\;"> </span><span style="color: #666666\;">+</span><span style="co
 lor: #bbbbbb\;"> </span>b[i]\;\n<span style="color: #bbbbbb\;">    </span>
 <span style="color: #60a0b0\; font-style: italic\;">/* ... */</span>\n}\n<
 /pre>\n</div>\n</div>\n<p>For example\, if you had the C code above\, you 
 could add pre-fetching with the following\, where <code>j</code> is how fa
 r ahead you prefetch.</p>\n<div class="pl-code">\n<div class="mb-2 rounded
 " style="background: #f0f0f0\;">\n<pre style="padding: 0.5rem\; margin-bot
 tom: 0px\; line-height: 125%\;"><span style="color: #007020\;">for</span><
 span style="color: #bbbbbb\;"> </span>(i<span style="color: #bbbbbb\;"> </
 span><span style="color: #666666\;">=</span><span style="color: #bbbbbb\;"
 > </span><span style="color: #40a070\;">0</span>\;<span style="color: #bbb
 bbb\;"> </span>i<span style="color: #bbbbbb\;"> </span><span style="color:
  #666666\;">&lt\;</span><span style="color: #bbbbbb\;"> </span>n\;<span st
 yle="color: #bbbbbb\;"> </span>i<span style="color: #bbbbbb\;"> </span><sp
 an style="color: #666666\;">++</span>)<span style="color: #bbbbbb\;"> </sp
 an>{\n<span style="color: #bbbbbb\;">    </span>a[i]<span style="color: #b
 bbbbb\;"> </span><span style="color: #666666\;">=</span><span style="color
 : #bbbbbb\;"> </span>a[i]<span style="color: #bbbbbb\;"> </span><span styl
 e="color: #666666\;">+</span><span style="color: #bbbbbb\;"> </span>b[i]\;
 \n<span style="color: #bbbbbb\;">    </span>__builtin_prefetch(<span style
 ="color: #666666\;">&amp\;</span>a[i<span style="color: #666666\;">+</span
 >j])\;\n<span style="color: #bbbbbb\;">    </span>__builtin_prefetch(<span
  style="color: #666666\;">&amp\;</span>b[i<span style="color: #666666\;">+
 </span>j])\;\n<span style="color: #bbbbbb\;">    </span><span style="color
 : #60a0b0\; font-style: italic\;">/* ... */</span>\n}<span style="color: #
 bbbbbb\;">  </span>\n</pre>\n</div>\n</div>\n<h2>Loop Fusion</h2>\n<p>One 
 shortcoming of the supplied code is that it traverses the images several t
 imes\, once for each filter. As a result\, we're bringing all the data thr
 ough the cache several times\, and each time only performing a relatively 
 small amount of processing on it. There is an optimization called <i>loop 
 fusion</i>\, whereby we merge adjacent loops for efficiency sake\, includi
 ng cache efficiency. Refer to \\url{http://en.wikipedia.org/wiki/Loop\\_fu
 sion} or the <a href="https://canvas.illinois.edu/pl/course_instance/6/ins
 tructor/clientFilesCourse/cache_conscious_code.html">cheat sheet</a> for a
  little insight into loop fusion.</p>\n<p>Apply the loop fusion technique 
 to decrease the number of walks through the arrays. Note that you will nee
 d to do a small amount of work outside of the fused loop to make this poss
 ible.</p>\n<div class="alert alert-danger" role="alert">Loop fusion is not
  always a legal transformation\, meaning that sometimes it cannot be appli
 ed\, as it will produce incorrect results. Whether a transformation is leg
 al or not can be determined based on the memory accesses to the data. Thus
 \, while applying this transformation to improve performance you need to v
 erify that your code produces the same output as the original code that we
  have provided.</div>\n<h2>Testing and Debugging</h2>\n<p>You can test and
  execute the code with the commands</p>\n<div class="pl-code">\n<div class
 ="mb-2 rounded" style="background: #f0f0f0\;">\n<pre style="padding: 0.5re
 m\; margin-bottom: 0px\; line-height: 125%\;">make filter\n./filter\n</pre
 >\n</div>\n</div>\n<p><strong>Note</strong>: You will see that <code>./fil
 ter</code> prints <code>Image 2374</code>. This is only the value of a <i>
 single random pixel</i>. This means that if you <i>don't</i> see <code>Ima
 ge 2374</code> after making a transformation\, you're <i>definitely</i> wr
 ong\, but if you <i>do</i> see <code>Image 2374</code>\, it doesn't mean t
 hat you're correct. You should modify <code>main-filter.cpp</code> to veri
 fy your final result in a fashion similar to what you saw in the first par
 t. Incorrect outputs from the functions will cause you to lose all points 
 for an attempt (no partial credit will be given). Make sure you test your 
 own code with exhaustive output checks.</p>\n<div class="alert alert-dange
 r" role="alert">It is possible to achieve 2x-3x speedups in the code. <cod
 e>filter_none</code> can take upwards of 15 seconds to run\, so be patient
  when running <code>./filter</code>\n</div>
END:VEVENT
BEGIN:VEVENT
SUMMARY:27 SIMD [cs_233_120221_213565]
DTSTART:20220427T130000Z
DTEND:20220427T170000Z
DTSTAMP:20220112T152000Z
UID:event-calendar-event-45334
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_45334
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220427T130000Z
DTEND:20220427T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50793
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50793
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220427T150000Z
DTEND:20220427T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50824
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#calendar_event_50824
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 13 Part 1 [cs_233_120221_213565]
DTSTART:20220430T010000Z
DTEND:20220430T010000Z
DTSTAMP:20220112T032200Z
UID:event-assignment-367933
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:-------------------\nLearning Objectives\n-------------------\
 n\nLoop vectorization (using SIMD instructions)\n\n* Understand how SIMD i
 nstructions work by writing SIMD code using compiler instrinsics\n\n* Anal
 ysis of data dependences\n\n----------\nGuidelines\n----------\n\nIn this 
 part of the lab\, you will optimize the performance of some matrix multipl
 ication code by writing SIMD loop nests by hand.\n\n----------------------
 ------------------------------------------\nProblem Description: Manual ve
 ctorization w/ compiler intrinsics\n--------------------------------------
 --------------------------\n\nThe Intel Streaming SIMD Extensions (SSE) co
 mprise a set of extensions to the Intel x86 architecture that are designed
  to greatly enhance the performance of advanced media and communication ap
 plications.\n\nIn class\, you saw actual Intel SSE assembly instructions -
  however\, these are not easy to program with (in general\, assembly is no
 t the language of choice for larger programs). Fortunately\, some compiler
 s will have built-in intrinsics (which appear as function calls) that prov
 ide a one-to-one mapping to SSE assembly.\n\n----------------------\nExamp
 le: Inner Product\n----------------------\n\nRecall that the inner product
  of two vectors $\\textbf{x} = (x_1\, x_2\, ...\, x_k)$ and $\\textbf{y} =
  (y_1\, y_2\, ...\, y_k)$ is defined as follows: $\\textbf{x} \\bullet \\t
 extbf{y} = x_1y_1 + x_2y_2 + ... + x_ky_k$. Normally\, we could compute th
 e inner product as follows:\n\nfloat x[k]\; float y[k]\; // operand vector
 s of length k\nfloat inner_product = 0.0\; // accumulator\n\nfor (int i = 
 0\; i < k\; i++) {\ninner_product += x[i] * y[i]\;\n}\n\nTo take advantage
  of SSE operations\, we can rewrite this code using the SSE intrinsics:\n\
 n#include <xmmintrin.h>\n// All SSE instructions and __m128 data type are 
 defined in xmmintrin.h file\n\nfloat x[k]\; float y[k]\; // operand vector
 s of length k\nfloat inner_product = 0.0\, temp[4]\;\n__m128 acc\, X\, Y\;
  // 4x32-bit float registers\n\nacc = _mm_set1_ps(0.0)\; // set all four w
 ords in acc to 0.0\nint i = 0\;\nfor (\; i < (k - 3)\; i += 4) {\nX = _mm_
 loadu_ps(&x[i])\; // load groups of four floats\nY = _mm_loadu_ps(&y[i])\;
 \nacc = _mm_add_ps(acc\, _mm_mul_ps(X\, Y))\;\n}\n\n_mm_storeu_ps(temp\, a
 cc)\; // add the accumulated values\ninner_product = temp[0] + temp[1] + t
 emp[2] + temp[3]\;\n\nfor (\; i < k\; i++) { // add up the remaining float
 s\ninner_product += x[i] * y[i]\;\n}\n\nwhere __m128 is a 128-bit type for
  holding 4 floats (e.g. 32-bit single precision floating point numbers).\n
 \n----------------------------\nMatrix-Vector Multiplication\n------------
 ----------------\n\nWrite a function mv_multiply that multiplies a matrix 
 and a vector. Recall that if $A$ is a $k \\times k$ matrix\, $B$ is a $k$-
 vector\, and $A * B = C$\, then $C$ is a $k$-vector where $C_i = \\Sigma^k
 _{j=1} A_{i\,j} * B_j$. Note that:\n\n* We have provided code without SSE 
 intrinsics. Correctly implementing the code with intrinsics should speed t
 he code up by around a factor of 4 (as our vectors hold 4 floats).\n\n* Yo
 u must check whether your optimized code is giving the same result as the 
 unoptimized version. However\, since you are dealing with floating point n
 umbers\, the two results need not be exactly same. You should check if the
  two values are within a tolerable gap. See the main function for more inf
 o.\n\n* For this problem\, SIZE may not be a multiple of 4\, so you should
  write your code accordingly. We will be testing this case\, so you should
  too.\n\n-----------------\nUseful Intrinsics\n-----------------\n\n__m128
  _mm_loadu_ps(float *)\n__m128 _mm_storeu_ps(float *\, __m128)\n__m128 _mm
 _add_ps(__m128\, __m128) // parallel arithmetic ops\n__m128 _mm_sub_ps(__m
 128\, __m128)\n__m128 _mm_mul_ps(__m128\, __m128)\n__m128 _mm_cmplt_ps(__m
 128 a\, __m128 b)\n\nFor further details about SSE intrinsics\, visit the 
 Intel Intrinsics guide: https://software.intel.com/sites/landingpage/Intri
 nsicsGuide/\n\n-----------------------\nCompiling and Debugging\n---------
 --------------\n\nYou can test and execute the code with the commands\n\nm
 ake mv-mult\n./mv-mult\n\nYou may see a large variation in execution time 
 at different times depending on how server resources are allocated to you 
 at the time of running your code. You may need to run your code multiple t
 imes to get useful run times. In general\, you should focus on the shortes
 t execution times\, since (unlike in other sciences) all of the variance i
 s coming from interference which is slowing down your runs (i.e.\, the fas
 test times are the ones with the least interference\, which is what we wan
 t).\n\nTo receive full credit\, your modified code must still implement th
 e same algorithm as the original code.\n\nIt is possible to achieve 4x-5x 
 speedups from the non-vectorized code to the vectorized code. The variance
  in run-time can be quite high (some runs of the same code may be 2x faste
 r than other runs)\, but it should be reasonable clear when you have achie
 ved good vectorization speed ups.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#assignment_367933
X-ALT-DESC;FMTTYPE=text/html:<h2>Learning Objectives</h2>\n\n<p>Loop vecto
 rization (using SIMD instructions)</p>\n\n<ul>\n<li>Understand how SIMD in
 structions work by writing SIMD code using compiler instrinsics</li>\n<li>
 Analysis of data dependences</li>\n</ul>\n\n<h2>Guidelines</h2>\n<p>In thi
 s part of the lab\, you will optimize the performance of some matrix multi
 plication code by writing SIMD loop nests by hand.</p>\n\n<h2>Problem Desc
 ription: Manual vectorization w/ compiler intrinsics</h2>\n\n<p>The Intel 
 <strong>Streaming SIMD Extensions (SSE)</strong> comprise a set of extensi
 ons to the Intel x86 architecture that are designed to greatly enhance the
  performance of advanced media and communication applications.</p>\n\n<p>I
 n class\, you saw actual Intel SSE <i>assembly instructions</i> - however\
 , these are not easy to program with (in general\, assembly is not the lan
 guage of choice for larger programs).  Fortunately\, some compilers will h
 ave built-in intrinsics (which appear as function calls) that provide a\no
 ne-to-one mapping to SSE assembly.</p>\n\n<h2>Example: Inner Product</h2>\
 n<p>Recall that the <i>inner product</i> of two vectors $\\textbf{x} = (x_
 1\, x_2\, ...\, x_k)$ and $\\textbf{y} = (y_1\, y_2\, ...\, y_k)$ is defin
 ed as follows: $\\textbf{x} \\bullet \\textbf{y} = x_1y_1 + x_2y_2 + ... +
  x_ky_k$. Normally\, we could compute the inner product as follows:</p>\n\
 n<div class="pl-code"><span><div class="mb-2 rounded" style="background: #
 f0f0f0"><pre style="padding: 0.5rem\; margin-bottom: 0px\; line-height: 12
 5%\;"><span></span><span style="color: #902000">float</span><span style="c
 olor: #bbbbbb"> </span>x[k]\;<span style="color: #bbbbbb">  </span><span s
 tyle="color: #902000">float</span><span style="color: #bbbbbb"> </span>y[k
 ]\;<span style="color: #bbbbbb">        </span><span style="color: #60a0b0
 \; font-style: italic">// operand vectors of length k</span>\n<span style=
 "color: #902000">float</span><span style="color: #bbbbbb"> </span>inner_pr
 oduct<span style="color: #bbbbbb"> </span><span style="color: #666666">=</
 span><span style="color: #bbbbbb"> </span><span style="color: #40a070">0.0
 </span>\;<span style="color: #bbbbbb">      </span><span style="color: #60
 a0b0\; font-style: italic">// accumulator</span>\n\n<span style="color: #0
 07020\; ">for</span><span style="color: #bbbbbb"> </span>(<span style="col
 or: #902000">int</span><span style="color: #bbbbbb"> </span>i<span style="
 color: #bbbbbb"> </span><span style="color: #666666">=</span><span style="
 color: #bbbbbb"> </span><span style="color: #40a070">0</span>\;<span style
 ="color: #bbbbbb"> </span>i<span style="color: #bbbbbb"> </span><span styl
 e="color: #666666">&lt\;</span><span style="color: #bbbbbb"> </span>k\;<sp
 an style="color: #bbbbbb"> </span>i<span style="color: #666666">++</span>)
 <span style="color: #bbbbbb"> </span>{<span style="color: #bbbbbb"></span>
 \n<span style="color: #bbbbbb">    </span>inner_product<span style="color:
  #bbbbbb"> </span><span style="color: #666666">+=</span><span style="color
 : #bbbbbb"> </span>x[i]<span style="color: #bbbbbb"> </span><span style="c
 olor: #666666">*</span><span style="color: #bbbbbb"> </span>y[i]\;<span st
 yle="color: #bbbbbb"></span>\n}<span style="color: #bbbbbb"></span>\n</pre
 ></div>\n</span></div>\n\n<p>To take advantage of SSE operations\, we can 
 rewrite this code using the SSE intrinsics:</p>\n\n<div class="pl-code"><s
 pan><div class="mb-2 rounded" style="background: #f0f0f0"><pre style="padd
 ing: 0.5rem\; margin-bottom: 0px\; line-height: 125%\;"><span></span><span
  style="color: #007020">#include</span><span style="color: #bbbbbb"> </spa
 n><span style="color: #60a0b0\; font-style: italic">&lt\;xmmintrin.h&gt\;<
 /span><span style="color: #007020"></span>\n<span style="color: #60a0b0\; 
 font-style: italic">// All SSE instructions and __m128 data type are defin
 ed in xmmintrin.h file</span>\n\n\n<span style="color: #902000">float</spa
 n><span style="color: #bbbbbb"> </span>x[k]\;<span style="color: #bbbbbb">
   </span><span style="color: #902000">float</span><span style="color: #bbb
 bbb"> </span>y[k]\;<span style="color: #bbbbbb">        </span><span style
 ="color: #60a0b0\; font-style: italic">// operand vectors of length k</spa
 n>\n<span style="color: #902000">float</span><span style="color: #bbbbbb">
  </span>inner_product<span style="color: #bbbbbb"> </span><span style="col
 or: #666666">=</span><span style="color: #bbbbbb"> </span><span style="col
 or: #40a070">0.0</span>\,<span style="color: #bbbbbb"> </span>temp[<span s
 tyle="color: #40a070">4</span>]\;<span style="color: #bbbbbb"></span>\n<sp
 an style="color: #007020\; ">__m128</span><span style="color: #bbbbbb"> </
 span>acc\,<span style="color: #bbbbbb"> </span>X\,<span style="color: #bbb
 bbb"> </span>Y\;<span style="color: #bbbbbb">               </span><span s
 tyle="color: #60a0b0\; font-style: italic">// 4x32-bit float registers</sp
 an>\n\nacc<span style="color: #bbbbbb"> </span><span style="color: #666666
 ">=</span><span style="color: #bbbbbb"> </span>_mm_set1_ps(<span style="co
 lor: #40a070">0.0</span>)\;<span style="color: #bbbbbb"> </span><span styl
 e="color: #60a0b0\; font-style: italic">// set all four words in acc to 0.
 0</span>\n<span style="color: #902000">int</span><span style="color: #bbbb
 bb"> </span>i<span style="color: #bbbbbb"> </span><span style="color: #666
 666">=</span><span style="color: #bbbbbb"> </span><span style="color: #40a
 070">0</span>\;<span style="color: #bbbbbb"></span>\n<span style="color: #
 007020\; ">for</span><span style="color: #bbbbbb"> </span>(\;<span style="
 color: #bbbbbb"> </span>i<span style="color: #bbbbbb"> </span><span style=
 "color: #666666">&lt\;</span><span style="color: #bbbbbb"> </span>(k<span 
 style="color: #bbbbbb"> </span><span style="color: #666666">-</span><span 
 style="color: #bbbbbb"> </span><span style="color: #40a070">3</span>)\;<sp
 an style="color: #bbbbbb"> </span>i<span style="color: #bbbbbb"> </span><s
 pan style="color: #666666">+=</span><span style="color: #bbbbbb"> </span><
 span style="color: #40a070">4</span>)<span style="color: #bbbbbb"> </span>
 {<span style="color: #bbbbbb"></span>\n<span style="color: #bbbbbb">    </
 span>X<span style="color: #bbbbbb"> </span><span style="color: #666666">=<
 /span><span style="color: #bbbbbb"> </span>_mm_loadu_ps(<span style="color
 : #666666">&amp\;</span>x[i])\;<span style="color: #bbbbbb"> </span><span 
 style="color: #60a0b0\; font-style: italic">// load groups of four floats<
 /span>\n<span style="color: #bbbbbb">    </span>Y<span style="color: #bbbb
 bb"> </span><span style="color: #666666">=</span><span style="color: #bbbb
 bb"> </span>_mm_loadu_ps(<span style="color: #666666">&amp\;</span>y[i])\;
 <span style="color: #bbbbbb"></span>\n<span style="color: #bbbbbb">    </s
 pan>acc<span style="color: #bbbbbb"> </span><span style="color: #666666">=
 </span><span style="color: #bbbbbb"> </span>_mm_add_ps(acc\,<span style="c
 olor: #bbbbbb"> </span>_mm_mul_ps(X\,<span style="color: #bbbbbb"> </span>
 Y))\;<span style="color: #bbbbbb"></span>\n}<span style="color: #bbbbbb"><
 /span>\n\n_mm_storeu_ps(temp\,<span style="color: #bbbbbb"> </span>acc)\;<
 span style="color: #bbbbbb"> </span><span style="color: #60a0b0\; font-sty
 le: italic">// add the accumulated values</span>\ninner_product<span style
 ="color: #bbbbbb"> </span><span style="color: #666666">=</span><span style
 ="color: #bbbbbb"> </span>temp[<span style="color: #40a070">0</span>]<span
  style="color: #bbbbbb"> </span><span style="color: #666666">+</span><span
  style="color: #bbbbbb"> </span>temp[<span style="color: #40a070">1</span>
 ]<span style="color: #bbbbbb"> </span><span style="color: #666666">+</span
 ><span style="color: #bbbbbb"> </span>temp[<span style="color: #40a070">2<
 /span>]<span style="color: #bbbbbb"> </span><span style="color: #666666">+
 </span><span style="color: #bbbbbb"> </span>temp[<span style="color: #40a0
 70">3</span>]\;<span style="color: #bbbbbb"></span>\n\n<span style="color:
  #007020\; ">for</span><span style="color: #bbbbbb"> </span>(\;<span style
 ="color: #bbbbbb"> </span>i<span style="color: #bbbbbb"> </span><span styl
 e="color: #666666">&lt\;</span><span style="color: #bbbbbb"> </span>k\;<sp
 an style="color: #bbbbbb"> </span>i<span style="color: #666666">++</span>)
 <span style="color: #bbbbbb"> </span>{<span style="color: #bbbbbb">       
      </span><span style="color: #60a0b0\; font-style: italic">// add up th
 e remaining floats</span>\n<span style="color: #bbbbbb">    </span>inner_p
 roduct<span style="color: #bbbbbb"> </span><span style="color: #666666">+=
 </span><span style="color: #bbbbbb"> </span>x[i]<span style="color: #bbbbb
 b"> </span><span style="color: #666666">*</span><span style="color: #bbbbb
 b"> </span>y[i]\;<span style="color: #bbbbbb"></span>\n}<span style="color
 : #bbbbbb"></span>\n</pre></div>\n</span></div>\n\n<p>where <code>__m128</
 code> is a 128-bit type for holding 4 floats (e.g. 32-bit single precision
  floating point numbers).\n\n</p>\n<h2>Matrix-Vector Multiplication</h2>\n
 <p>Write a function <code>mv_multiply</code> that multiplies a matrix and 
 a vector.  Recall that if $A$ is a $k \\times k$ matrix\, $B$ is a $k$-vec
 tor\, and $A * B = C$\, then $C$ is a $k$-vector where $C_i = \\Sigma^k_{j
 =1} A_{i\,j} * B_j$. Note that:</p>\n\n<ul>\n<li>We have provided code wit
 hout SSE intrinsics. Correctly implementing the code with intrinsics shoul
 d speed the code up by around a factor of 4 (as our vectors hold 4 floats)
 .</li>\n<li>You must check whether your optimized code is giving the same 
 result as the unoptimized version. However\, since you are dealing with fl
 oating point numbers\, the two results need not be exactly same. You shoul
 d check if the two values are within a tolerable gap. See the main functio
 n for more info.</li>\n<li>For this problem\, <code>SIZE</code> may <stron
 g>not be a multiple of 4</strong>\, so you should write your code accordin
 gly. We will be testing this case\, so you should too.</li>\n</ul>\n\n<h2>
 Useful Intrinsics</h2>\n<div class="pl-code"><span><div class="mb-2 rounde
 d" style="background: #f0f0f0"><pre style="padding: 0.5rem\; margin-bottom
 : 0px\; line-height: 125%\;"><span></span>  __m128 _mm_loadu_ps(float *)\n
   __m128 _mm_storeu_ps(float *\, __m128)\n  __m128 _mm_add_ps(__m128\, __m
 128) // parallel arithmetic ops\n  __m128 _mm_sub_ps(__m128\, __m128)\n  _
 _m128 _mm_mul_ps(__m128\, __m128)\n  __m128 _mm_cmplt_ps(__m128 a\, __m128
  b)\n</pre></div>\n</span></div>\n\n<p>For further details about SSE intri
 nsics\, visit the Intel Intrinsics guide: <a href="https://software.intel.
 com/sites/landingpage/IntrinsicsGuide/">https://software.intel.com/sites/l
 andingpage/IntrinsicsGuide/</a></p>\n\n<h2>Compiling and Debugging</h2>\n<
 p>You can test and execute the code with the commands</p>\n<div class="pl-
 code"><span><div class="mb-2 rounded" style="background: #f0f0f0"><pre sty
 le="padding: 0.5rem\; margin-bottom: 0px\; line-height: 125%\;"><span></sp
 an>make mv-mult\n./mv-mult\n</pre></div>\n</span></div>\n\n<p>You may see 
 a large variation in execution time at different times depending on how se
 rver resources are allocated to you at the time of running your code. You 
 may need to run your code multiple times to get useful run times. In gener
 al\, you should focus on the <strong>shortest</strong> execution times\, s
 ince (unlike in other sciences) all of the variance is coming from interfe
 rence which is slowing down your runs (i.e.\, the fastest times are the on
 es with the least interference\, which is what we want).</p>\n\n<p>To rece
 ive full credit\, your modified code must still implement the same algorit
 hm as the original code.</p>\n\n<div class="alert alert-danger" role="aler
 t">\nIt is possible to achieve 4x-5x speedups from the non-vectorized code
  to the vectorized code. The variance in run-time can be quite high (some 
 runs of the same code may be 2x faster than other runs)\, but it should be
  reasonable clear when you have achieved good vectorization speed ups.\n</
 div>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Quiz 11 [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220429T000000
DTEND;VALUE=DATE:20220429T000000
DTSTAMP:20220112T143000Z
UID:event-assignment-367963
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Scroll to the bottom for our hand grading policies\n\nPractice
  Quiz 11 is available and mirrors the format and content of Quiz 11 exactl
 y. \n\nThe first three questions test your general ability to go from a p
 iece of code to an address sequence\, to tracing the contents of a cache t
 hrough that address sequence\, and then determining a series of hits/misse
 s based on that trace.\n\nLast two questions will test your knowledge of c
 ache conscious coding (i.e.\, loop fusion\, loop fission\, loop inversion\
 , tiling\, and pre-fetching).\n\nReview Video\n------------\n\nVideo link:
  https://mediaspace.illinois.edu/media/t/1_27uh9eap\n\nOverview of quiz st
 ructure: https://mediaspace.illinois.edu/media/t/1_27uh9eap?st=38\nAddress
  sequence to hit/miss: https://mediaspace.illinois.edu/media/t/1_27uh9eap?
 st=95\nTrace how the cache contents change: https://mediaspace.illinois.ed
 u/media/t/1_27uh9eap?st=250\nCode to an address sequence: https://mediaspa
 ce.illinois.edu/media/t/1_27uh9eap?st=485\nCache Conscious Coding problems
 : https://mediaspace.illinois.edu/media/t/1_27uh9eap?st=585\nDiscussion of
  hand grading policy: https://mediaspace.illinois.edu/media/t/1_27uh9eap?s
 t=598\n1st Cache Conscious Coding problem: https://mediaspace.illinois.edu
 /media/t/1_27uh9eap?st=973\n2nd Cache Conscious Coding problem: https://me
 diaspace.illinois.edu/media/t/1_27uh9eap?st=2119\nWhy tiling? and Picking 
 your tile size: https://mediaspace.illinois.edu/media/t/1_27uh9eap?st=2626
 \n\n------------------\nHandgrading policy\n------------------\n\nAutograd
 ing this quiz in a way that is fair to all possible solutions is hard if n
 ot impossible. We're doing the best we can to make the exam fair. We have 
 not finalized a policy for hand grading because we cannot predict all the 
 modes of failure of our current grading scheme\, but here are some expecta
 tions and general guidelines we will follow\n\n* We will hand grade some s
 ubset of exams that did not receive full credit on at least one submission
 . The exact criteria will depend in part on what issues students encounter
  during the exam. Example 1\, if you earned 90% credit on your first submi
 ssion and 100% credit on your second submission (earning you 49/50 points)
 \, we are not committing to hand grade your exam. Example 2\, if none of y
 our submissions received that glorious 100% check mark from PrairieLearn\,
  then it is likely but not guaranteed that we will consider your code for 
 hand grading.\n\n* We will hand grade ONLY your last submission.\n\n* We e
 xpect to finish these hand grades within one week.\n\n* Hand grading will 
 only keep your grade the same or improve it compared to what you earned fr
 om the autograder.\n\n* Hand grading will use your written justifications 
 to award additional partial credit when appropriate. Written justification
 s are not considered by the autograder (if you are an expert at NLP\, you 
 are welcome to help us change that in future semesters :) . If your code o
 utperforms our solution\, congrats! If your code outperforms our solution 
 with a different set of operations than we chose\, we will award full cred
 it during hand grading\, assuming your checkboxes and justifications match
  your solution.\n\n* Hand grading will consider the check boxes you select
 ed\, your written justification\, and your code as a unit. For example\, i
 f you came up with a solution that got 95% of the credit for the performan
 ce check using only tiling while our solution used inversion and pre-fetch
 ing\, KEEP the checkboxes as having only tiling and KEEP your justificatio
 n to discuss only tiling (yes\, that means you will get 0% for the checkbo
 xes section). If your justification and checkboxes align well and show a c
 lear\, deep understanding of the problem\, we will award partial credit. I
 f your justification and checkboxes do not align with each other and the c
 ode you submitted\, we will not award partial credit.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=04&year=2022#assignment_367963
X-ALT-DESC;FMTTYPE=text/html:<p>Scroll to the bottom for our hand grading 
 policies</p>\n<p>Practice Quiz 11 is available and mirrors the format and 
 content of Quiz 11 exactly.&nbsp\;</p>\n<p>The first three questions test 
 your general ability to go from a piece of code to an address sequence\, t
 o tracing the contents of a cache through that address sequence\, and then
  determining a series of hits/misses based on that trace.</p>\n<p>Last two
  questions will test your knowledge of cache conscious coding (i.e.\, loop
  fusion\, loop fission\, loop inversion\, tiling\, and pre-fetching).</p>\
 n<h3>Review Video</h3>\n<p>Video link: <a href="https://mediaspace.illinoi
 s.edu/media/t/1_27uh9eap" target="_blank">https://mediaspace.illinois.edu/
 media/t/1_27uh9eap</a></p>\n<p>Overview of quiz structure: <a href="https:
 //mediaspace.illinois.edu/media/t/1_27uh9eap?st=38" target="_blank">https:
 //mediaspace.illinois.edu/media/t/1_27uh9eap?st=38</a> <br>Address sequenc
 e to hit/miss: <a href="https://mediaspace.illinois.edu/media/t/1_27uh9eap
 ?st=95" target="_blank">https://mediaspace.illinois.edu/media/t/1_27uh9eap
 ?st=95</a> <br>Trace how the cache contents change: <a href="https://media
 space.illinois.edu/media/t/1_27uh9eap?st=250" target="_blank">https://medi
 aspace.illinois.edu/media/t/1_27uh9eap?st=250</a> <br>Code to an address s
 equence: <a href="https://mediaspace.illinois.edu/media/t/1_27uh9eap?st=48
 5" target="_blank">https://mediaspace.illinois.edu/media/t/1_27uh9eap?st=4
 85</a> <br>Cache Conscious Coding problems: <a href="https://mediaspace.il
 linois.edu/media/t/1_27uh9eap?st=585" target="_blank">https://mediaspace.i
 llinois.edu/media/t/1_27uh9eap?st=585</a> <br>Discussion of hand grading p
 olicy: <a href="https://mediaspace.illinois.edu/media/t/1_27uh9eap?st=598"
  target="_blank">https://mediaspace.illinois.edu/media/t/1_27uh9eap?st=598
 </a> <br>1st Cache Conscious Coding problem: <a href="https://mediaspace.i
 llinois.edu/media/t/1_27uh9eap?st=973" target="_blank">https://mediaspace.
 illinois.edu/media/t/1_27uh9eap?st=973</a> <br>2nd Cache Conscious Coding 
 problem: <a href="https://mediaspace.illinois.edu/media/t/1_27uh9eap?st=21
 19" target="_blank">https://mediaspace.illinois.edu/media/t/1_27uh9eap?st=
 2119</a> <br>Why tiling? and Picking your tile size: <a href="https://medi
 aspace.illinois.edu/media/t/1_27uh9eap?st=2626" target="_blank">https://me
 diaspace.illinois.edu/media/t/1_27uh9eap?st=2626</a></p>\n<h2>Handgrading 
 policy</h2>\n<p>Autograding this quiz in a way that is fair to all possibl
 e solutions is hard if not impossible. We're doing the best we can to make
  the exam fair. We have not finalized a policy for hand grading because we
  cannot predict all the modes of failure of our current grading scheme\, b
 ut here are some expectations and general guidelines we will follow</p>\n<
 ul>\n<li>We will hand grade some subset of exams that did not receive full
  credit on at least one submission. The exact criteria will depend in part
  on what issues students encounter during the exam. Example 1\, if you ear
 ned 90% credit on your first submission and 100% credit on your second sub
 mission (earning you 49/50 points)\, we are not committing to hand grade y
 our exam. Example 2\, if none of your submissions received that glorious 1
 00% check mark from PrairieLearn\, then it is likely but not guaranteed th
 at we will consider your code for hand grading.</li>\n<li>We will hand gra
 de ONLY your last submission.</li>\n<li>We expect to finish these hand gra
 des within one week.</li>\n<li>Hand grading will only keep your grade the 
 same or improve it compared to what you earned from the autograder.</li>\n
 <li>Hand grading will use your written justifications to award additional 
 partial credit when appropriate. Written justifications are not considered
  by the autograder (if you are an expert at NLP\, you are welcome to help 
 us change that in future semesters :) . If your code outperforms our solut
 ion\, congrats! If your code outperforms our solution with a different set
  of operations than we chose\, we will award full credit during hand gradi
 ng\, assuming your checkboxes and justifications match your solution.</li>
 \n<li>Hand grading will consider the check boxes you selected\, your writt
 en justification\, and your code as a unit. For example\, if you came up w
 ith a solution that got 95% of the credit for the performance check using 
 only tiling while our solution used inversion and pre-fetching\, KEEP the 
 checkboxes as having only tiling and KEEP your justification to discuss on
 ly tiling (yes\, that means you will get 0% for the checkboxes section). I
 f your justification and checkboxes align well and show a clear\, deep und
 erstanding of the problem\, we will award partial credit. If your justific
 ation and checkboxes do not align with each other and the code you submitt
 ed\, we will not award partial credit.</li>\n</ul>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab Spimbot [cs_233_120221_213565]
DTSTART:20220502T010000Z
DTEND:20220502T010000Z
DTSTAMP:20220112T032300Z
UID:event-assignment-367953
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[spimbot_logo.png] (https://canvas.illinois.edu/courses/18018/
 files/3110436/preview)\n\n**********************\nWelcome to LabSpimbot!\n
 **********************\n\nLabSpimbot is structured as a competition\, wher
 e you will work in teams to write MIPS code to play a territorial game usi
 ng the SPIMBot. Unlike other labs thus far\, your team will need to "quali
 fy" in order to play in the tournament. During the tournament\, your team'
 s SPIMBot will play against other team's SPIMBot. The winning team will ge
 t lots of bragging rights.\n\n-------------\nThe Objective\n-------------\
 n\nThe main goal of the game is to be the one with the most points. You ca
 n earn points by owning more tiles than your opponent or killing your oppo
 nent's bot. If points are tied\, a random bot is picked as the winner.\n\n
 You will build upon the work you did for Lab 9. But this time around\, we 
 will be using a new map and introducing a few new game features. Consult t
 he [documentation on Canvas] (https://canvas.illinois.edu/courses/18018/pa
 ges/spimbot-documentation) for the full details\, along with information a
 bout new MMIO features\, game mechanics\, command-line flags\, etc.\n\n---
 -----------------------\nQualifications [75 points]\n---------------------
 -----\n\nIn the qualification round\, your SPIMBot will play against an "a
 dversary" bot. The adversary bot is designed to ensure your SPIMBot meets 
 a certain baseline. This bot uses a strategy that includes an element of r
 andomness. Therefore\, in order to minimize on "lucky" wins and to keep qu
 alifications fair\, we will run your SPIMBot against the adversary bot 3 t
 imes\, with bots winning 2 out of 3 qualifying. See the section below for 
 how the grading will be done. The following is the command we will run:\n\
 nQtSpimbot -file spimbot.s -file2 adversary.s -mapseed X -puzzleseed X -qu
 al\n\nwhere X is a number of our choosing and will be used for all teams. 
 You are encouraged to run this same command during your local development 
 to see how well your SPIMBot is performing against the adversary. See sect
 ion below for explanation of the provided lab files.\n\n------------------
 ----\nTournament [25 points]\n----------------------\n\nThe actual tournam
 ent will be held as a single day event near the end of the semester. Only 
 those teams that qualified will be entered into the tournament. Your SPIMB
 ot will play against your classmates' SPIMBot in the tournament rounds\, w
 ith the following command:\n\nQtSpimbot -file bot1.s -file2 bot2.s -tourna
 ment\n\nwhere bot1.s is your team's bot and bot2.s is the other team.\n\n-
 ----\nTeams\n-----\n\nYou will work in groups of 2 to 3 students. Your tea
 m can choose any name you like as long as it's appropriate. If you want to
  change your team name\, you may leave your team in PrairieLearn and creat
 e a new team.\n\n-------\nGrading\n-------\n\nYour SPIMBot will be scored 
 out of a 100 points.\n\nQualifying: The first 75 points will be awarded wh
 en you qualify for the tournament. For qualification\, you need to win 2 o
 ut of the 3 total games. You win a game by either having the most points\,
  or killing the adversary bot (at least) once by the end of the game. Your
  score will be calculated from the best 2 out of 3.\n\nCompeting: The rema
 ining 25 points will be earned during the tournament and will be based on 
 your placement. Note that bots that do not successfully pass qualification
 s will not be able to play in the tournament. So you cannot earn these poi
 nts unless you meet the qualifying baseline.\n\nYour highest placement in 
 the tournament will determine how much of the remaining 25 points you rece
 ive. The exact scoring here is subject to change depending on the distribu
 tion of results.\n\nLab Writeup\n-----------\n\nAs part of your final subm
 ission\, you will pass in a lab writeup. It should contain a few paragraph
 s (in ASCII) that describe your strategy and any interesting optimizations
  that you implemented. Explain what your team focused on\, why you focused
  on those goals\, and at what points those goals shifted.\n\nIn the case i
 f your team's bot does not qualify\, we may use your writup to award parti
 al credit.\n\n**************\nDownload Files\n**************\n\nDownloadab
 le files are available in PrairieLearn. Submission of files will also be d
 one in PrairieLearn.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#assignment_367953
X-ALT-DESC;FMTTYPE=text/html:<div style="text-align: center\;">\n<div clas
 s="container-fluid"><img src="https://canvas.illinois.edu/courses/18018/fi
 les/3110436/preview" alt="spimbot_logo.png" data-api-endpoint="https://can
 vas.illinois.edu/api/v1/courses/18018/files/3110436" data-api-returntype="
 File"></div>\n<h1>Welcome to LabSpimbot!</h1>\n</div>\n<p>LabSpimbot is st
 ructured as a competition\, where you will work in teams to write MIPS cod
 e to play a territorial game using the SPIMBot. Unlike other labs thus far
 \, your team will need to "qualify" in order to play in the tournament. Du
 ring the tournament\, your team's SPIMBot will play against other team's S
 PIMBot. The winning team will get lots of bragging rights.</p>\n<h2>The Ob
 jective</h2>\n<p>The main goal of the game is to be the one with the most 
 points. You can earn points by owning more tiles than your opponent or kil
 ling your opponent's bot. If points are tied\, a random bot is picked as t
 he winner.</p>\n<p>You will build upon the work you did for Lab 9. But thi
 s time around\, we will be using a new map and introducing a few new game 
 features. Consult the <a href="https://canvas.illinois.edu/courses/18018/p
 ages/spimbot-documentation" data-api-endpoint="https://canvas.illinois.edu
 /api/v1/courses/18018/pages/spimbot-documentation" data-api-returntype="Pa
 ge">documentation on Canvas</a> for the full details\, along with informat
 ion about new MMIO features\, game mechanics\, command-line flags\, etc.</
 p>\n<h2>Qualifications [75 points]</h2>\n<p>In the qualification round\, y
 our SPIMBot will play against an "adversary" bot. The adversary bot is des
 igned to ensure your SPIMBot meets a certain baseline. This bot uses a str
 ategy that includes an element of randomness. Therefore\, in order to mini
 mize on "lucky" wins and to keep qualifications fair\, we will run your SP
 IMBot against the adversary bot 3 times\, with bots winning 2 out of 3 qua
 lifying. See the section below for how the grading will be done. The follo
 wing is the command we will run:</p>\n<div class="pl-code">\n<div class="m
 b-2 rounded" style="background: #f0f0f0\;">\n<pre style="padding: 0.5rem\;
  margin-bottom: 0px\; line-height: 125%\;">QtSpimbot -file spimbot.s -file
 2 adversary.s -mapseed X -puzzleseed X -qual\n</pre>\n</div>\n</div>\n<p>w
 here <code>X</code> is a number of our choosing and will be used for all t
 eams. You are encouraged to run this same command during your local develo
 pment to see how well your SPIMBot is performing against the adversary. Se
 e section below for explanation of the provided lab files.</p>\n<h2>Tourna
 ment [25 points]</h2>\n<p>The actual tournament will be held as a single d
 ay event near the end of the semester. Only those teams that qualified wil
 l be entered into the tournament. Your SPIMBot will play against your clas
 smates' SPIMBot in the tournament rounds\, with the following command:</p>
 \n<div class="pl-code">\n<div class="mb-2 rounded" style="background: #f0f
 0f0\;">\n<pre style="padding: 0.5rem\; margin-bottom: 0px\; line-height: 1
 25%\;">QtSpimbot -file bot1.s -file2 bot2.s -tournament\n</pre>\n</div>\n<
 /div>\n<p>where <code>bot1.s</code> is your team's bot and <code>bot2.s</c
 ode> is the other team.</p>\n<h2>Teams</h2>\n<p>You will work in groups of
  2 to 3 students. Your team can choose any name you like as long as it's a
 ppropriate. If you want to change your team name\, you may leave your team
  in PrairieLearn and create a new team.</p>\n<h2>Grading</h2>\n<p>Your SPI
 MBot will be scored out of a 100 points.</p>\n<p><strong>Qualifying:</stro
 ng> The first 75 points will be awarded when you qualify for the tournamen
 t. For qualification\, you need to win 2 out of the 3 total games. You win
  a game by either having the most points\, or killing the adversary bot (a
 t least) once by the end of the game. Your score will be calculated from t
 he best 2 out of 3.</p>\n<p><strong>Competing:</strong> The remaining 25 p
 oints will be earned during the tournament and will be based on your place
 ment. <em>Note that bots that do not successfully pass qualifications will
  not be able to play in the tournament.</em> So you cannot earn these poin
 ts unless you meet the qualifying baseline.</p>\n<p>Your highest placement
  in the tournament will determine how much of the remaining 25 points you 
 receive. The exact scoring here is subject to change depending on the dist
 ribution of results.</p>\n<h3>Lab Writeup</h3>\n<p>As part of your final s
 ubmission\, you will pass in a lab writeup. It should contain a few paragr
 aphs (in ASCII) that describe your strategy and any interesting optimizati
 ons that you implemented. Explain what your team focused on\, why you focu
 sed on those goals\, and at what points those goals shifted.</p>\n<p>In th
 e case if your team's bot does not qualify\, we may use your writup to awa
 rd partial credit.</p>\n<h1>Download Files</h1>\n<p>Downloadable files are
  available in PrairieLearn. Submission of files will also be done in Prair
 ieLearn.</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:28 Cache Coherence [cs_233_120221_213565]
DTSTART:20220502T130000Z
DTEND:20220502T170000Z
DTSTAMP:20220112T152000Z
UID:event-calendar-event-45335
SEQUENCE:0
CLASS:PUBLIC
LOCATION:0035 CIF
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#calendar_event_45335
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220502T130000Z
DTEND:20220502T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50794
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#calendar_event_50794
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220502T150000Z
DTEND:20220502T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50825
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#calendar_event_50825
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:EXTRA CREDIT BODY COMPOSITION AND WEIGHT MANAGEMENT DISCUSSION BOA
 RD - DUE BEFORE 3PM CT MONDAY MAY 2ND (FSHN 120 ONL Spring 2022 CRN57561) 
 [fshn_120_120221_213078]
DTSTART:20220502T200000Z
DTEND:20220502T200000Z
DTSTAMP:20220110T195200Z
UID:event-assignment-override-12730
SEQUENCE:0
CLASS:PUBLIC
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=05&year=2022#assignment_366720
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab 13 Part 2 [cs_233_120221_213565]
DTSTART:20220503T010000Z
DTEND:20220503T010000Z
DTSTAMP:20220112T032200Z
UID:event-assignment-367934
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:-------------------\nLearning Objectives\n-------------------\
 n\nLoop vectorization (using SIMD instructions and compiler-based vectoriz
 ation)\n\n* Understand how SIMD instructions work by writing SIMD code usi
 ng compiler instrinsics\n\n* Analysis of data dependences\n\n* Use of a co
 mpiler to enable vectorization of code (using pragmas and compiler directi
 ves)\n\n----------\nGuidelines\n----------\n\nIn this part of the lab\, yo
 u will\n\n* optimize the performance of some  cubic mandelbrot code by wr
 iting SIMD loop nests by hand\n\n* optimize the performance of code by usi
 ng pragmas\, compiler directives or simple program transformations to enab
 le compiler to vectorize loops.\n\n---------------------------------------
 -------------------------\nProblem Description: Manual vectorization w/ co
 mpiler intrinsics\n-------------------------------------------------------
 ---------\n\nThe Intel Streaming SIMD Extensions (SSE) comprise a set of e
 xtensions to the Intel x86 architecture that are designed to greatly enhan
 ce the performance of advanced media and communication applications.\n\nIn
  class\, you saw actual Intel SSE assembly instructions - however\, these 
 are not easy to program with (in general\, assembly is not the language of
  choice for larger programs). Fortunately\, some compilers will have built
 -in intrinsics (which appear as function calls) that provide a one-to-one 
 mapping to SSE assembly.\n\n----------------------\nExample: Inner Product
 \n----------------------\n\nRecall that the inner product of two vectors $
 \\textbf{x} = (x_1\, x_2\, ...\, x_k)$ and $\\textbf{y} = (y_1\, y_2\, ...
 \, y_k)$ is defined as follows: $\\textbf{x} \\bullet \\textbf{y} = x_1y_1
  + x_2y_2 + ... + x_ky_k$. Normally\, we could compute the inner product a
 s follows:\n\nfloat x[k]\; float y[k]\; // operand vectors of length k\nfl
 oat inner_product = 0.0\; // accumulator\n\nfor (int i = 0\; i < k\; i++) 
 {\ninner_product += x[i] * y[i]\;\n}\n\nTo take advantage of SSE operation
 s\, we can rewrite this code using the SSE intrinsics:\n\n#include <xmmint
 rin.h>\n// All SSE instructions and __m128 data type are defined in xmmint
 rin.h file\n\nfloat x[k]\; float y[k]\; // operand vectors of length k\nfl
 oat inner_product = 0.0\, temp[4]\;\n__m128 acc\, X\, Y\; // 4x32-bit floa
 t registers\n\nacc = _mm_set1_ps(0.0)\; // set all four words in acc to 0.
 0\nint i = 0\;\nfor (\; i < (k - 3)\; i += 4) {\nX = _mm_loadu_ps(&x[i])\;
  // load groups of four floats\nY = _mm_loadu_ps(&y[i])\;\nacc = _mm_add_p
 s(acc\, _mm_mul_ps(X\, Y))\;\n}\n\n_mm_storeu_ps(temp\, acc)\; // add the 
 accumulated values\ninner_product = temp[0] + temp[1] + temp[2] + temp[3]\
 ;\n\nfor (\; i < k\; i++) { // add up the remaining floats\ninner_product 
 += x[i] * y[i]\;\n}\n\nwhere __m128 is a 128-bit type for holding 4 floats
  (e.g. 32-bit single precision floating point numbers).\n\n---------------
 -----\nCubic Mandelbrot Set\n--------------------\n\nWrite a function that
  determines whether a series of points in a complex plane are inside the C
 ubic Mandelbrot set. Let $f_c(z) = z^3 + c$. Let $f^n_c(z)$ be the results
  of composing $f_c(z)$ with itself $n$ times. (So $f^n_c(z) = f^{n-1}_c(f_
 c(z))$ and $f^1_c(z) = f_c(z)$.) Then\, a point $(x\, y)$ is considered to
  be in the Cubic Mandelbrot set\, if for a complex number $c = x + yi$\, $
 f^n_c(0)$ does not diverge to infinity as $n$ approaches infinity. Note th
 at:\n\n* We have provided a non-SSE version of the code\; your job is to a
 dd vectorization intrinsics.\n\n* The code makes a simplifying assumption 
 that if $|f^{200}_c(0)| < 2$\, then it does not diverge to infinity. The i
 ntrinsic __m128 _mm_cmplt_ps(__m128 a\, __m128 b) mightbe useful to implem
 ent that comparison\, combined with some casting.\n\n* For this problem\, 
 you can assume that SIZE is a multiple of 4. This way you do not have to w
 orry about remaining iterations.\n\n-----------------\nUseful Intrinsics\n
 -----------------\n\n__m128 _mm_loadu_ps(float *)\n__m128 _mm_storeu_ps(fl
 oat *\, __m128)\n__m128 _mm_add_ps(__m128\, __m128) // parallel arithmetic
  ops\n__m128 _mm_sub_ps(__m128\, __m128)\n__m128 _mm_mul_ps(__m128\, __m12
 8)\n__m128 _mm_cmplt_ps(__m128 a\, __m128 b)\n\nFor further details about 
 SSE intrinsics\, visit the Intel Intrinsics guide: https://software.intel.
 com/sites/landingpage/IntrinsicsGuide/\n\n-----------------------\nCompili
 ng and Debugging\n-----------------------\n\nYou can test and execute the 
 code with the commands\n\nmake mandelbrot\n./mandelbrot\n\nYou may see a l
 arge variation in execution time at different times depending on how serve
 r resources are allocated to you at the time of running your code. You may
  need to run your code multiple times to get useful run times. In general\
 , you should focus on the shortest execution times\, since (unlike in othe
 r sciences) all of the variance is coming from interference which is slowi
 ng down your runs (i.e.\, the fastest times are the ones with the least in
 terference\, which is what we want).\n\nTo receive full credit\, your modi
 fied code must still implement the same algorithm as the original code.\n\
 nFor checking the results\, the code generates fractal images from both th
 e scalar and the vector code (mandelbrot-scalar.bmp and mandelbrot-vector.
 bmp). The images can be compared to check correctness using the diff comma
 nd.\n\nIt is possible to achieve 3x-4x speedups from the non-vectorized co
 de to the vectorized code. The variance in run-time can be quite high (som
 e runs of the same code may be 2x faster than other runs)\, but it should 
 be reasonable clear when you have achieved good vectorization speed ups.\n
 \n-------------------------------------------------\nProblem Description: 
 Compiler-based Vectorization\n--------------------------------------------
 -----\n\nFor these questions\, you are required to use compiler directives
  and program transformations to enable the compiler to vectorize your code
 . The loops may not be vectorizable. In that case\, you have to identify t
 he dependencies that prevent vectorization.\n\nIn this problem\, you are g
 iven C code containing simple loops that has been designed to challenge th
 e vectorization capabilities of the compiler. You need to compile the code
 \, read the compiler generated reports\, and transform the code appropriat
 ely to enable compiler vectorization. The transformation will require the 
 use of pragmas\, compiler directives\, or simple program transformations. 
 Cache conscious programming approaches like fission\, fusion\, etc. are ac
 ceptable program transformations. Keep in mind that these transformations 
 are not vectorization -- rather\, they transform the code such that it bec
 omes possible for the compiler to vectorize the code.\n\nFor the purposes 
 of this lab\, you should limit yourself to the following modifications:\n\
 n* Loop fusion\, fission\, and interchange\n\n* Loop unrolling and re-roll
 ing\n\n* Pragmas and directives to give the compiler more information (see
  below for more detailed explanations)\n\n* Statement reordering\n\nDo not
  perform any of the following modifications:\n\n* Adding temporaries (i.e.
 \, do not allocate additional memory)\n\n* Loop tiling or prefetching\, wh
 ich are optimizations that focus only on caching\, not vectorization\n\n* 
 Including extra headers (you don't need them).\n\nSome of the problems are
  not vectorizable because of dependences In such cases\, you should not mo
 dify the code. Rather\, write a comment at the top of the file noting whic
 h arrays are involved in the dependence. For example\, if arrays X and Y h
 ave a dependence relation which prevents vectorization\, put the following
  on line 1 of the file\, before any includes.\n\n// X\,Y\n\nIf array X has
  a dependence relation with itself which prevents vectorization\, put the 
 following on line 1 of the file\, before any includes.\n\n// X\n\nNote tha
 t every file we have given needs to be modified in some way. You should ei
 ther be modifying the code to make the compiler vectorize it\, or placing 
 a comment at the top explaining the dependency. Any runtime difference in 
 the given code (before you change anything) is due to measurement error.\n
 \n-----------------------\nCompiling and Debugging\n----------------------
 -\n\nFor this lab\, we will use the Clang compiler and its auto-vectorizer
 . We are using Clang 3.9.1. specifically\n\nTo compile the code\, use the 
 given Makefile (replace "file" with t1/t2/t3/t4/t5/t6):\n\nmake file-vecto
 r\n\nAn example command to compile the code in t1.c would be:\n\nmake t1-v
 ector\n\nBy default\, the compiler is run with optimization level -O2\, at
  which Clang will try to vectorize loops when possible. Additionally\, we 
 have enabled flags which will print remarks about the compiler's compilati
 on process: which loops were and were not vectorized\, the size of the vec
 tors used\, as well as hints.\n\nIf you want to determine whether vectoriz
 ation reduced the execution time of your program\, you can ask the compile
  to generate scalar code by using the -fno-vectorize flag:\n\nmake t1-scal
 ar\n\nFor convenience\, we've included a make target which will build and 
 run both for comparison:\n\nmake t1\n\nYou can compare the execution time 
 of the scalar and vector executables to determine if vectorization helped 
 to speed up your program and what speedup/slowdown was obtained. When the 
 compiler fails to vectorize the loop\, you should obtain similar execution
  times for both executables\, as file-vector.c contains scalar code.\n\nYo
 u may see a large variation in execution time at different times depending
  on how server resources are allocated to you at the time of running your 
 code. You may need to run your code multiple times to get useful run times
 . In general\, you should focus on the shortest execution times\, since (u
 nlike in other sciences) all of the variance is coming from interference w
 hich is slowing down your runs (i.e.\, the fastest times are the ones with
  the least interference\, which is what we want).\n\nTo receive full credi
 t\, your modified code must still implement the same algorithm as the orig
 inal code.\n\n-------\nPragmas\n-------\n\nNow\, we describe a set of #pra
 gma statements and compiler directives that can be used with the Clang com
 piler to enable and control vectorization. Other compilers have similar #p
 ragma statements\, although the pragma itself differs from compiler to com
 piler.\n\nThe most important pragma is #pragma clang loop. This pragma has
  many options:\n\n* vectorize(disable)\, vectorize(enable)\, and vectorize
 (assume_safety) tell Clang to not vectorize\, to try to vectorize\, and to
  vectorize without checking dependencies\, respectively. You will not need
  to disable vectorization\, however\, you may find it useful to instruct C
 lang to try to vectorize a loop\, even if its cost model believes it isn't
  beneficial. Additionally\, if Clang believes there are dependencies which
  prevent vectorization\, but you know that the code is vectorizable\, you 
 can tell it to assume the code to be safe and vectorize anyway.\n\n* vecto
 rize_width(...) tells Clang which vector size to use when vectorizing a lo
 op. By default\, it will pick its own vector size\, but you may choose a d
 ifferent vector size altogether. Using this option implies vectorization i
 s enabled\, so there is no need to use vectorize(enable). For example\, fo
 r a vector size of 8\, specify vectorize_width(8).\n\n* interleave(disable
 ) and interleave(enable) control Clang's ability to interleave loop iterat
 ions\; that is\, combine multiple iterations into a single iteration of ve
 ctorized code.\n\n* interleave_count(...) controls the number of iteration
 s that Clang will attempt to interleave. This syntax is similar to vectori
 ze_width\, accepting some number.\n\n* distribute(disable) and distribute(
 enable) control Clang's ability to split loops apart (distribute work) in 
 order to enable vectorization. This is essentially loop fission\, but done
  by the compiler. Enabling this feature may allow Clang to vectorize certa
 in loops\, however you may need to do the fission by hand if Clang is unab
 le.\n\nHere is an example of a pragma that enables a few of these options:
 \n\n#pragma clang loop vectorize_width(4) interleave_count(2) distribute(e
 nable)\nfor ( ... ) {\n...\n}\n\nFor more information about these options\
 , see: https://llvm.org/docs/Vectorizers.html\n\n--------------------\nRes
 tricting pointers\n--------------------\n\nWhen optimizing code\, a compil
 er may believe code is vectorizable\, but choose not to do so because the 
 vectorized code assumes that the data it's operating on does not overlap i
 n memory (aliasing)\, which the compiler may not be able to prove for all 
 uses.\n\nWhen the programmer knows that the pointers do not alias\, it is 
 possible to use the restrict keyword\, which instructs the compiler to ass
 ume that the memory does not alias\, and optimize using that assumption. F
 or example\, if we wanted to tell the compile that the c array does not al
 ias any other data\, we can write:\n\nvoid f1(float *restrict c\, float **
 b\, float **a) {\nfor (int i = 0\; i < n\; i++ {\nfor (int j = 0\; j < n\;
  j++) {\nc[i] += b[i][j] + a[i][j]\;\n}\n}\n}\n\nAlternatively\, the compi
 ler can add runtime checks to ensure that pointers do not alias using poin
 ter arithmetic and run vectorized code when possible. An analog in C would
  look like:\n\nif ( ... ) {\n// pointers do not alias: execute vector code
 \n} else {\n// pointers alias: execute scalar code\n}\n\nHowever\, this ad
 ds extra cost\, especially in the case of multi-dimensional arrays using p
 ointers (as in the f1 function) where the compiler may need to do a check 
 at every iteration.\n\nAlthough this keyword is a part of C\, a compiler i
 s free to ignore it and make its own assumptions (e.g.\\ most compilers no
 w ignore the register keyword)\, so it may or may not be beneficial depend
 ing on your choice of compiler.\n\nFor this lab\, none of our data will al
 ias (by design)\, so we have added the restrict keyword for you where need
 ed\, and you should not need to add or remove it anywhere in the code.\n\n
 ---------------------\nOther transformations\n---------------------\n\nApa
 rt from using pragmas and compiler directives\, in many cases you will nee
 d to transform your code to enable compiler vectorization. Vector loads of
  current processors are designed to load 128 bits of consecutive data. Thu
 s\, when the code has non-unit stride accesses\, that is\, consecutive ite
 rations access elements that are not consecutive in memory locations\, the
  compiler may decide to not vectorize. Even if you ask Clang to vectorize 
 using vectorize(enable)\, you might find that you obtain performance slowd
 own rather than speed-up. In some cases\, if you have two nested loops\, i
 nterchanging the loops can result in unit-stride accesses. If the compiler
  does not apply the interchange you can apply it manually\, but you need t
 o verify that the transformation is legal\, that is\, the transformed code
  does the same the original code was doing.\n\nThere are also transformati
 ons that programmers apply to reduce execution time of scalar code that ca
 n sometimes prevent compiler vectorization. One of these examples is loop 
 unrolling. In most cases\, when the loop is unrolled\, the compiler needs 
 to re-roll the code to be able to vectorize the code efficiently. If the c
 ompiler does not re-roll the code\, the programmer can do it (re-rolling a
  loop basically means to write it in its regular non-unrolled form).\n\nAn
 other situation where you might want to transform your code to obtain unit
  stride accesses is when accessing an array of structs. In this case\, if 
 the code is accessing the same field of different structs in the array\, y
 ou will get non-unit strides. The programmer can transform the code by usi
 ng an array for each field. Although the original code can be vectorized b
 y the compiler\, the transformed code runs significantly faster.\n\n// Ori
 ginal code\ntypedef struct{int x\, y\, z\;} point\;\npoint pt[LEN]\;\n\nfo
 r (int i = 0\; i < LEN\; i++) {\npt[i].y *= scale\;\n}\n\n// Transformed c
 ode\nint ptx[LEN]\, int pty[LEN]\,\nint ptz[LEN]\;\n\nfor (int i = 0\; i <
  LEN\; i++) {\npty[i] *= scale\;\n}\n\n------\nTiming\n------\n\nFinally\,
  notice that we need to measure the execution time of the loops in order t
 o determine whether vectorization was efficient. To reliably measure this 
 time we have instrumented the code in several ways:\n\n*\n\nBefore startin
 g the execution of the code we measure the time stamp counter of the proce
 ssor using the rdtsc instruction (accessible through the __rdtsc() intrins
 ic). This counter counts the processor cycles. (See: https://en.wikipedia.
 org/wiki/Time_Stamp_Counter)\n\nSimilarly\, we read the time stamp counter
  at the end. The difference between the two readings measures the executio
 n time of the loop.\n\n*\n\nWe add an outermost loop\n\nfor (int nl = 0\; 
 nl < 1000000\; nl++) { }\n\nto increase the amount of time the loop execut
 es. We do this because the loops we are executing are too small and run ve
 ry fast and so the measuring technique that we use may not have enough pre
 cision. Notice that the compiler is smart and will notice that this loop i
 s useless and will remove it or interchange it with the inner loop. In ord
 er to prevent the compiler from doing that\, we add an instruction after t
 he inner loop which modifies one element of an arrays inside the inner loo
 p (in some cases we have used a vectorize(disable) that you should not rem
 ove).\n\n* To avoid the compiler removing the whole function (the dead cod
 e elimination pass could realize that the result of this code is never use
 d) we also sum all the elements of one of the arrays computed by the loop 
 that we are measuring\, and we print the result of this sum (which can als
 o be used to verify that any optimizations were correct). Thus\, if the lo
 op that we want to measure is:\n\nvoid t1(float *A\, float *B) {\nfor (int
  i = 0\; i < 1024\; i+=2) {\nA[i+1] = A[i] + B[i]\;\n}\n}\n\nWe need to wr
 ite the following code:\n\nvoid t1(float *A\, float * B) {\nunsigned long 
 long start_c\, end_c\, diff_c\;\nstart_c = __rdtsc()\;\n\nfor (int nl = 0\
 ; nl < 1000000\; nl++) {\nfor (int i = 0\; i < 1024\; i+=2) {\nA[i+1] = A[
 i] + B[i]\;\n}\nB[0]++\;\n}\n\nend_c = __rdtsc()\;\ndiff_c = end_c - start
 _c\;\nfloat giga_cycle = diff_c / 1000000000.0\;\nfloat ret = 0\;\nfor (in
 t i = 0\; i < 1024\; i++) {\nret += A[i]\;\n}\nprintf("It took %f giga cyc
 les and the result is: %f"\, giga_cycle\, ret)\;\n}
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#assignment_367934
X-ALT-DESC;FMTTYPE=text/html:<h2>Learning Objectives</h2>\n<p>Loop vectori
 zation (using SIMD instructions and compiler-based vectorization)</p>\n<ul
 >\n<li>Understand how SIMD instructions work by writing SIMD code using co
 mpiler instrinsics</li>\n<li>Analysis of data dependences</li>\n<li>Use of
  a compiler to enable vectorization of code (using pragmas and compiler di
 rectives)</li>\n</ul>\n<h2>Guidelines</h2>\n<p>In this part of the lab\, y
 ou will</p>\n<ul>\n<li><span>optimize the performance of some &nbsp\;cubic
  mandelbrot code by writing SIMD loop nests by hand</span></li>\n<li>optim
 ize the performance of code by using pragmas\, compiler directives or simp
 le program transformations to enable compiler to vectorize loops.</li>\n</
 ul>\n<h2>Problem Description: Manual vectorization w/ compiler intrinsics<
 /h2>\n<p>The Intel <strong>Streaming SIMD Extensions (SSE)</strong> compri
 se a set of extensions to the Intel x86 architecture that are designed to 
 greatly enhance the performance of advanced media and communication applic
 ations.</p>\n<p>In class\, you saw actual Intel SSE <i>assembly instructio
 ns</i> - however\, these are not easy to program with (in general\, assemb
 ly is not the language of choice for larger programs). Fortunately\, some 
 compilers will have built-in intrinsics (which appear as function calls) t
 hat provide a one-to-one mapping to SSE assembly.</p>\n<h2>Example: Inner 
 Product</h2>\n<p>Recall that the <i>inner product</i> of two vectors $\\te
 xtbf{x} = (x_1\, x_2\, ...\, x_k)$ and $\\textbf{y} = (y_1\, y_2\, ...\, y
 _k)$ is defined as follows: $\\textbf{x} \\bullet \\textbf{y} = x_1y_1 + x
 _2y_2 + ... + x_ky_k$. Normally\, we could compute the inner product as fo
 llows:</p>\n<div class="pl-code">\n<div class="mb-2 rounded" style="backgr
 ound: #f0f0f0\;">\n<pre style="padding: 0.5rem\; margin-bottom: 0px\; line
 -height: 125%\;"><span style="color: #902000\;">float</span><span style="c
 olor: #bbbbbb\;"> </span>x[k]\;<span style="color: #bbbbbb\;">  </span><sp
 an style="color: #902000\;">float</span><span style="color: #bbbbbb\;"> </
 span>y[k]\;<span style="color: #bbbbbb\;">        </span><span style="colo
 r: #60a0b0\; font-style: italic\;">// operand vectors of length k</span>\n
 <span style="color: #902000\;">float</span><span style="color: #bbbbbb\;">
  </span>inner_product<span style="color: #bbbbbb\;"> </span><span style="c
 olor: #666666\;">=</span><span style="color: #bbbbbb\;"> </span><span styl
 e="color: #40a070\;">0.0</span>\;<span style="color: #bbbbbb\;">      </sp
 an><span style="color: #60a0b0\; font-style: italic\;">// accumulator</spa
 n>\n\n<span style="color: #007020\;">for</span><span style="color: #bbbbbb
 \;"> </span>(<span style="color: #902000\;">int</span><span style="color: 
 #bbbbbb\;"> </span>i<span style="color: #bbbbbb\;"> </span><span style="co
 lor: #666666\;">=</span><span style="color: #bbbbbb\;"> </span><span style
 ="color: #40a070\;">0</span>\;<span style="color: #bbbbbb\;"> </span>i<spa
 n style="color: #bbbbbb\;"> </span><span style="color: #666666\;">&lt\;</s
 pan><span style="color: #bbbbbb\;"> </span>k\;<span style="color: #bbbbbb\
 ;"> </span>i<span style="color: #666666\;">++</span>)<span style="color: #
 bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">    </span>inner_produ
 ct<span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">+=
 </span><span style="color: #bbbbbb\;"> </span>x[i]<span style="color: #bbb
 bbb\;"> </span><span style="color: #666666\;">*</span><span style="color: 
 #bbbbbb\;"> </span>y[i]\;\n}\n</pre>\n</div>\n</div>\n<p>To take advantage
  of SSE operations\, we can rewrite this code using the SSE intrinsics:</p
 >\n<div class="pl-code">\n<div class="mb-2 rounded" style="background: #f0
 f0f0\;">\n<pre style="padding: 0.5rem\; margin-bottom: 0px\; line-height: 
 125%\;"><span style="color: #007020\;">#include</span><span style="color: 
 #bbbbbb\;"> </span><span style="color: #60a0b0\; font-style: italic\;">&lt
 \;xmmintrin.h&gt\;</span>\n<span style="color: #60a0b0\; font-style: itali
 c\;">// All SSE instructions and __m128 data type are defined in xmmintrin
 .h file</span>\n\n\n<span style="color: #902000\;">float</span><span style
 ="color: #bbbbbb\;"> </span>x[k]\;<span style="color: #bbbbbb\;">  </span>
 <span style="color: #902000\;">float</span><span style="color: #bbbbbb\;">
  </span>y[k]\;<span style="color: #bbbbbb\;">        </span><span style="c
 olor: #60a0b0\; font-style: italic\;">// operand vectors of length k</span
 >\n<span style="color: #902000\;">float</span><span style="color: #bbbbbb\
 ;"> </span>inner_product<span style="color: #bbbbbb\;"> </span><span style
 ="color: #666666\;">=</span><span style="color: #bbbbbb\;"> </span><span s
 tyle="color: #40a070\;">0.0</span>\,<span style="color: #bbbbbb\;"> </span
 >temp[<span style="color: #40a070\;">4</span>]\;\n<span style="color: #007
 020\;">__m128</span><span style="color: #bbbbbb\;"> </span>acc\,<span styl
 e="color: #bbbbbb\;"> </span>X\,<span style="color: #bbbbbb\;"> </span>Y\;
 <span style="color: #bbbbbb\;">               </span><span style="color: #
 60a0b0\; font-style: italic\;">// 4x32-bit float registers</span>\n\nacc<s
 pan style="color: #bbbbbb\;"> </span><span style="color: #666666\;">=</spa
 n><span style="color: #bbbbbb\;"> </span>_mm_set1_ps(<span style="color: #
 40a070\;">0.0</span>)\;<span style="color: #bbbbbb\;"> </span><span style=
 "color: #60a0b0\; font-style: italic\;">// set all four words in acc to 0.
 0</span>\n<span style="color: #902000\;">int</span><span style="color: #bb
 bbbb\;"> </span>i<span style="color: #bbbbbb\;"> </span><span style="color
 : #666666\;">=</span><span style="color: #bbbbbb\;"> </span><span style="c
 olor: #40a070\;">0</span>\;\n<span style="color: #007020\;">for</span><spa
 n style="color: #bbbbbb\;"> </span>(\;<span style="color: #bbbbbb\;"> </sp
 an>i<span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">
 &lt\;</span><span style="color: #bbbbbb\;"> </span>(k<span style="color: #
 bbbbbb\;"> </span><span style="color: #666666\;">-</span><span style="colo
 r: #bbbbbb\;"> </span><span style="color: #40a070\;">3</span>)\;<span styl
 e="color: #bbbbbb\;"> </span>i<span style="color: #bbbbbb\;"> </span><span
  style="color: #666666\;">+=</span><span style="color: #bbbbbb\;"> </span>
 <span style="color: #40a070\;">4</span>)<span style="color: #bbbbbb\;"> </
 span>{\n<span style="color: #bbbbbb\;">    </span>X<span style="color: #bb
 bbbb\;"> </span><span style="color: #666666\;">=</span><span style="color:
  #bbbbbb\;"> </span>_mm_loadu_ps(<span style="color: #666666\;">&amp\;</sp
 an>x[i])\;<span style="color: #bbbbbb\;"> </span><span style="color: #60a0
 b0\; font-style: italic\;">// load groups of four floats</span>\n<span sty
 le="color: #bbbbbb\;">    </span>Y<span style="color: #bbbbbb\;"> </span><
 span style="color: #666666\;">=</span><span style="color: #bbbbbb\;"> </sp
 an>_mm_loadu_ps(<span style="color: #666666\;">&amp\;</span>y[i])\;\n<span
  style="color: #bbbbbb\;">    </span>acc<span style="color: #bbbbbb\;"> </
 span><span style="color: #666666\;">=</span><span style="color: #bbbbbb\;"
 > </span>_mm_add_ps(acc\,<span style="color: #bbbbbb\;"> </span>_mm_mul_ps
 (X\,<span style="color: #bbbbbb\;"> </span>Y))\;\n}\n\n_mm_storeu_ps(temp\
 ,<span style="color: #bbbbbb\;"> </span>acc)\;<span style="color: #bbbbbb\
 ;"> </span><span style="color: #60a0b0\; font-style: italic\;">// add the 
 accumulated values</span>\ninner_product<span style="color: #bbbbbb\;"> </
 span><span style="color: #666666\;">=</span><span style="color: #bbbbbb\;"
 > </span>temp[<span style="color: #40a070\;">0</span>]<span style="color: 
 #bbbbbb\;"> </span><span style="color: #666666\;">+</span><span style="col
 or: #bbbbbb\;"> </span>temp[<span style="color: #40a070\;">1</span>]<span 
 style="color: #bbbbbb\;"> </span><span style="color: #666666\;">+</span><s
 pan style="color: #bbbbbb\;"> </span>temp[<span style="color: #40a070\;">2
 </span>]<span style="color: #bbbbbb\;"> </span><span style="color: #666666
 \;">+</span><span style="color: #bbbbbb\;"> </span>temp[<span style="color
 : #40a070\;">3</span>]\;\n\n<span style="color: #007020\;">for</span><span
  style="color: #bbbbbb\;"> </span>(\;<span style="color: #bbbbbb\;"> </spa
 n>i<span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">&
 lt\;</span><span style="color: #bbbbbb\;"> </span>k\;<span style="color: #
 bbbbbb\;"> </span>i<span style="color: #666666\;">++</span>)<span style="c
 olor: #bbbbbb\;"> </span>{<span style="color: #bbbbbb\;">            </spa
 n><span style="color: #60a0b0\; font-style: italic\;">// add up the remain
 ing floats</span>\n<span style="color: #bbbbbb\;">    </span>inner_product
 <span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">+=</
 span><span style="color: #bbbbbb\;"> </span>x[i]<span style="color: #bbbbb
 b\;"> </span><span style="color: #666666\;">*</span><span style="color: #b
 bbbbb\;"> </span>y[i]\;\n}\n</pre>\n</div>\n</div>\n<p>where <code>__m128<
 /code> is a 128-bit type for holding 4 floats (e.g. 32-bit single precisio
 n floating point numbers).</p>\n<h2>Cubic Mandelbrot Set</h2>\n<p>Write a 
 function that determines whether a series of points in a complex plane are
  inside the Cubic Mandelbrot set. Let $f_c(z) = z^3 + c$. Let $f^n_c(z)$ b
 e the results of composing $f_c(z)$ with itself $n$ times. (So $f^n_c(z) =
  f^{n-1}_c(f_c(z))$ and $f^1_c(z) = f_c(z)$.) Then\, a point $(x\, y)$ is 
 considered to be in the Cubic Mandelbrot set\, if for a complex number $c 
 = x + yi$\, $f^n_c(0)$ does not diverge to infinity as $n$ approaches infi
 nity. Note that:</p>\n<ul>\n<li>We have provided a non-SSE version of the 
 code\; your job is to add vectorization intrinsics.</li>\n<li>The code mak
 es a simplifying assumption that if $|f^{200}_c(0)| &lt\; 2$\, then it doe
 s not diverge to infinity. The intrinsic <code>__m128 _mm_cmplt_ps(__m128 
 a\, __m128 b)</code> mightbe useful to implement that comparison\, combine
 d with some casting.</li>\n<li>For this problem\, you can assume that <cod
 e>SIZE</code> is a multiple of 4. This way you do not have to worry about 
 remaining iterations.</li>\n</ul>\n<h2>Useful Intrinsics</h2>\n<div class=
 "pl-code">\n<div class="mb-2 rounded" style="background: #f0f0f0\;">\n<pre
  style="padding: 0.5rem\; margin-bottom: 0px\; line-height: 125%\;">  __m1
 28 _mm_loadu_ps(float *)\n  __m128 _mm_storeu_ps(float *\, __m128)\n  __m1
 28 _mm_add_ps(__m128\, __m128) // parallel arithmetic ops\n  __m128 _mm_su
 b_ps(__m128\, __m128)\n  __m128 _mm_mul_ps(__m128\, __m128)\n  __m128 _mm_
 cmplt_ps(__m128 a\, __m128 b)\n</pre>\n</div>\n</div>\n<p>For further deta
 ils about SSE intrinsics\, visit the Intel Intrinsics guide: <a href="http
 s://software.intel.com/sites/landingpage/IntrinsicsGuide/">https://softwar
 e.intel.com/sites/landingpage/IntrinsicsGuide/</a></p>\n<h2>Compiling and 
 Debugging</h2>\n<p>You can test and execute the code with the commands</p>
 \n<div class="pl-code">\n<div class="mb-2 rounded" style="background: #f0f
 0f0\;">\n<pre style="padding: 0.5rem\; margin-bottom: 0px\; line-height: 1
 25%\;">make mandelbrot\n./mandelbrot\n</pre>\n</div>\n</div>\n<p>You may s
 ee a large variation in execution time at different times depending on how
  server resources are allocated to you at the time of running your code. Y
 ou may need to run your code multiple times to get useful run times. In ge
 neral\, you should focus on the <strong>shortest</strong> execution times\
 , since (unlike in other sciences) all of the variance is coming from inte
 rference which is slowing down your runs (i.e.\, the fastest times are the
  ones with the least interference\, which is what we want).</p>\n<p>To rec
 eive full credit\, your modified code must still implement the same algori
 thm as the original code.</p>\n<p>For checking the results\, the code gene
 rates fractal images from both the scalar and the vector code (<code>mande
 lbrot-scalar.bmp</code> and <code>mandelbrot-vector.bmp</code>). The image
 s can be compared to check correctness using the <code>diff</code> command
 .</p>\n<div class="alert alert-danger" role="alert">It is possible to achi
 eve 3x-4x speedups from the non-vectorized code to the vectorized code. Th
 e variance in run-time can be quite high (some runs of the same code may b
 e 2x faster than other runs)\, but it should be reasonable clear when you 
 have achieved good vectorization speed ups.</div>\n<h2>Problem Description
 : Compiler-based Vectorization</h2>\n<p>For these questions\, you are requ
 ired to use compiler directives and program transformations to enable the 
 compiler to vectorize your code. The loops may not be vectorizable. In tha
 t case\, you have to identify the dependencies that prevent vectorization.
 </p>\n<p>In this problem\, you are given C code containing simple loops th
 at has been designed to challenge the vectorization capabilities of the co
 mpiler. You need to compile the code\, read the compiler generated reports
 \, and transform the code appropriately to enable compiler vectorization. 
 The transformation will require the use of pragmas\, compiler directives\,
  or simple program transformations. Cache conscious programming approaches
  like fission\, fusion\, etc. are acceptable program transformations. Keep
  in mind that these transformations are not vectorization -- rather\, they
  transform the code such that it becomes possible for the compiler to vect
 orize the code.</p>\n<p>For the purposes of this lab\, you should limit yo
 urself to the following modifications:</p>\n<ul>\n<li>Loop fusion\, fissio
 n\, and interchange</li>\n<li>Loop unrolling and re-rolling</li>\n<li>Prag
 mas and directives to give the compiler more information (see below for mo
 re detailed explanations)</li>\n<li>Statement reordering</li>\n</ul>\n<p>D
 o not perform any of the following modifications:</p>\n<ul>\n<li>Adding te
 mporaries (i.e.\, do not allocate additional memory)</li>\n<li>Loop tiling
  or prefetching\, which are optimizations that focus only on caching\, not
  vectorization</li>\n<li>Including extra headers (you don't need them).</l
 i>\n</ul>\n<p>Some of the problems are not vectorizable because of depende
 nces In such cases\, you <strong>should not</strong> modify the code. Rath
 er\, write a comment at the top of the file noting which arrays are involv
 ed in the dependence. For example\, if arrays <code>X</code> and <code>Y</
 code> have a dependence relation which prevents vectorization\, put the fo
 llowing on <strong>line 1</strong> of the file\, before any includes.</p>\
 n<div class="pl-code">\n<div class="mb-2 rounded" style="background: #f0f0
 f0\;">\n<pre style="padding: 0.5rem\; margin-bottom: 0px\; line-height: 12
 5%\;"><span style="color: #60a0b0\; font-style: italic\;">// X\,Y</span>\n
 </pre>\n</div>\n</div>\n<p>If array <code>X</code> has a dependence relati
 on with itself which prevents vectorization\, put the following on <strong
 >line 1</strong> of the file\, before any includes.</p>\n<div class="pl-co
 de">\n<div class="mb-2 rounded" style="background: #f0f0f0\;">\n<pre style
 ="padding: 0.5rem\; margin-bottom: 0px\; line-height: 125%\;"><span style=
 "color: #60a0b0\; font-style: italic\;">// X</span>\n</pre>\n</div>\n</div
 >\n<p>Note that every file we have given needs to be modified in some way.
  You should either be modifying the code to make the compiler vectorize it
 \, or placing a comment at the top explaining the dependency. Any runtime 
 difference in the given code (before you change anything) is due to measur
 ement error.</p>\n<h2>Compiling and Debugging</h2>\n<p>For this lab\, we w
 ill use the Clang compiler and its auto-vectorizer. We are using Clang 3.9
 .1. specifically</p>\n<p>To compile the code\, use the given Makefile (rep
 lace "file" with t1/t2/t3/t4/t5/t6):</p>\n<div class="pl-code">\n<div clas
 s="mb-2 rounded" style="background: #f0f0f0\;">\n<pre style="padding: 0.5r
 em\; margin-bottom: 0px\; line-height: 125%\;">make file-vector\n</pre>\n<
 /div>\n</div>\n<p>An example command to compile the code in <code>t1.c</co
 de> would be:</p>\n<div class="pl-code">\n<div class="mb-2 rounded" style=
 "background: #f0f0f0\;">\n<pre style="padding: 0.5rem\; margin-bottom: 0px
 \; line-height: 125%\;">make t1-vector\n</pre>\n</div>\n</div>\n<p>By defa
 ult\, the compiler is run with optimization level <code>-O2</code>\, at wh
 ich Clang will try to vectorize loops when possible. Additionally\, we hav
 e enabled flags which will print remarks about the compiler's compilation 
 process: which loops were and were not vectorized\, the size of the vector
 s used\, as well as hints.</p>\n<p>If you want to determine whether vector
 ization reduced the execution time of your program\, you can ask the compi
 le to generate scalar code by using the <code>-fno-vectorize</code> flag:<
 /p>\n<div class="pl-code">\n<div class="mb-2 rounded" style="background: #
 f0f0f0\;">\n<pre style="padding: 0.5rem\; margin-bottom: 0px\; line-height
 : 125%\;">make t1-scalar\n</pre>\n</div>\n</div>\n<p>For convenience\, we'
 ve included a make target which will build and run both for comparison:</p
 >\n<div class="pl-code">\n<div class="mb-2 rounded" style="background: #f0
 f0f0\;">\n<pre style="padding: 0.5rem\; margin-bottom: 0px\; line-height: 
 125%\;">make t1\n</pre>\n</div>\n</div>\n<p>You can compare the execution 
 time of the scalar and vector executables to determine if vectorization he
 lped to speed up your program and what speedup/slowdown was obtained. When
  the compiler fails to vectorize the loop\, you should obtain similar exec
 ution times for both executables\, as <code>file-vector.c</code> contains 
 scalar code.</p>\n<p>You may see a large variation in execution time at di
 fferent times depending on how server resources are allocated to you at th
 e time of running your code. You may need to run your code multiple times 
 to get useful run times. In general\, you should focus on the <strong>shor
 test</strong> execution times\, since (unlike in other sciences) all of th
 e variance is coming from interference which is slowing down your runs (i.
 e.\, the fastest times are the ones with the least interference\, which is
  what we want).</p>\n<p>To receive full credit\, your modified code must s
 till implement the same algorithm as the original code.</p>\n<h2>Pragmas</
 h2>\n<p>Now\, we describe a set of <code>#pragma</code> statements and com
 piler directives that can be used with the Clang compiler to enable and co
 ntrol vectorization. Other compilers have similar <code>#pragma</code> sta
 tements\, although the pragma itself differs from compiler to compiler.</p
 >\n<p>The most important pragma is <code>#pragma clang loop</code>. This p
 ragma has many options:</p>\n<ul>\n<li>\n<code>vectorize(disable)</code>\,
  <code>vectorize(enable)</code>\, and <code>vectorize(assume_safety)</code
 > tell Clang to not vectorize\, to try to vectorize\, and to vectorize wit
 hout checking dependencies\, respectively. You will not need to disable ve
 ctorization\, however\, you may find it useful to instruct Clang to try to
  vectorize a loop\, even if its cost model believes it isn't beneficial. A
 dditionally\, if Clang believes there are dependencies which prevent vecto
 rization\, but you know that the code is vectorizable\, you can tell it to
  assume the code to be safe and vectorize anyway.</li>\n<li>\n<code>vector
 ize_width(...)</code> tells Clang which vector size to use when vectorizin
 g a loop. By default\, it will pick its own vector size\, but you may choo
 se a different vector size altogether. Using this option implies vectoriza
 tion is enabled\, so there is no need to use <code>vectorize(enable)</code
 >. For example\, for a vector size of 8\, specify <code>vectorize_width(8)
 </code>.</li>\n<li>\n<code>interleave(disable)</code> and <code>interleave
 (enable)</code> control Clang's ability to interleave loop iterations\; th
 at is\, combine multiple iterations into a single iteration of vectorized 
 code.</li>\n<li>\n<code>interleave_count(...)</code> controls the number o
 f iterations that Clang will attempt to interleave. This syntax is similar
  to <code>vectorize_width</code>\, accepting some number.</li>\n<li>\n<cod
 e>distribute(disable)</code> and <code>distribute(enable)</code> control C
 lang's ability to split loops apart (distribute work) in order to enable v
 ectorization. This is essentially loop fission\, but done by the compiler.
  Enabling this feature may allow Clang to vectorize certain loops\, howeve
 r you may need to do the fission by hand if Clang is unable.</li>\n</ul>\n
 <p>Here is an example of a pragma that enables a few of these options:</p>
 \n<div class="pl-code">\n<div class="mb-2 rounded" style="background: #f0f
 0f0\;">\n<pre style="padding: 0.5rem\; margin-bottom: 0px\; line-height: 1
 25%\;"><span style="color: #007020\;">#pragma clang loop vectorize_width(4
 ) interleave_count(2) distribute(enable)</span>\n<span style="color: #0070
 20\;">for</span><span style="color: #bbbbbb\;"> </span>(<span style="color
 : #bbbbbb\;"> </span>...<span style="color: #bbbbbb\;"> </span>)<span styl
 e="color: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">    </span>
 ...\n}\n</pre>\n</div>\n</div>\n<p>For more information about these option
 s\, see: <a href="https://llvm.org/docs/Vectorizers.html">https://llvm.org
 /docs/Vectorizers.html</a></p>\n<h2>Restricting pointers</h2>\n<p>When opt
 imizing code\, a compiler may believe code is vectorizable\, but choose no
 t to do so because the vectorized code assumes that the data it's operatin
 g on does not overlap in memory (aliasing)\, which the compiler may not be
  able to prove for all uses.</p>\n<p>When the programmer knows that the po
 inters do not alias\, it is possible to use the <code>restrict</code> keyw
 ord\, which instructs the compiler to assume that the memory does not alia
 s\, and optimize using that assumption. For example\, if we wanted to tell
  the compile that the <code>c</code> array does not alias any other data\,
  we can write:</p>\n<div class="pl-code">\n<div class="mb-2 rounded" style
 ="background: #f0f0f0\;">\n<pre style="padding: 0.5rem\; margin-bottom: 0p
 x\; line-height: 125%\;"><span style="color: #902000\;">void</span><span s
 tyle="color: #bbbbbb\;"> </span><span style="color: #06287e\;">f1</span>(<
 span style="color: #902000\;">float</span><span style="color: #bbbbbb\;"> 
 </span><span style="color: #666666\;">*</span><span style="color: #007020\
 ;">restrict</span><span style="color: #bbbbbb\;"> </span>c\,<span style="c
 olor: #bbbbbb\;"> </span><span style="color: #902000\;">float</span><span 
 style="color: #bbbbbb\;"> </span><span style="color: #666666\;">**</span>b
 \,<span style="color: #bbbbbb\;"> </span><span style="color: #902000\;">fl
 oat</span><span style="color: #bbbbbb\;"> </span><span style="color: #6666
 66\;">**</span>a)<span style="color: #bbbbbb\;"> </span>{\n<span style="co
 lor: #bbbbbb\;">    </span><span style="color: #007020\;">for</span><span 
 style="color: #bbbbbb\;"> </span>(<span style="color: #902000\;">int</span
 ><span style="color: #bbbbbb\;"> </span>i<span style="color: #bbbbbb\;"> <
 /span><span style="color: #666666\;">=</span><span style="color: #bbbbbb\;
 "> </span><span style="color: #40a070\;">0</span>\;<span style="color: #bb
 bbbb\;"> </span>i<span style="color: #bbbbbb\;"> </span><span style="color
 : #666666\;">&lt\;</span><span style="color: #bbbbbb\;"> </span>n\;<span s
 tyle="color: #bbbbbb\;"> </span>i<span style="color: #666666\;">++</span><
 span style="color: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">  
       </span><span style="color: #007020\;">for</span><span style="color: 
 #bbbbbb\;"> </span>(<span style="color: #902000\;">int</span><span style="
 color: #bbbbbb\;"> </span>j<span style="color: #bbbbbb\;"> </span><span st
 yle="color: #666666\;">=</span><span style="color: #bbbbbb\;"> </span><spa
 n style="color: #40a070\;">0</span>\;<span style="color: #bbbbbb\;"> </spa
 n>j<span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">&
 lt\;</span><span style="color: #bbbbbb\;"> </span>n\;<span style="color: #
 bbbbbb\;"> </span>j<span style="color: #666666\;">++</span>)<span style="c
 olor: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">            </s
 pan>c[i]<span style="color: #bbbbbb\;"> </span><span style="color: #666666
 \;">+=</span><span style="color: #bbbbbb\;"> </span>b[i][j]<span style="co
 lor: #bbbbbb\;"> </span><span style="color: #666666\;">+</span><span style
 ="color: #bbbbbb\;"> </span>a[i][j]\;\n<span style="color: #bbbbbb\;">    
     </span>}\n<span style="color: #bbbbbb\;">    </span>}\n}\n</pre>\n</di
 v>\n</div>\n<p>Alternatively\, the compiler can add runtime checks to ensu
 re that pointers do not alias using pointer arithmetic and run vectorized 
 code when possible. An analog in C would look like:</p>\n<div class="pl-co
 de">\n<div class="mb-2 rounded" style="background: #f0f0f0\;">\n<pre style
 ="padding: 0.5rem\; margin-bottom: 0px\; line-height: 125%\;"><span style=
 "color: #007020\;">if</span><span style="color: #bbbbbb\;"> </span>(<span 
 style="color: #bbbbbb\;"> </span>...<span style="color: #bbbbbb\;"> </span
 >)<span style="color: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;"
 >    </span><span style="color: #60a0b0\; font-style: italic\;">// pointer
 s do not alias: execute vector code</span>\n}<span style="color: #bbbbbb\;
 "> </span><span style="color: #007020\;">else</span><span style="color: #b
 bbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">    </span><span style=
 "color: #60a0b0\; font-style: italic\;">// pointers alias: execute scalar 
 code</span>\n}\n</pre>\n</div>\n</div>\n<p>However\, this adds extra cost\
 , especially in the case of multi-dimensional arrays using pointers (as in
  the <code>f1</code> function) where the compiler may need to do a check a
 t every iteration.</p>\n<p>Although this keyword is a part of C\, a compil
 er is free to ignore it and make its own assumptions (e.g.\\ most compiler
 s now ignore the <code>register</code> keyword)\, so it may or may not be 
 beneficial depending on your choice of compiler.</p>\n<p>For this lab\, no
 ne of our data will alias (by design)\, so we have added the <code>restric
 t</code> keyword for you where needed\, and you should not need to add or 
 remove it anywhere in the code.</p>\n<h2>Other transformations</h2>\n<p>Ap
 art from using pragmas and compiler directives\, in many cases you will ne
 ed to transform your code to enable compiler vectorization. Vector loads o
 f current processors are designed to load 128 bits of consecutive data. Th
 us\, when the code has non-unit stride accesses\, that is\, consecutive it
 erations access elements that are not consecutive in memory locations\, th
 e compiler may decide to not vectorize. Even if you ask Clang to vectorize
  using <code>vectorize(enable)</code>\, you might find that you obtain per
 formance slowdown rather than speed-up. In some cases\, if you have two ne
 sted loops\, interchanging the loops can result in unit-stride accesses. I
 f the compiler does not apply the interchange you can apply it manually\, 
 but you need to verify that the transformation is legal\, that is\, the tr
 ansformed code does the same the original code was doing.</p>\n<p>There ar
 e also transformations that programmers apply to reduce execution time of 
 scalar code that can sometimes <i>prevent</i> compiler vectorization. One 
 of these examples is loop unrolling. In most cases\, when the loop is unro
 lled\, the compiler needs to re-roll the code to be able to vectorize the 
 code efficiently. If the compiler does not re-roll the code\, the programm
 er can do it (re-rolling a loop basically means to write it in its regular
  non-unrolled form).</p>\n<p>Another situation where you might want to tra
 nsform your code to obtain unit stride accesses is when accessing an array
  of structs. In this case\, if the code is accessing the same field of dif
 ferent structs in the array\, you will get non-unit strides. The programme
 r can transform the code by using an array for each field. Although the or
 iginal code can be vectorized by the compiler\, the transformed code runs 
 significantly faster.</p>\n<div class="pl-code">\n<div class="mb-2 rounded
 " style="background: #f0f0f0\;">\n<pre style="padding: 0.5rem\; margin-bot
 tom: 0px\; line-height: 125%\;"><span style="color: #60a0b0\; font-style: 
 italic\;">// Original code</span>\n<span style="color: #007020\;">typedef<
 /span><span style="color: #bbbbbb\;"> </span><span style="color: #007020\;
 ">struct</span>{<span style="color: #902000\;">int</span><span style="colo
 r: #bbbbbb\;"> </span>x\,<span style="color: #bbbbbb\;"> </span>y\,<span s
 tyle="color: #bbbbbb\;"> </span>z\;}<span style="color: #bbbbbb\;"> </span
 >point\;\npoint<span style="color: #bbbbbb\;"> </span>pt[LEN]\;\n\n<span s
 tyle="color: #007020\;">for</span><span style="color: #bbbbbb\;"> </span>(
 <span style="color: #902000\;">int</span><span style="color: #bbbbbb\;"> <
 /span>i<span style="color: #bbbbbb\;"> </span><span style="color: #666666\
 ;">=</span><span style="color: #bbbbbb\;"> </span><span style="color: #40a
 070\;">0</span>\;<span style="color: #bbbbbb\;"> </span>i<span style="colo
 r: #bbbbbb\;"> </span><span style="color: #666666\;">&lt\;</span><span sty
 le="color: #bbbbbb\;"> </span>LEN\;<span style="color: #bbbbbb\;"> </span>
 i<span style="color: #666666\;">++</span>)<span style="color: #bbbbbb\;"> 
 </span>{\n<span style="color: #bbbbbb\;">    </span>pt[i].y<span style="co
 lor: #bbbbbb\;"> </span><span style="color: #666666\;">*=</span><span styl
 e="color: #bbbbbb\;"> </span>scale\;\n}\n</pre>\n</div>\n</div>\n<div clas
 s="pl-code">\n<div class="mb-2 rounded" style="background: #f0f0f0\;">\n<p
 re style="padding: 0.5rem\; margin-bottom: 0px\; line-height: 125%\;"><spa
 n style="color: #60a0b0\; font-style: italic\;">// Transformed code</span>
 \n<span style="color: #902000\;">int</span><span style="color: #bbbbbb\;">
  </span>ptx[LEN]\,<span style="color: #bbbbbb\;"> </span><span style="colo
 r: #902000\;">int</span><span style="color: #bbbbbb\;"> </span>pty[LEN]\,\
 n<span style="color: #902000\;">int</span><span style="color: #bbbbbb\;"> 
 </span>ptz[LEN]\;\n\n<span style="color: #007020\;">for</span><span style=
 "color: #bbbbbb\;"> </span>(<span style="color: #902000\;">int</span><span
  style="color: #bbbbbb\;"> </span>i<span style="color: #bbbbbb\;"> </span>
 <span style="color: #666666\;">=</span><span style="color: #bbbbbb\;"> </s
 pan><span style="color: #40a070\;">0</span>\;<span style="color: #bbbbbb\;
 "> </span>i<span style="color: #bbbbbb\;"> </span><span style="color: #666
 666\;">&lt\;</span><span style="color: #bbbbbb\;"> </span>LEN\;<span style
 ="color: #bbbbbb\;"> </span>i<span style="color: #666666\;">++</span>)<spa
 n style="color: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">    <
 /span>pty[i]<span style="color: #bbbbbb\;"> </span><span style="color: #66
 6666\;">*=</span><span style="color: #bbbbbb\;"> </span>scale\;\n}\n</pre>
 \n</div>\n</div>\n<h2>Timing</h2>\n<p>Finally\, notice that we need to mea
 sure the execution time of the loops in order to determine whether vectori
 zation was efficient. To reliably measure this time we have instrumented t
 he code in several ways:</p>\n<ul>\n<li>\n<p>Before starting the execution
  of the code we measure the time stamp counter of the processor using the 
 <code>rdtsc</code> instruction (accessible through the <code>__rdtsc()</co
 de> intrinsic). This counter counts the processor cycles. (See: <a href="h
 ttps://en.wikipedia.org/wiki/Time_Stamp_Counter">https://en.wikipedia.org/
 wiki/Time_Stamp_Counter</a>)</p>\n<p>Similarly\, we read the time stamp co
 unter at the end. The difference between the two readings measures the exe
 cution time of the loop.</p>\n</li>\n<li>\n<p>We add an outermost loop</p>
 \n<div class="pl-code">\n<div class="mb-2 rounded" style="background: #f0f
 0f0\;">\n<pre style="padding: 0.5rem\; margin-bottom: 0px\; line-height: 1
 25%\;"><span style="color: #007020\;">for</span><span style="color: #bbbbb
 b\;"> </span>(<span style="color: #902000\;">int</span><span style="color:
  #bbbbbb\;"> </span>nl<span style="color: #bbbbbb\;"> </span><span style="
 color: #666666\;">=</span><span style="color: #bbbbbb\;"> </span><span sty
 le="color: #40a070\;">0</span>\;<span style="color: #bbbbbb\;"> </span>nl<
 span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">&lt\;
 </span><span style="color: #bbbbbb\;"> </span><span style="color: #40a070\
 ;">1000000</span>\;<span style="color: #bbbbbb\;"> </span>nl<span style="c
 olor: #666666\;">++</span>)<span style="color: #bbbbbb\;"> </span>{<span s
 tyle="color: #bbbbbb\;"> </span>}\n</pre>\n</div>\n</div>\n<p>to increase 
 the amount of time the loop executes. We do this because the loops we are 
 executing are too small and run very fast and so the measuring technique t
 hat we use may not have enough precision. Notice that the compiler is smar
 t and will notice that this loop is useless and will remove it or intercha
 nge it with the inner loop. In order to prevent the compiler from doing th
 at\, we add an instruction after the inner loop which modifies one element
  of an arrays inside the inner loop (in some cases we have used a <code>ve
 ctorize(disable)</code> that you should not remove).</p>\n</li>\n<li>To av
 oid the compiler removing the whole function (the dead code elimination pa
 ss could realize that the result of this code is never used) we also sum a
 ll the elements of one of the arrays computed by the loop that we are meas
 uring\, and we print the result of this sum (which can also be used to ver
 ify that any optimizations were correct). Thus\, if the loop that we want 
 to measure is:\n<div class="pl-code">\n<div class="mb-2 rounded" style="ba
 ckground: #f0f0f0\;">\n<pre style="padding: 0.5rem\; margin-bottom: 0px\; 
 line-height: 125%\;"><span style="color: #902000\;">void</span><span style
 ="color: #bbbbbb\;"> </span><span style="color: #06287e\;">t1</span>(<span
  style="color: #902000\;">float</span><span style="color: #bbbbbb\;"> </sp
 an><span style="color: #666666\;">*</span>A\,<span style="color: #bbbbbb\;
 "> </span><span style="color: #902000\;">float</span><span style="color: #
 bbbbbb\;"> </span><span style="color: #666666\;">*</span>B)<span style="co
 lor: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">    </span><span
  style="color: #007020\;">for</span><span style="color: #bbbbbb\;"> </span
 >(<span style="color: #902000\;">int</span><span style="color: #bbbbbb\;">
  </span>i<span style="color: #bbbbbb\;"> </span><span style="color: #66666
 6\;">=</span><span style="color: #bbbbbb\;"> </span><span style="color: #4
 0a070\;">0</span>\;<span style="color: #bbbbbb\;"> </span>i<span style="co
 lor: #bbbbbb\;"> </span><span style="color: #666666\;">&lt\;</span><span s
 tyle="color: #bbbbbb\;"> </span><span style="color: #40a070\;">1024</span>
 \;<span style="color: #bbbbbb\;"> </span>i<span style="color: #666666\;">+
 =</span><span style="color: #40a070\;">2</span>)<span style="color: #bbbbb
 b\;"> </span>{\n<span style="color: #bbbbbb\;">        </span>A[i<span sty
 le="color: #666666\;">+</span><span style="color: #40a070\;">1</span>]<spa
 n style="color: #bbbbbb\;"> </span><span style="color: #666666\;">=</span>
 <span style="color: #bbbbbb\;"> </span>A[i]<span style="color: #bbbbbb\;">
  </span><span style="color: #666666\;">+</span><span style="color: #bbbbbb
 \;"> </span>B[i]\;\n<span style="color: #bbbbbb\;">    </span>}\n}\n</pre>
 \n</div>\n</div>\n<p>We need to write the following code:</p>\n<div class=
 "pl-code">\n<div class="mb-2 rounded" style="background: #f0f0f0\;">\n<pre
  style="padding: 0.5rem\; margin-bottom: 0px\; line-height: 125%\;"><span 
 style="color: #902000\;">void</span><span style="color: #bbbbbb\;"> </span
 ><span style="color: #06287e\;">t1</span>(<span style="color: #902000\;">f
 loat</span><span style="color: #bbbbbb\;"> </span><span style="color: #666
 666\;">*</span>A\,<span style="color: #bbbbbb\;"> </span><span style="colo
 r: #902000\;">float</span><span style="color: #bbbbbb\;"> </span><span sty
 le="color: #666666\;">*</span><span style="color: #bbbbbb\;"> </span>B)<sp
 an style="color: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;">    
 </span><span style="color: #902000\;">unsigned</span><span style="color: #
 bbbbbb\;"> </span><span style="color: #902000\;">long</span><span style="c
 olor: #bbbbbb\;"> </span><span style="color: #902000\;">long</span><span s
 tyle="color: #bbbbbb\;"> </span>start_c\,<span style="color: #bbbbbb\;"> <
 /span>end_c\,<span style="color: #bbbbbb\;"> </span>diff_c\;\n<span style=
 "color: #bbbbbb\;">    </span>start_c<span style="color: #bbbbbb\;"> </spa
 n><span style="color: #666666\;">=</span><span style="color: #bbbbbb\;"> <
 /span>__rdtsc()\;\n\n<span style="color: #bbbbbb\;">    </span><span style
 ="color: #007020\;">for</span><span style="color: #bbbbbb\;"> </span>(<spa
 n style="color: #902000\;">int</span><span style="color: #bbbbbb\;"> </spa
 n>nl<span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">
 =</span><span style="color: #bbbbbb\;"> </span><span style="color: #40a070
 \;">0</span>\;<span style="color: #bbbbbb\;"> </span>nl<span style="color:
  #bbbbbb\;"> </span><span style="color: #666666\;">&lt\;</span><span style
 ="color: #bbbbbb\;"> </span><span style="color: #40a070\;">1000000</span>\
 ;<span style="color: #bbbbbb\;"> </span>nl<span style="color: #666666\;">+
 +</span>)<span style="color: #bbbbbb\;"> </span>{\n<span style="color: #bb
 bbbb\;">        </span><span style="color: #007020\;">for</span><span styl
 e="color: #bbbbbb\;"> </span>(<span style="color: #902000\;">int</span><sp
 an style="color: #bbbbbb\;"> </span>i<span style="color: #bbbbbb\;"> </spa
 n><span style="color: #666666\;">=</span><span style="color: #bbbbbb\;"> <
 /span><span style="color: #40a070\;">0</span>\;<span style="color: #bbbbbb
 \;"> </span>i<span style="color: #bbbbbb\;"> </span><span style="color: #6
 66666\;">&lt\;</span><span style="color: #bbbbbb\;"> </span><span style="c
 olor: #40a070\;">1024</span>\;<span style="color: #bbbbbb\;"> </span>i<spa
 n style="color: #666666\;">+=</span><span style="color: #40a070\;">2</span
 >)<span style="color: #bbbbbb\;"> </span>{\n<span style="color: #bbbbbb\;"
 >            </span>A[i<span style="color: #666666\;">+</span><span style=
 "color: #40a070\;">1</span>]<span style="color: #bbbbbb\;"> </span><span s
 tyle="color: #666666\;">=</span><span style="color: #bbbbbb\;"> </span>A[i
 ]<span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">+</
 span><span style="color: #bbbbbb\;"> </span>B[i]\;\n<span style="color: #b
 bbbbb\;">        </span>}\n<span style="color: #bbbbbb\;">        </span>B
 [<span style="color: #40a070\;">0</span>]<span style="color: #666666\;">++
 </span>\;\n<span style="color: #bbbbbb\;">    </span>}\n\n<span style="col
 or: #bbbbbb\;">    </span>end_c<span style="color: #bbbbbb\;"> </span><spa
 n style="color: #666666\;">=</span><span style="color: #bbbbbb\;"> </span>
 __rdtsc()\;\n<span style="color: #bbbbbb\;">    </span>diff_c<span style="
 color: #bbbbbb\;"> </span><span style="color: #666666\;">=</span><span sty
 le="color: #bbbbbb\;"> </span>end_c<span style="color: #bbbbbb\;"> </span>
 <span style="color: #666666\;">-</span><span style="color: #bbbbbb\;"> </s
 pan>start_c\;\n<span style="color: #bbbbbb\;">    </span><span style="colo
 r: #902000\;">float</span><span style="color: #bbbbbb\;"> </span>giga_cycl
 e<span style="color: #bbbbbb\;"> </span><span style="color: #666666\;">=</
 span><span style="color: #bbbbbb\;"> </span>diff_c<span style="color: #bbb
 bbb\;"> </span><span style="color: #666666\;">/</span><span style="color: 
 #bbbbbb\;"> </span><span style="color: #40a070\;">1000000000.0</span>\;\n<
 span style="color: #bbbbbb\;">    </span><span style="color: #902000\;">fl
 oat</span><span style="color: #bbbbbb\;"> </span>ret<span style="color: #b
 bbbbb\;"> </span><span style="color: #666666\;">=</span><span style="color
 : #bbbbbb\;"> </span><span style="color: #40a070\;">0</span>\;\n<span styl
 e="color: #bbbbbb\;">    </span><span style="color: #007020\;">for</span><
 span style="color: #bbbbbb\;"> </span>(<span style="color: #902000\;">int<
 /span><span style="color: #bbbbbb\;"> </span>i<span style="color: #bbbbbb\
 ;"> </span><span style="color: #666666\;">=</span><span style="color: #bbb
 bbb\;"> </span><span style="color: #40a070\;">0</span>\;<span style="color
 : #bbbbbb\;"> </span>i<span style="color: #bbbbbb\;"> </span><span style="
 color: #666666\;">&lt\;</span><span style="color: #bbbbbb\;"> </span><span
  style="color: #40a070\;">1024</span>\;<span style="color: #bbbbbb\;"> </s
 pan>i<span style="color: #666666\;">++</span>)<span style="color: #bbbbbb\
 ;"> </span>{\n<span style="color: #bbbbbb\;">        </span>ret<span style
 ="color: #bbbbbb\;"> </span><span style="color: #666666\;">+=</span><span 
 style="color: #bbbbbb\;"> </span>A[i]\;\n<span style="color: #bbbbbb\;">  
   </span>}\n<span style="color: #bbbbbb\;">    </span>printf(<span style="
 color: #4070a0\;">"It took %f giga cycles and the result is: %f"</span>\,<
 span style="color: #bbbbbb\;"> </span>giga_cycle\,<span style="color: #bbb
 bbb\;"> </span>ret)\;\n}\n</pre>\n</div>\n</div>\n</li>\n</ul>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL1/ALP Meeting Room [cs_233_120221_213565]
DTSTART:20220504T130000Z
DTEND:20220504T150000Z
DTSTAMP:20220114T232800Z
UID:event-calendar-event-50795
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:861 6580 1527] (https://illin
 ois.zoom.us/j/86165801527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#calendar_event_50795
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/861658
 01527?pwd=UnE4c3hnc2pEcS9CSHV1R0hOK2krZz09" target="_blank">Click here to 
 join Zoom Meeting:861 6580 1527</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:AL2/ALR Meeting [cs_233_120221_213565]
DTSTART:20220504T150000Z
DTEND:20220504T170000Z
DTSTAMP:20220114T233000Z
UID:event-calendar-event-50826
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:[Click here to join Zoom Meeting:832 4849 5384] (https://illin
 ois.zoom.us/j/83248495384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09)
LOCATION:Zoom Online Meeting
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#calendar_event_50826
X-ALT-DESC;FMTTYPE=text/html:<p><a href="https://illinois.zoom.us/j/832484
 95384?pwd=blM4ak5ZOHBFNUZicUdDZWdOZGdkUT09" target="_blank">Click here to 
 join Zoom Meeting:832 4849 5384</a></p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:FOOD DRIVE -- 3 ITEMS DONATED FOR 3 POINTS EXTRA CREDIT - PICTURE 
 NEEDED! [fshn_120_120221_213078]
DTSTART:20220504T200000Z
DTEND:20220504T200000Z
DTSTAMP:20220211T193300Z
UID:event-assignment-366708
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=05&year=2022#assignment_366708
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:PrairieLearn PQ Aggregated [cs_233_120221_213565]
DTSTART:20220505T030000Z
DTEND:20220505T030000Z
DTSTAMP:20220112T143200Z
UID:event-assignment-367956
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#assignment_367956
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:Attendance [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220504T000000
DTEND;VALUE=DATE:20220504T000000
DTSTAMP:20220112T143100Z
UID:event-assignment-367915
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Attendance points will be aggregated and added at the end of t
 he semester.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#assignment_367915
X-ALT-DESC;FMTTYPE=text/html:<p>Attendance points will be aggregated and a
 dded at the end of the semester.</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Extra Credit Eligible [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220504T000000
DTEND;VALUE=DATE:20220504T000000
DTSTAMP:20220112T143200Z
UID:event-assignment-367918
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:You are extra credit eligible if two of the following statemen
 ts are true\n\n* You earned 75% attendance points after 3 drops and after 
 your attendance points were scaled by the number of structured roles you a
 ssumed (number of roles you participated in / 3).\n\n* You completed at le
 ast one peer review.\n\n* Your average peer review rating was better than 
 unsatisfactory.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#assignment_367918
X-ALT-DESC;FMTTYPE=text/html:<p>You are extra credit eligible if two of th
 e following statements are true</p>\n<ul>\n<li>You earned 75% attendance p
 oints after 3 drops and after your attendance points were scaled by the nu
 mber of structured roles you assumed (number of roles you participated in 
 / 3).</li>\n<li>You completed at least one peer review.</li>\n<li>Your ave
 rage peer review rating was better than unsatisfactory.</li>\n</ul>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Extra Credit Subtotal (only extra credit that is not already inclu
 ded elswhere) [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220504T000000
DTEND;VALUE=DATE:20220504T000000
DTSTAMP:20220112T143400Z
UID:event-assignment-367919
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#assignment_367919
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:PrairieLearn GA aggregated [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220504T000000
DTEND;VALUE=DATE:20220504T000000
DTSTAMP:20220112T143000Z
UID:event-assignment-367955
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Aggregated points from PrairieLearn GAs will be placed here. W
 e will not create a separate column for each GA because you can see that a
 ll in PrairieLearn's gradebook.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#assignment_367955
X-ALT-DESC;FMTTYPE=text/html:<p>Aggregated points from PrairieLearn GAs wi
 ll be placed here. We will not create a separate column for each GA becaus
 e you can see that all in PrairieLearn's gradebook.</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:PrairieLearn Preflights Aggregated [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220504T000000
DTEND;VALUE=DATE:20220504T000000
DTSTAMP:20220112T143000Z
UID:event-assignment-367957
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Aggregated points from PrairieLearn Preflights will be placed 
 here. We will not create a separate column for each preflight because you 
 can see that all in PrairieLearn's gradebook.
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#assignment_367957
X-ALT-DESC;FMTTYPE=text/html:<p>Aggregated points from PrairieLearn Prefli
 ghts will be placed here. We will not create a separate column for each pr
 eflight because you can see that all in PrairieLearn's gradebook.</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:PrairieLearn XC aggregated [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220504T000000
DTEND;VALUE=DATE:20220504T000000
DTSTAMP:20220112T143200Z
UID:event-assignment-367958
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#assignment_367958
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:51 POINT COMPREHENSIVE REVIEW - REQUIRED - UNLIMITED TAKES - HIGHE
 ST SCORE COUNTS [fshn_120_120221_213078]
DTSTART:20220506T200000Z
DTEND:20220506T200000Z
DTSTAMP:20220112T054400Z
UID:event-assignment-366689
SEQUENCE:0
CLASS:PUBLIC
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=05&year=2022#assignment_366689
END:VEVENT
BEGIN:VEVENT
SUMMARY:EXTRA CREDIT FOOD SAFETY DISCUSSION BOARD - DUE BY 3PM CT ON FRIDA
 Y MAY 6TH (FSHN 120 ONL Spring 2022 CRN57561) [fshn_120_120221_213078]
DTSTART:20220506T200000Z
DTEND:20220506T200000Z
DTSTAMP:20220110T195400Z
UID:event-assignment-override-12733
SEQUENCE:0
CLASS:PUBLIC
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=05&year=2022#assignment_366719
END:VEVENT
BEGIN:VEVENT
SUMMARY:PRE-FINAL EXAM REFLECTION [fshn_120_120221_213078]
DTSTART:20220506T200000Z
DTEND:20220506T200000Z
DTSTAMP:20220309T152900Z
UID:event-assignment-366767
SEQUENCE:0
CLASS:PUBLIC
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=05&year=2022#assignment_366767
END:VEVENT
BEGIN:VEVENT
SUMMARY:ONLINE FINAL EXAM - WEDNESDAY MAY 11th at 6PM SHARP [fshn_120_1202
 21_213078]
DTSTART:20220511T230000Z
DTEND:20220511T230000Z
DTSTAMP:20220301T170200Z
UID:event-assignment-366683
SEQUENCE:0
CLASS:PUBLIC
URL:https://canvas.illinois.edu/calendar?include_contexts=course_17719&mon
 th=05&year=2022#assignment_366683
END:VEVENT
BEGIN:VEVENT
SUMMARY:Current Final Percentage [cs_233_120221_213565]
DTSTART:20220514T030000Z
DTEND:20220514T030000Z
DTSTAMP:20220112T143500Z
UID:event-assignment-367916
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#assignment_367916
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
BEGIN:VEVENT
SUMMARY:Final Exam [cs_233_120221_213565]
DTSTART:20220514T030000Z
DTEND:20220514T030000Z
DTSTAMP:20220112T143400Z
UID:event-assignment-367920
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:Comprehensive Final Exam. The Practice Final exactly mirrors t
 he real Final Exam
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#assignment_367920
X-ALT-DESC;FMTTYPE=text/html:<p>Comprehensive Final Exam. The Practice Fin
 al exactly mirrors the real Final Exam</p>
END:VEVENT
BEGIN:VEVENT
SUMMARY:Lab Subtotal [cs_233_120221_213565]
DTSTART;VALUE=DATE:20220513T000000
DTEND;VALUE=DATE:20220513T000000
DTSTAMP:20220305T130800Z
UID:event-assignment-367954
SEQUENCE:0
CLASS:PUBLIC
DESCRIPTION:
URL:https://canvas.illinois.edu/calendar?include_contexts=course_18018&mon
 th=05&year=2022#assignment_367954
X-ALT-DESC;FMTTYPE=text/html:
END:VEVENT
END:VCALENDAR
